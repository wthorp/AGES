// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dbroot_v2.proto

package keyhole_dbroot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DrawFlagProto_DrawFlagType int32

const (
	DrawFlagProto_TYPE_FILL_ONLY        DrawFlagProto_DrawFlagType = 1
	DrawFlagProto_TYPE_OUTLINE_ONLY     DrawFlagProto_DrawFlagType = 2
	DrawFlagProto_TYPE_FILL_AND_OUTLINE DrawFlagProto_DrawFlagType = 3
	DrawFlagProto_TYPE_ANTIALIASING     DrawFlagProto_DrawFlagType = 4
	DrawFlagProto_TYPE_CENTER_LABEL     DrawFlagProto_DrawFlagType = 5
)

var DrawFlagProto_DrawFlagType_name = map[int32]string{
	1: "TYPE_FILL_ONLY",
	2: "TYPE_OUTLINE_ONLY",
	3: "TYPE_FILL_AND_OUTLINE",
	4: "TYPE_ANTIALIASING",
	5: "TYPE_CENTER_LABEL",
}
var DrawFlagProto_DrawFlagType_value = map[string]int32{
	"TYPE_FILL_ONLY":        1,
	"TYPE_OUTLINE_ONLY":     2,
	"TYPE_FILL_AND_OUTLINE": 3,
	"TYPE_ANTIALIASING":     4,
	"TYPE_CENTER_LABEL":     5,
}

func (x DrawFlagProto_DrawFlagType) Enum() *DrawFlagProto_DrawFlagType {
	p := new(DrawFlagProto_DrawFlagType)
	*p = x
	return p
}
func (x DrawFlagProto_DrawFlagType) String() string {
	return proto.EnumName(DrawFlagProto_DrawFlagType_name, int32(x))
}
func (x *DrawFlagProto_DrawFlagType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DrawFlagProto_DrawFlagType_value, data, "DrawFlagProto_DrawFlagType")
	if err != nil {
		return err
	}
	*x = DrawFlagProto_DrawFlagType(value)
	return nil
}
func (DrawFlagProto_DrawFlagType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{8, 0}
}

type NestedFeatureProto_FeatureType int32

const (
	NestedFeatureProto_TYPE_POINT_Z   NestedFeatureProto_FeatureType = 1
	NestedFeatureProto_TYPE_POLYGON_Z NestedFeatureProto_FeatureType = 2
	NestedFeatureProto_TYPE_LINE_Z    NestedFeatureProto_FeatureType = 3
	NestedFeatureProto_TYPE_TERRAIN   NestedFeatureProto_FeatureType = 4
)

var NestedFeatureProto_FeatureType_name = map[int32]string{
	1: "TYPE_POINT_Z",
	2: "TYPE_POLYGON_Z",
	3: "TYPE_LINE_Z",
	4: "TYPE_TERRAIN",
}
var NestedFeatureProto_FeatureType_value = map[string]int32{
	"TYPE_POINT_Z":   1,
	"TYPE_POLYGON_Z": 2,
	"TYPE_LINE_Z":    3,
	"TYPE_TERRAIN":   4,
}

func (x NestedFeatureProto_FeatureType) Enum() *NestedFeatureProto_FeatureType {
	p := new(NestedFeatureProto_FeatureType)
	*p = x
	return p
}
func (x NestedFeatureProto_FeatureType) String() string {
	return proto.EnumName(NestedFeatureProto_FeatureType_name, int32(x))
}
func (x *NestedFeatureProto_FeatureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NestedFeatureProto_FeatureType_value, data, "NestedFeatureProto_FeatureType")
	if err != nil {
		return err
	}
	*x = NestedFeatureProto_FeatureType(value)
	return nil
}
func (NestedFeatureProto_FeatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{13, 0}
}

// enum that lists all available features.
type MfeDomainFeaturesProto_SupportedFeature int32

const (
	MfeDomainFeaturesProto_GEOCODING          MfeDomainFeaturesProto_SupportedFeature = 0
	MfeDomainFeaturesProto_LOCAL_SEARCH       MfeDomainFeaturesProto_SupportedFeature = 1
	MfeDomainFeaturesProto_DRIVING_DIRECTIONS MfeDomainFeaturesProto_SupportedFeature = 2
)

var MfeDomainFeaturesProto_SupportedFeature_name = map[int32]string{
	0: "GEOCODING",
	1: "LOCAL_SEARCH",
	2: "DRIVING_DIRECTIONS",
}
var MfeDomainFeaturesProto_SupportedFeature_value = map[string]int32{
	"GEOCODING":          0,
	"LOCAL_SEARCH":       1,
	"DRIVING_DIRECTIONS": 2,
}

func (x MfeDomainFeaturesProto_SupportedFeature) Enum() *MfeDomainFeaturesProto_SupportedFeature {
	p := new(MfeDomainFeaturesProto_SupportedFeature)
	*p = x
	return p
}
func (x MfeDomainFeaturesProto_SupportedFeature) String() string {
	return proto.EnumName(MfeDomainFeaturesProto_SupportedFeature_name, int32(x))
}
func (x *MfeDomainFeaturesProto_SupportedFeature) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MfeDomainFeaturesProto_SupportedFeature_value, data, "MfeDomainFeaturesProto_SupportedFeature")
	if err != nil {
		return err
	}
	*x = MfeDomainFeaturesProto_SupportedFeature(value)
	return nil
}
func (MfeDomainFeaturesProto_SupportedFeature) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{14, 0}
}

type ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType int32

const (
	ClientOptionsProto_PrecipitationsOptions_WeatherMapping_NO_PRECIPITATION ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType = 0
	ClientOptionsProto_PrecipitationsOptions_WeatherMapping_RAIN             ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType = 1
	ClientOptionsProto_PrecipitationsOptions_WeatherMapping_SNOW             ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType = 2
)

var ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType_name = map[int32]string{
	0: "NO_PRECIPITATION",
	1: "RAIN",
	2: "SNOW",
}
var ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType_value = map[string]int32{
	"NO_PRECIPITATION": 0,
	"RAIN":             1,
	"SNOW":             2,
}

func (x ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType) Enum() *ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType {
	p := new(ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType)
	*p = x
	return p
}
func (x ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType) String() string {
	return proto.EnumName(ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType_name, int32(x))
}
func (x *ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType_value, data, "ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType")
	if err != nil {
		return err
	}
	*x = ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType(value)
	return nil
}
func (ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{15, 0, 0, 0}
}

type CobrandProto_TiePoint int32

const (
	CobrandProto_TOP_LEFT      CobrandProto_TiePoint = 0
	CobrandProto_TOP_CENTER    CobrandProto_TiePoint = 1
	CobrandProto_TOP_RIGHT     CobrandProto_TiePoint = 2
	CobrandProto_MID_LEFT      CobrandProto_TiePoint = 3
	CobrandProto_MID_CENTER    CobrandProto_TiePoint = 4
	CobrandProto_MID_RIGHT     CobrandProto_TiePoint = 5
	CobrandProto_BOTTOM_LEFT   CobrandProto_TiePoint = 6
	CobrandProto_BOTTOM_CENTER CobrandProto_TiePoint = 7
	CobrandProto_BOTTOM_RIGHT  CobrandProto_TiePoint = 8
)

var CobrandProto_TiePoint_name = map[int32]string{
	0: "TOP_LEFT",
	1: "TOP_CENTER",
	2: "TOP_RIGHT",
	3: "MID_LEFT",
	4: "MID_CENTER",
	5: "MID_RIGHT",
	6: "BOTTOM_LEFT",
	7: "BOTTOM_CENTER",
	8: "BOTTOM_RIGHT",
}
var CobrandProto_TiePoint_value = map[string]int32{
	"TOP_LEFT":      0,
	"TOP_CENTER":    1,
	"TOP_RIGHT":     2,
	"MID_LEFT":      3,
	"MID_CENTER":    4,
	"MID_RIGHT":     5,
	"BOTTOM_LEFT":   6,
	"BOTTOM_CENTER": 7,
	"BOTTOM_RIGHT":  8,
}

func (x CobrandProto_TiePoint) Enum() *CobrandProto_TiePoint {
	p := new(CobrandProto_TiePoint)
	*p = x
	return p
}
func (x CobrandProto_TiePoint) String() string {
	return proto.EnumName(CobrandProto_TiePoint_name, int32(x))
}
func (x *CobrandProto_TiePoint) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CobrandProto_TiePoint_value, data, "CobrandProto_TiePoint")
	if err != nil {
		return err
	}
	*x = CobrandProto_TiePoint(value)
	return nil
}
func (CobrandProto_TiePoint) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{21, 0}
}

// Result format type for search results.
type EndSnippetProto_SearchConfigProto_SearchServer_ResultType int32

const (
	// The results are pure KML, which should be rendered in the Earth 3D
	// view directly. The search results listing should be generated from
	// the KML in whatever way is most appropriate.
	EndSnippetProto_SearchConfigProto_SearchServer_RESULT_TYPE_KML EndSnippetProto_SearchConfigProto_SearchServer_ResultType = 0
	// The results are an XML document which can be piped through XSLT style
	// sheets to generate KML for display in the Earth 3D view and HTML for
	// display in the search results listing.
	EndSnippetProto_SearchConfigProto_SearchServer_RESULT_TYPE_XML EndSnippetProto_SearchConfigProto_SearchServer_ResultType = 1
)

var EndSnippetProto_SearchConfigProto_SearchServer_ResultType_name = map[int32]string{
	0: "RESULT_TYPE_KML",
	1: "RESULT_TYPE_XML",
}
var EndSnippetProto_SearchConfigProto_SearchServer_ResultType_value = map[string]int32{
	"RESULT_TYPE_KML": 0,
	"RESULT_TYPE_XML": 1,
}

func (x EndSnippetProto_SearchConfigProto_SearchServer_ResultType) Enum() *EndSnippetProto_SearchConfigProto_SearchServer_ResultType {
	p := new(EndSnippetProto_SearchConfigProto_SearchServer_ResultType)
	*p = x
	return p
}
func (x EndSnippetProto_SearchConfigProto_SearchServer_ResultType) String() string {
	return proto.EnumName(EndSnippetProto_SearchConfigProto_SearchServer_ResultType_name, int32(x))
}
func (x *EndSnippetProto_SearchConfigProto_SearchServer_ResultType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EndSnippetProto_SearchConfigProto_SearchServer_ResultType_value, data, "EndSnippetProto_SearchConfigProto_SearchServer_ResultType")
	if err != nil {
		return err
	}
	*x = EndSnippetProto_SearchConfigProto_SearchServer_ResultType(value)
	return nil
}
func (EndSnippetProto_SearchConfigProto_SearchServer_ResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 0, 0, 0}
}

// List of all known encryption types for the encrypted buffer.
type EncryptedDbRootProto_EncryptionType int32

const (
	EncryptedDbRootProto_ENCRYPTION_XOR EncryptedDbRootProto_EncryptionType = 0
)

var EncryptedDbRootProto_EncryptionType_name = map[int32]string{
	0: "ENCRYPTION_XOR",
}
var EncryptedDbRootProto_EncryptionType_value = map[string]int32{
	"ENCRYPTION_XOR": 0,
}

func (x EncryptedDbRootProto_EncryptionType) Enum() *EncryptedDbRootProto_EncryptionType {
	p := new(EncryptedDbRootProto_EncryptionType)
	*p = x
	return p
}
func (x EncryptedDbRootProto_EncryptionType) String() string {
	return proto.EnumName(EncryptedDbRootProto_EncryptionType_name, int32(x))
}
func (x *EncryptedDbRootProto_EncryptionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EncryptedDbRootProto_EncryptionType_value, data, "EncryptedDbRootProto_EncryptionType")
	if err != nil {
		return err
	}
	*x = EncryptedDbRootProto_EncryptionType(value)
	return nil
}
func (EncryptedDbRootProto_EncryptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{32, 0}
}

// Protocol message that pairs an ID (which must be unique in the entire dbroot
// hierarchy downloaded in one session) with an actual string.
type StringEntryProto struct {
	// Unique ID of string used in other parts of dbroot. Always use 4 bytes
	// for storage to avoid ints taking way more space than this, since we will
	// use large numbers frequently.
	StringId *uint32 `protobuf:"fixed32,1,req,name=string_id,json=stringId" json:"string_id,omitempty"`
	// Actual value of string
	StringValue          *string  `protobuf:"bytes,2,req,name=string_value,json=stringValue" json:"string_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringEntryProto) Reset()         { *m = StringEntryProto{} }
func (m *StringEntryProto) String() string { return proto.CompactTextString(m) }
func (*StringEntryProto) ProtoMessage()    {}
func (*StringEntryProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{0}
}
func (m *StringEntryProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringEntryProto.Unmarshal(m, b)
}
func (m *StringEntryProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringEntryProto.Marshal(b, m, deterministic)
}
func (dst *StringEntryProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringEntryProto.Merge(dst, src)
}
func (m *StringEntryProto) XXX_Size() int {
	return xxx_messageInfo_StringEntryProto.Size(m)
}
func (m *StringEntryProto) XXX_DiscardUnknown() {
	xxx_messageInfo_StringEntryProto.DiscardUnknown(m)
}

var xxx_messageInfo_StringEntryProto proto.InternalMessageInfo

func (m *StringEntryProto) GetStringId() uint32 {
	if m != nil && m.StringId != nil {
		return *m.StringId
	}
	return 0
}

func (m *StringEntryProto) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

// Simple pair that can contain either a string id (which must be unique across
// all ids in the dbroot hierarchy) or an actual value. If both values are
// present, behavior of the client is undefined and implementation dependent.
// Nearly all string values in other protocol messages use this message to
// allow strings to be specified as an index in the translation table, or
// directly (which eliminates the need for any lookup)
// Strings that must be translated (e.g. not the same across all languages)
// should probably use the string_id field so that the translation (which
// varies) can be put in the translation table portion of the dbroot
// (see DbRootProto below). This allows the part that references string_id
// to be the same across all language versions of dbroot, and have only one
// dbroot object that changes across different languages.
type StringIdOrValueProto struct {
	// Id of string to look up in translation table (see DbRootProto)
	StringId *uint32 `protobuf:"fixed32,1,opt,name=string_id,json=stringId" json:"string_id,omitempty"`
	// Actual value of string, if present - does not require any lookup.
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringIdOrValueProto) Reset()         { *m = StringIdOrValueProto{} }
func (m *StringIdOrValueProto) String() string { return proto.CompactTextString(m) }
func (*StringIdOrValueProto) ProtoMessage()    {}
func (*StringIdOrValueProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{1}
}
func (m *StringIdOrValueProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringIdOrValueProto.Unmarshal(m, b)
}
func (m *StringIdOrValueProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringIdOrValueProto.Marshal(b, m, deterministic)
}
func (dst *StringIdOrValueProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringIdOrValueProto.Merge(dst, src)
}
func (m *StringIdOrValueProto) XXX_Size() int {
	return xxx_messageInfo_StringIdOrValueProto.Size(m)
}
func (m *StringIdOrValueProto) XXX_DiscardUnknown() {
	xxx_messageInfo_StringIdOrValueProto.DiscardUnknown(m)
}

var xxx_messageInfo_StringIdOrValueProto proto.InternalMessageInfo

func (m *StringIdOrValueProto) GetStringId() uint32 {
	if m != nil && m.StringId != nil {
		return *m.StringId
	}
	return 0
}

func (m *StringIdOrValueProto) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// List of values that describe the planet size and shape (assumed to be an
// oblate spheroid) and extra data that allow encoding negative altitudes under
// the water surface
type PlanetModelProto struct {
	// Mean planet radius. Default value is the WGS84 model for earth.
	Radius *float64 `protobuf:"fixed64,1,opt,name=radius,def=6378.137" json:"radius,omitempty"`
	// Planet flattening. Default value is 1.0/298.257223563 (from  WGS84)
	Flattening *float64 `protobuf:"fixed64,2,opt,name=flattening,def=0.00335281066474748" json:"flattening,omitempty"`
	// Elevation bias
	ElevationBias *float64 `protobuf:"fixed64,4,opt,name=elevation_bias,json=elevationBias" json:"elevation_bias,omitempty"`
	// Bias for negative altitude so that ocean tiles can be streamed to older
	// clients
	NegativeAltitudeExponentBias *int32 `protobuf:"varint,5,opt,name=negative_altitude_exponent_bias,json=negativeAltitudeExponentBias" json:"negative_altitude_exponent_bias,omitempty"`
	// Threshold below which negative altitudes are compressed
	CompressedNegativeAltitudeThreshold *float64 `protobuf:"fixed64,6,opt,name=compressed_negative_altitude_threshold,json=compressedNegativeAltitudeThreshold" json:"compressed_negative_altitude_threshold,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *PlanetModelProto) Reset()         { *m = PlanetModelProto{} }
func (m *PlanetModelProto) String() string { return proto.CompactTextString(m) }
func (*PlanetModelProto) ProtoMessage()    {}
func (*PlanetModelProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{2}
}
func (m *PlanetModelProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanetModelProto.Unmarshal(m, b)
}
func (m *PlanetModelProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanetModelProto.Marshal(b, m, deterministic)
}
func (dst *PlanetModelProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanetModelProto.Merge(dst, src)
}
func (m *PlanetModelProto) XXX_Size() int {
	return xxx_messageInfo_PlanetModelProto.Size(m)
}
func (m *PlanetModelProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanetModelProto.DiscardUnknown(m)
}

var xxx_messageInfo_PlanetModelProto proto.InternalMessageInfo

const Default_PlanetModelProto_Radius float64 = 6378.137
const Default_PlanetModelProto_Flattening float64 = 0.00335281066474748

func (m *PlanetModelProto) GetRadius() float64 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return Default_PlanetModelProto_Radius
}

func (m *PlanetModelProto) GetFlattening() float64 {
	if m != nil && m.Flattening != nil {
		return *m.Flattening
	}
	return Default_PlanetModelProto_Flattening
}

func (m *PlanetModelProto) GetElevationBias() float64 {
	if m != nil && m.ElevationBias != nil {
		return *m.ElevationBias
	}
	return 0
}

func (m *PlanetModelProto) GetNegativeAltitudeExponentBias() int32 {
	if m != nil && m.NegativeAltitudeExponentBias != nil {
		return *m.NegativeAltitudeExponentBias
	}
	return 0
}

func (m *PlanetModelProto) GetCompressedNegativeAltitudeThreshold() float64 {
	if m != nil && m.CompressedNegativeAltitudeThreshold != nil {
		return *m.CompressedNegativeAltitudeThreshold
	}
	return 0
}

// The client has the ability to display a copyright message on a per-layer
// basis only. If you have multiple providers' data contained in one layer and
// need to display a copyright for each, you'll have to break the layer into
// multiples, each with its own provider specified.
type ProviderInfoProto struct {
	// Must be unique across all providers.
	ProviderId *int32 `protobuf:"varint,1,req,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Contents of the copyright as an actual string or index in translation
	// table.
	CopyrightString *StringIdOrValueProto `protobuf:"bytes,2,opt,name=copyright_string,json=copyrightString" json:"copyright_string,omitempty"`
	// Distance in pixels that indicates how far from the bottom of the screen
	// the copyright appears for that provider.
	VerticalPixelOffset  *int32   `protobuf:"varint,3,opt,name=vertical_pixel_offset,json=verticalPixelOffset,def=-1" json:"vertical_pixel_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderInfoProto) Reset()         { *m = ProviderInfoProto{} }
func (m *ProviderInfoProto) String() string { return proto.CompactTextString(m) }
func (*ProviderInfoProto) ProtoMessage()    {}
func (*ProviderInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{3}
}
func (m *ProviderInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderInfoProto.Unmarshal(m, b)
}
func (m *ProviderInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderInfoProto.Marshal(b, m, deterministic)
}
func (dst *ProviderInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderInfoProto.Merge(dst, src)
}
func (m *ProviderInfoProto) XXX_Size() int {
	return xxx_messageInfo_ProviderInfoProto.Size(m)
}
func (m *ProviderInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderInfoProto proto.InternalMessageInfo

const Default_ProviderInfoProto_VerticalPixelOffset int32 = -1

func (m *ProviderInfoProto) GetProviderId() int32 {
	if m != nil && m.ProviderId != nil {
		return *m.ProviderId
	}
	return 0
}

func (m *ProviderInfoProto) GetCopyrightString() *StringIdOrValueProto {
	if m != nil {
		return m.CopyrightString
	}
	return nil
}

func (m *ProviderInfoProto) GetVerticalPixelOffset() int32 {
	if m != nil && m.VerticalPixelOffset != nil {
		return *m.VerticalPixelOffset
	}
	return Default_ProviderInfoProto_VerticalPixelOffset
}

// When a placemark is clicked on a pop-up bubble 'pops up'. Only enabled for
// point layers, the pop-up bubbles support a very limited set of HTML and
// image linking. For a full description of what can be contained in the
// pop-up bubble description go to:
// http://earth.google.com/kml/kml_tags_21.html#description
type PopUpProto struct {
	// Over-rides the default client pop-up html which contains entity references
	// to $[name] and $[geDirections]. Set this field to true if you want
	// to control all of the HTML behavior in the bubble.
	IsBalloonStyle *bool `protobuf:"varint,1,opt,name=is_balloon_style,json=isBalloonStyle,def=0" json:"is_balloon_style,omitempty"`
	// Text contents of description or balloon style.
	Text *StringIdOrValueProto `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	// Background and text color in balloon. Both colors must be specified
	// in abgr format.
	BackgroundColorAbgr  *uint32  `protobuf:"fixed32,3,opt,name=background_color_abgr,json=backgroundColorAbgr,def=4294967295" json:"background_color_abgr,omitempty"`
	TextColorAbgr        *uint32  `protobuf:"fixed32,4,opt,name=text_color_abgr,json=textColorAbgr,def=4278190080" json:"text_color_abgr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PopUpProto) Reset()         { *m = PopUpProto{} }
func (m *PopUpProto) String() string { return proto.CompactTextString(m) }
func (*PopUpProto) ProtoMessage()    {}
func (*PopUpProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{4}
}
func (m *PopUpProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PopUpProto.Unmarshal(m, b)
}
func (m *PopUpProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PopUpProto.Marshal(b, m, deterministic)
}
func (dst *PopUpProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopUpProto.Merge(dst, src)
}
func (m *PopUpProto) XXX_Size() int {
	return xxx_messageInfo_PopUpProto.Size(m)
}
func (m *PopUpProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PopUpProto.DiscardUnknown(m)
}

var xxx_messageInfo_PopUpProto proto.InternalMessageInfo

const Default_PopUpProto_IsBalloonStyle bool = false
const Default_PopUpProto_BackgroundColorAbgr uint32 = 4294967295
const Default_PopUpProto_TextColorAbgr uint32 = 4278190080

func (m *PopUpProto) GetIsBalloonStyle() bool {
	if m != nil && m.IsBalloonStyle != nil {
		return *m.IsBalloonStyle
	}
	return Default_PopUpProto_IsBalloonStyle
}

func (m *PopUpProto) GetText() *StringIdOrValueProto {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *PopUpProto) GetBackgroundColorAbgr() uint32 {
	if m != nil && m.BackgroundColorAbgr != nil {
		return *m.BackgroundColorAbgr
	}
	return Default_PopUpProto_BackgroundColorAbgr
}

func (m *PopUpProto) GetTextColorAbgr() uint32 {
	if m != nil && m.TextColorAbgr != nil {
		return *m.TextColorAbgr
	}
	return Default_PopUpProto_TextColorAbgr
}

type StyleAttributeProto struct {
	// Unique id for this style attribute specification.
	StyleId *string `protobuf:"bytes,1,req,name=style_id,json=styleId" json:"style_id,omitempty"`
	// The provider id used here must be present in the ProviderInfoProto if
	// other than the default. If you need copyright strings to display make sure
	// to fill this value.
	ProviderId *int32 `protobuf:"varint,3,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Display color for polygons.
	PolyColorAbgr *uint32 `protobuf:"fixed32,4,opt,name=poly_color_abgr,json=polyColorAbgr,def=4294967295" json:"poly_color_abgr,omitempty"`
	// Display color for lines.
	LineColorAbgr *uint32  `protobuf:"fixed32,5,opt,name=line_color_abgr,json=lineColorAbgr,def=4294967295" json:"line_color_abgr,omitempty"`
	LineWidth     *float32 `protobuf:"fixed32,6,opt,name=line_width,json=lineWidth,def=1" json:"line_width,omitempty"`
	// Display color of placemark or road name text.
	LabelColorAbgr *uint32  `protobuf:"fixed32,7,opt,name=label_color_abgr,json=labelColorAbgr,def=4294967295" json:"label_color_abgr,omitempty"`
	LabelScale     *float32 `protobuf:"fixed32,8,opt,name=label_scale,json=labelScale,def=1" json:"label_scale,omitempty"`
	// Controls icon 'tinting', a color hue will be applied to the con if
	// specified here.
	PlacemarkIconColorAbgr *uint32  `protobuf:"fixed32,9,opt,name=placemark_icon_color_abgr,json=placemarkIconColorAbgr,def=4294967295" json:"placemark_icon_color_abgr,omitempty"`
	PlacemarkIconScale     *float32 `protobuf:"fixed32,10,opt,name=placemark_icon_scale,json=placemarkIconScale,def=1" json:"placemark_icon_scale,omitempty"`
	// Path to the icon that will be displayed for placemarks or road shields.
	// These can be either 32x32 or 64x64 8-bit/color RGBA, non-interlaced png
	// images. Path can be translated through translation table mechanism (see
	// definition of StringIdOrValueProto for more info).
	PlacemarkIconPath *StringIdOrValueProto `protobuf:"bytes,11,opt,name=placemark_icon_path,json=placemarkIconPath" json:"placemark_icon_path,omitempty"`
	// Specify the offset you'd like from the placemark coordinate point on the X
	// axis.
	PlacemarkIconX *int32 `protobuf:"varint,12,opt,name=placemark_icon_x,json=placemarkIconX,def=0" json:"placemark_icon_x,omitempty"`
	// Specify the offset you'd like from the placemark coordinate point on the Y
	// axis.
	PlacemarkIconY *int32 `protobuf:"varint,13,opt,name=placemark_icon_y,json=placemarkIconY,def=0" json:"placemark_icon_y,omitempty"`
	// Usually, either 32 or 64.
	PlacemarkIconWidth *int32 `protobuf:"varint,14,opt,name=placemark_icon_width,json=placemarkIconWidth,def=32" json:"placemark_icon_width,omitempty"`
	// Usually, either 32 or 64.
	PlacemarkIconHeight *int32 `protobuf:"varint,15,opt,name=placemark_icon_height,json=placemarkIconHeight,def=32" json:"placemark_icon_height,omitempty"`
	// Fields to control behavior in the HTML pop up bubbles when placemarks
	// are clicked on.
	PopUp *PopUpProto `protobuf:"bytes,16,opt,name=pop_up,json=popUp" json:"pop_up,omitempty"`
	// List of draw flags that should be applied to this style. See definition
	// of DrawFlagProto in dbroot.proto.
	DrawFlag             []*DrawFlagProto `protobuf:"bytes,17,rep,name=draw_flag,json=drawFlag" json:"draw_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StyleAttributeProto) Reset()         { *m = StyleAttributeProto{} }
func (m *StyleAttributeProto) String() string { return proto.CompactTextString(m) }
func (*StyleAttributeProto) ProtoMessage()    {}
func (*StyleAttributeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{5}
}
func (m *StyleAttributeProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StyleAttributeProto.Unmarshal(m, b)
}
func (m *StyleAttributeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StyleAttributeProto.Marshal(b, m, deterministic)
}
func (dst *StyleAttributeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StyleAttributeProto.Merge(dst, src)
}
func (m *StyleAttributeProto) XXX_Size() int {
	return xxx_messageInfo_StyleAttributeProto.Size(m)
}
func (m *StyleAttributeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_StyleAttributeProto.DiscardUnknown(m)
}

var xxx_messageInfo_StyleAttributeProto proto.InternalMessageInfo

const Default_StyleAttributeProto_PolyColorAbgr uint32 = 4294967295
const Default_StyleAttributeProto_LineColorAbgr uint32 = 4294967295
const Default_StyleAttributeProto_LineWidth float32 = 1
const Default_StyleAttributeProto_LabelColorAbgr uint32 = 4294967295
const Default_StyleAttributeProto_LabelScale float32 = 1
const Default_StyleAttributeProto_PlacemarkIconColorAbgr uint32 = 4294967295
const Default_StyleAttributeProto_PlacemarkIconScale float32 = 1
const Default_StyleAttributeProto_PlacemarkIconX int32 = 0
const Default_StyleAttributeProto_PlacemarkIconY int32 = 0
const Default_StyleAttributeProto_PlacemarkIconWidth int32 = 32
const Default_StyleAttributeProto_PlacemarkIconHeight int32 = 32

func (m *StyleAttributeProto) GetStyleId() string {
	if m != nil && m.StyleId != nil {
		return *m.StyleId
	}
	return ""
}

func (m *StyleAttributeProto) GetProviderId() int32 {
	if m != nil && m.ProviderId != nil {
		return *m.ProviderId
	}
	return 0
}

func (m *StyleAttributeProto) GetPolyColorAbgr() uint32 {
	if m != nil && m.PolyColorAbgr != nil {
		return *m.PolyColorAbgr
	}
	return Default_StyleAttributeProto_PolyColorAbgr
}

func (m *StyleAttributeProto) GetLineColorAbgr() uint32 {
	if m != nil && m.LineColorAbgr != nil {
		return *m.LineColorAbgr
	}
	return Default_StyleAttributeProto_LineColorAbgr
}

func (m *StyleAttributeProto) GetLineWidth() float32 {
	if m != nil && m.LineWidth != nil {
		return *m.LineWidth
	}
	return Default_StyleAttributeProto_LineWidth
}

func (m *StyleAttributeProto) GetLabelColorAbgr() uint32 {
	if m != nil && m.LabelColorAbgr != nil {
		return *m.LabelColorAbgr
	}
	return Default_StyleAttributeProto_LabelColorAbgr
}

func (m *StyleAttributeProto) GetLabelScale() float32 {
	if m != nil && m.LabelScale != nil {
		return *m.LabelScale
	}
	return Default_StyleAttributeProto_LabelScale
}

func (m *StyleAttributeProto) GetPlacemarkIconColorAbgr() uint32 {
	if m != nil && m.PlacemarkIconColorAbgr != nil {
		return *m.PlacemarkIconColorAbgr
	}
	return Default_StyleAttributeProto_PlacemarkIconColorAbgr
}

func (m *StyleAttributeProto) GetPlacemarkIconScale() float32 {
	if m != nil && m.PlacemarkIconScale != nil {
		return *m.PlacemarkIconScale
	}
	return Default_StyleAttributeProto_PlacemarkIconScale
}

func (m *StyleAttributeProto) GetPlacemarkIconPath() *StringIdOrValueProto {
	if m != nil {
		return m.PlacemarkIconPath
	}
	return nil
}

func (m *StyleAttributeProto) GetPlacemarkIconX() int32 {
	if m != nil && m.PlacemarkIconX != nil {
		return *m.PlacemarkIconX
	}
	return Default_StyleAttributeProto_PlacemarkIconX
}

func (m *StyleAttributeProto) GetPlacemarkIconY() int32 {
	if m != nil && m.PlacemarkIconY != nil {
		return *m.PlacemarkIconY
	}
	return Default_StyleAttributeProto_PlacemarkIconY
}

func (m *StyleAttributeProto) GetPlacemarkIconWidth() int32 {
	if m != nil && m.PlacemarkIconWidth != nil {
		return *m.PlacemarkIconWidth
	}
	return Default_StyleAttributeProto_PlacemarkIconWidth
}

func (m *StyleAttributeProto) GetPlacemarkIconHeight() int32 {
	if m != nil && m.PlacemarkIconHeight != nil {
		return *m.PlacemarkIconHeight
	}
	return Default_StyleAttributeProto_PlacemarkIconHeight
}

func (m *StyleAttributeProto) GetPopUp() *PopUpProto {
	if m != nil {
		return m.PopUp
	}
	return nil
}

func (m *StyleAttributeProto) GetDrawFlag() []*DrawFlagProto {
	if m != nil {
		return m.DrawFlag
	}
	return nil
}

// Each fusion packet for layers has a mapping id number(s) baked into it that
// reference the style map postamble in the dbroot. Each style map block
// specifies pointers to two style attribute specifications that are used in
// rendering the fusion packet. One for 'Normal' view (no mouse over) and
// one for 'Highlight' view (mouse over). For non-point features, the normal
// and highlight style maps point to the same style specification.
//
// It is expected and even encouraged to use the same style attribute
// specification ids across multiple style maps when they are exactly the same
// as this helps shrink the size of the dbroot and improves parsing speed in
// the client.
//
// Example non-point layer: <etStyleMap> [20210] { "A"      "A" }
// Meaning: Style map 20210 uses style spec "A" for normal and "A" for
//          highlight.
// NOTE: For non-point layers only fill one style_attribute message as
// normal. The writer will automatically fill in the style map for the
// highlight style with the same style id as used for normal.
//
// Example point layer: <etStyleMap> [20210] { "A"      "B" }
// Meaning: Style map 20210 uses style spec "A" for normal and "B" for
//          highlight.
type StyleMapProto struct {
	StyleMapId *int32 `protobuf:"varint,1,req,name=style_map_id,json=styleMapId" json:"style_map_id,omitempty"`
	// Specifies which layers this style map is referenced in.
	// If not provided, one can always inspect all layers to find which ones
	// reference this style map.
	ChannelId []int32 `protobuf:"varint,2,rep,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// Styles are associated with their corresponding layer.
	// If provided, the value is an index into the array of styles.
	NormalStyleAttribute    *int32   `protobuf:"varint,3,opt,name=normal_style_attribute,json=normalStyleAttribute" json:"normal_style_attribute,omitempty"`
	HighlightStyleAttribute *int32   `protobuf:"varint,4,opt,name=highlight_style_attribute,json=highlightStyleAttribute" json:"highlight_style_attribute,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *StyleMapProto) Reset()         { *m = StyleMapProto{} }
func (m *StyleMapProto) String() string { return proto.CompactTextString(m) }
func (*StyleMapProto) ProtoMessage()    {}
func (*StyleMapProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{6}
}
func (m *StyleMapProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StyleMapProto.Unmarshal(m, b)
}
func (m *StyleMapProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StyleMapProto.Marshal(b, m, deterministic)
}
func (dst *StyleMapProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StyleMapProto.Merge(dst, src)
}
func (m *StyleMapProto) XXX_Size() int {
	return xxx_messageInfo_StyleMapProto.Size(m)
}
func (m *StyleMapProto) XXX_DiscardUnknown() {
	xxx_messageInfo_StyleMapProto.DiscardUnknown(m)
}

var xxx_messageInfo_StyleMapProto proto.InternalMessageInfo

func (m *StyleMapProto) GetStyleMapId() int32 {
	if m != nil && m.StyleMapId != nil {
		return *m.StyleMapId
	}
	return 0
}

func (m *StyleMapProto) GetChannelId() []int32 {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *StyleMapProto) GetNormalStyleAttribute() int32 {
	if m != nil && m.NormalStyleAttribute != nil {
		return *m.NormalStyleAttribute
	}
	return 0
}

func (m *StyleMapProto) GetHighlightStyleAttribute() int32 {
	if m != nil && m.HighlightStyleAttribute != nil {
		return *m.HighlightStyleAttribute
	}
	return 0
}

// Specifies a range of zoom levels that a style rule will be visible for.
type ZoomRangeProto struct {
	MinZoom              *int32   `protobuf:"varint,1,req,name=min_zoom,json=minZoom" json:"min_zoom,omitempty"`
	MaxZoom              *int32   `protobuf:"varint,2,req,name=max_zoom,json=maxZoom" json:"max_zoom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZoomRangeProto) Reset()         { *m = ZoomRangeProto{} }
func (m *ZoomRangeProto) String() string { return proto.CompactTextString(m) }
func (*ZoomRangeProto) ProtoMessage()    {}
func (*ZoomRangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{7}
}
func (m *ZoomRangeProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZoomRangeProto.Unmarshal(m, b)
}
func (m *ZoomRangeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZoomRangeProto.Marshal(b, m, deterministic)
}
func (dst *ZoomRangeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoomRangeProto.Merge(dst, src)
}
func (m *ZoomRangeProto) XXX_Size() int {
	return xxx_messageInfo_ZoomRangeProto.Size(m)
}
func (m *ZoomRangeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoomRangeProto.DiscardUnknown(m)
}

var xxx_messageInfo_ZoomRangeProto proto.InternalMessageInfo

func (m *ZoomRangeProto) GetMinZoom() int32 {
	if m != nil && m.MinZoom != nil {
		return *m.MinZoom
	}
	return 0
}

func (m *ZoomRangeProto) GetMaxZoom() int32 {
	if m != nil && m.MaxZoom != nil {
		return *m.MaxZoom
	}
	return 0
}

// Draw flags are used to control cartographic styling. For example, a polygon
// layer with flag TYPE_FULL_ONLY would only display the outlines of the
// polygon.
type DrawFlagProto struct {
	DrawFlagType         *DrawFlagProto_DrawFlagType `protobuf:"varint,1,req,name=draw_flag_type,json=drawFlagType,enum=keyhole.dbroot.DrawFlagProto_DrawFlagType" json:"draw_flag_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DrawFlagProto) Reset()         { *m = DrawFlagProto{} }
func (m *DrawFlagProto) String() string { return proto.CompactTextString(m) }
func (*DrawFlagProto) ProtoMessage()    {}
func (*DrawFlagProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{8}
}
func (m *DrawFlagProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrawFlagProto.Unmarshal(m, b)
}
func (m *DrawFlagProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrawFlagProto.Marshal(b, m, deterministic)
}
func (dst *DrawFlagProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrawFlagProto.Merge(dst, src)
}
func (m *DrawFlagProto) XXX_Size() int {
	return xxx_messageInfo_DrawFlagProto.Size(m)
}
func (m *DrawFlagProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DrawFlagProto.DiscardUnknown(m)
}

var xxx_messageInfo_DrawFlagProto proto.InternalMessageInfo

func (m *DrawFlagProto) GetDrawFlagType() DrawFlagProto_DrawFlagType {
	if m != nil && m.DrawFlagType != nil {
		return *m.DrawFlagType
	}
	return DrawFlagProto_TYPE_FILL_ONLY
}

// Specific configurations for layers.
type LayerProto struct {
	// Specifies the zoom range(s) that layer styles will be valid for.
	ZoomRange []*ZoomRangeProto `protobuf:"bytes,1,rep,name=zoom_range,json=zoomRange" json:"zoom_range,omitempty"`
	// Controls the zoom level that text labels will be displayed until. For
	// example with roads, it is common to have the line geometry fade out around
	// 18-20 but have the label text continue until level 24.
	PreserveTextLevel *int32 `protobuf:"varint,2,opt,name=preserve_text_level,json=preserveTextLevel,def=30" json:"preserve_text_level,omitempty"`
	// Controls how the client transitions between levels-of-detail (LOD) of this
	// layer.  If lod_begin_transition is true, the client will fade in the layer
	// when at the level that it is first displayed.  If lod_end_transition is
	// true, the client will fade out the layer at the level that it is last
	// displayed.
	LodBeginTransition   *bool    `protobuf:"varint,4,opt,name=lod_begin_transition,json=lodBeginTransition" json:"lod_begin_transition,omitempty"`
	LodEndTransition     *bool    `protobuf:"varint,5,opt,name=lod_end_transition,json=lodEndTransition" json:"lod_end_transition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LayerProto) Reset()         { *m = LayerProto{} }
func (m *LayerProto) String() string { return proto.CompactTextString(m) }
func (*LayerProto) ProtoMessage()    {}
func (*LayerProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{9}
}
func (m *LayerProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LayerProto.Unmarshal(m, b)
}
func (m *LayerProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LayerProto.Marshal(b, m, deterministic)
}
func (dst *LayerProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LayerProto.Merge(dst, src)
}
func (m *LayerProto) XXX_Size() int {
	return xxx_messageInfo_LayerProto.Size(m)
}
func (m *LayerProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LayerProto.DiscardUnknown(m)
}

var xxx_messageInfo_LayerProto proto.InternalMessageInfo

const Default_LayerProto_PreserveTextLevel int32 = 30

func (m *LayerProto) GetZoomRange() []*ZoomRangeProto {
	if m != nil {
		return m.ZoomRange
	}
	return nil
}

func (m *LayerProto) GetPreserveTextLevel() int32 {
	if m != nil && m.PreserveTextLevel != nil {
		return *m.PreserveTextLevel
	}
	return Default_LayerProto_PreserveTextLevel
}

func (m *LayerProto) GetLodBeginTransition() bool {
	if m != nil && m.LodBeginTransition != nil {
		return *m.LodBeginTransition
	}
	return false
}

func (m *LayerProto) GetLodEndTransition() bool {
	if m != nil && m.LodEndTransition != nil {
		return *m.LodEndTransition
	}
	return false
}

// Specific configuration options for folders.
type FolderProto struct {
	// Controls whether the tree view of child folders or layers is visible.
	IsExpandable         *bool    `protobuf:"varint,1,opt,name=is_expandable,json=isExpandable,def=1" json:"is_expandable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FolderProto) Reset()         { *m = FolderProto{} }
func (m *FolderProto) String() string { return proto.CompactTextString(m) }
func (*FolderProto) ProtoMessage()    {}
func (*FolderProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{10}
}
func (m *FolderProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FolderProto.Unmarshal(m, b)
}
func (m *FolderProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FolderProto.Marshal(b, m, deterministic)
}
func (dst *FolderProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolderProto.Merge(dst, src)
}
func (m *FolderProto) XXX_Size() int {
	return xxx_messageInfo_FolderProto.Size(m)
}
func (m *FolderProto) XXX_DiscardUnknown() {
	xxx_messageInfo_FolderProto.DiscardUnknown(m)
}

var xxx_messageInfo_FolderProto proto.InternalMessageInfo

const Default_FolderProto_IsExpandable bool = true

func (m *FolderProto) GetIsExpandable() bool {
	if m != nil && m.IsExpandable != nil {
		return *m.IsExpandable
	}
	return Default_FolderProto_IsExpandable
}

// Requirements are configurations available for NestedFeatures that do not
// exist in all client versions. They are all optional and provide additional
// control over how and when layers are displayed.
type RequirementProto struct {
	// Allows limiting display of a nested feature to computers with a specified
	// vram threshold or above.
	// Example: 64-127
	// Meaning: Show iff 64 to 127MB of VRAM.
	// Version support: 4.0.2292 +
	RequiredVram *string `protobuf:"bytes,3,opt,name=required_vram,json=requiredVram" json:"required_vram,omitempty"`
	// Allows limiting display of a nested feature to those with a client version
	// at or above the value specified.
	// Example: -4.0.2291
	// Meaning: Exclude if 4.0.2292 or later.
	// Version support: 4.0.2292 +
	RequiredClientVer *string `protobuf:"bytes,4,opt,name=required_client_ver,json=requiredClientVer" json:"required_client_ver,omitempty"`
	// Probability of being shown (preserved across sessions).
	// Example: Layers: A with "-20" and B with "10-100"
	// Meaning: 10% get A, 10% get A+B, 80% get B)
	// Version support: 4.0.2292 +
	Probability *string `protobuf:"bytes,5,opt,name=probability" json:"probability,omitempty"`
	// Limit by anything in user agent.
	// Example: (Windows|Mac)
	// Meaning: PC & Mac but not Linux Excluded if RegExp is non-empty and match
	//          fails.
	// Version support: 4.0.2292 +
	RequiredUserAgent *string `protobuf:"bytes,6,opt,name=required_user_agent,json=requiredUserAgent" json:"required_user_agent,omitempty"`
	// Limit by client capability
	// TODO: update the example.
	// Example: Not used in production yet, but something like 'supports Flash'.
	// Version support: 4.3 +.
	RequiredClientCapabilities *string  `protobuf:"bytes,7,opt,name=required_client_capabilities,json=requiredClientCapabilities" json:"required_client_capabilities,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *RequirementProto) Reset()         { *m = RequirementProto{} }
func (m *RequirementProto) String() string { return proto.CompactTextString(m) }
func (*RequirementProto) ProtoMessage()    {}
func (*RequirementProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{11}
}
func (m *RequirementProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequirementProto.Unmarshal(m, b)
}
func (m *RequirementProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequirementProto.Marshal(b, m, deterministic)
}
func (dst *RequirementProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequirementProto.Merge(dst, src)
}
func (m *RequirementProto) XXX_Size() int {
	return xxx_messageInfo_RequirementProto.Size(m)
}
func (m *RequirementProto) XXX_DiscardUnknown() {
	xxx_messageInfo_RequirementProto.DiscardUnknown(m)
}

var xxx_messageInfo_RequirementProto proto.InternalMessageInfo

func (m *RequirementProto) GetRequiredVram() string {
	if m != nil && m.RequiredVram != nil {
		return *m.RequiredVram
	}
	return ""
}

func (m *RequirementProto) GetRequiredClientVer() string {
	if m != nil && m.RequiredClientVer != nil {
		return *m.RequiredClientVer
	}
	return ""
}

func (m *RequirementProto) GetProbability() string {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return ""
}

func (m *RequirementProto) GetRequiredUserAgent() string {
	if m != nil && m.RequiredUserAgent != nil {
		return *m.RequiredUserAgent
	}
	return ""
}

func (m *RequirementProto) GetRequiredClientCapabilities() string {
	if m != nil && m.RequiredClientCapabilities != nil {
		return *m.RequiredClientCapabilities
	}
	return ""
}

// Message that defines a view (i.e. position and orientation of camera) of
// the planet.
// For more detailed documentation see:
// http://code.google.com/apis/kml/documentation/kml_tags_21.html#lookat
// NOTE: This does not support tags for altitudeMode or altitude.
type LookAtProto struct {
	Longitude            *float32 `protobuf:"fixed32,1,req,name=longitude" json:"longitude,omitempty"`
	Latitude             *float32 `protobuf:"fixed32,2,req,name=latitude" json:"latitude,omitempty"`
	Range                *float32 `protobuf:"fixed32,3,opt,name=range" json:"range,omitempty"`
	Tilt                 *float32 `protobuf:"fixed32,4,opt,name=tilt" json:"tilt,omitempty"`
	Heading              *float32 `protobuf:"fixed32,5,opt,name=heading" json:"heading,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookAtProto) Reset()         { *m = LookAtProto{} }
func (m *LookAtProto) String() string { return proto.CompactTextString(m) }
func (*LookAtProto) ProtoMessage()    {}
func (*LookAtProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{12}
}
func (m *LookAtProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookAtProto.Unmarshal(m, b)
}
func (m *LookAtProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookAtProto.Marshal(b, m, deterministic)
}
func (dst *LookAtProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookAtProto.Merge(dst, src)
}
func (m *LookAtProto) XXX_Size() int {
	return xxx_messageInfo_LookAtProto.Size(m)
}
func (m *LookAtProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LookAtProto.DiscardUnknown(m)
}

var xxx_messageInfo_LookAtProto proto.InternalMessageInfo

func (m *LookAtProto) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *LookAtProto) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *LookAtProto) GetRange() float32 {
	if m != nil && m.Range != nil {
		return *m.Range
	}
	return 0
}

func (m *LookAtProto) GetTilt() float32 {
	if m != nil && m.Tilt != nil {
		return *m.Tilt
	}
	return 0
}

func (m *LookAtProto) GetHeading() float32 {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return 0
}

// A nested feature is an entity in the layer menu tree. The feature may
// be either a folder (think container for more child features) or a layer
// (a layer is a vector data layer that displays points, lines, or polygons).
// Next available id: 22
type NestedFeatureProto struct {
	FeatureType *NestedFeatureProto_FeatureType `protobuf:"varint,1,opt,name=feature_type,json=featureType,enum=keyhole.dbroot.NestedFeatureProto_FeatureType" json:"feature_type,omitempty"`
	// URL of KML layer, if present.
	// Version support: GE 4.0.2292+, GE5
	KmlUrl *StringIdOrValueProto `protobuf:"bytes,2,opt,name=kml_url,json=kmlUrl" json:"kml_url,omitempty"`
	// If this url appears, it means this object is referring to a secondary
	// database that should be added.
	DatabaseUrl *string `protobuf:"bytes,21,opt,name=database_url,json=databaseUrl" json:"database_url,omitempty"`
	// Data members only used for layers.
	Layer *LayerProto `protobuf:"bytes,3,opt,name=layer" json:"layer,omitempty"`
	// Data members only used in containers of other features. This has no effect
	// if the layer has no children.
	Folder *FolderProto `protobuf:"bytes,4,opt,name=folder" json:"folder,omitempty"`
	// Additional, optional specifications to extend layers and folders.
	Requirement *RequirementProto `protobuf:"bytes,5,opt,name=requirement" json:"requirement,omitempty"`
	// Each nested feature must have its own unique identifier number. This
	// identifier is used in several places in the quadtree packets and fusion
	// packets to link the fusion packet to a given style specification for
	// example.
	ChannelId *int32 `protobuf:"varint,6,req,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// Name of the nested feature, either as a string ID or actual value.
	// Names that must be translated should probably use string IDs so this
	// part of the protocol buffer is the same across all languages.
	DisplayName *StringIdOrValueProto `protobuf:"bytes,7,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Controls whether the nested feature can be seen or not in the layer panel
	// menu. Visibility is inherited from parents too (all parents in the
	// hierarchy must be visible for a layer to be visible).
	IsVisible *bool `protobuf:"varint,8,opt,name=is_visible,json=isVisible,def=1" json:"is_visible,omitempty"`
	// Controls whether the nested feature is turned on by default when the
	// client starts up.
	IsEnabled *bool `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled,def=1" json:"is_enabled,omitempty"`
	// Does the feature have a 'check' in the layer menu panel.
	IsChecked *bool `protobuf:"varint,10,opt,name=is_checked,json=isChecked,def=0" json:"is_checked,omitempty"`
	// Path of image that will be displayed in the layer menu panel. These must
	// be 16x16 8-bit/color RGBA, non-interlaced png images.
	LayerMenuIconPath *string `protobuf:"bytes,11,opt,name=layer_menu_icon_path,json=layerMenuIconPath,def=icons/773_l.png" json:"layer_menu_icon_path,omitempty"`
	// Human readable description string of the layer.
	Description *StringIdOrValueProto `protobuf:"bytes,12,opt,name=description" json:"description,omitempty"`
	// Default view for that layer. In Google Earth, double-clicking on that layer
	// flies to the default view of the layer if it is specified. Layers with no
	// default view cannot be "flown to".
	LookAt *LookAtProto `protobuf:"bytes,13,opt,name=look_at,json=lookAt" json:"look_at,omitempty"`
	// The asset UUID is used by the Earth Plugin to provide a unique identifier
	// that exposes the different layers via a JavaScript API.
	// This string must be unique across *all* layers in the entire dbroot
	// hierarchy.
	AssetUuid *string `protobuf:"bytes,15,opt,name=asset_uuid,json=assetUuid" json:"asset_uuid,omitempty"`
	// The save_locked field controls whether or not a placemark can be right-
	// clicked and saved out to My Places.
	// Note: Clients < 4.3 did not accurately use this feature, so everything was
	// set to 'true'.
	IsSaveLocked *bool                 `protobuf:"varint,16,opt,name=is_save_locked,json=isSaveLocked,def=1" json:"is_save_locked,omitempty"`
	Children     []*NestedFeatureProto `protobuf:"bytes,17,rep,name=children" json:"children,omitempty"`
	// Reference to client configuration script which is applied to every layer.
	// This allows some layers to be turned off on certain clients based on
	// decisions that must be made at runtime. The client is responsible for
	// parsing and applying the script.
	ClientConfigScriptName *string `protobuf:"bytes,18,opt,name=client_config_script_name,json=clientConfigScriptName" json:"client_config_script_name,omitempty"`
	// This field is used only for Diorama layers, which may contain multiple
	// data packets per tile for a single <etNestedLayer> entry in the dbroot.
	// When this field is set to a positive integer, the client will fetch this
	// layer's packets along with Diorama metadata indicating the number of
	// packets per tile. For each packet i between 0 and number of packets per
	// tile, the client will fetch data for layer diorama_data_channel_base + i;
	// however, these layers do not appear in the dbroot.
	DioramaDataChannelBase *int32 `protobuf:"varint,19,opt,name=diorama_data_channel_base,json=dioramaDataChannelBase,def=-1" json:"diorama_data_channel_base,omitempty"`
	// This field is used only for 3D replica data (e.g. Trees) and uses the
	// same mechanism as described in the diorama_data_channel_base field above.
	ReplicaDataChannelBase *int32   `protobuf:"varint,20,opt,name=replica_data_channel_base,json=replicaDataChannelBase,def=-1" json:"replica_data_channel_base,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *NestedFeatureProto) Reset()         { *m = NestedFeatureProto{} }
func (m *NestedFeatureProto) String() string { return proto.CompactTextString(m) }
func (*NestedFeatureProto) ProtoMessage()    {}
func (*NestedFeatureProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{13}
}
func (m *NestedFeatureProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedFeatureProto.Unmarshal(m, b)
}
func (m *NestedFeatureProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedFeatureProto.Marshal(b, m, deterministic)
}
func (dst *NestedFeatureProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedFeatureProto.Merge(dst, src)
}
func (m *NestedFeatureProto) XXX_Size() int {
	return xxx_messageInfo_NestedFeatureProto.Size(m)
}
func (m *NestedFeatureProto) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedFeatureProto.DiscardUnknown(m)
}

var xxx_messageInfo_NestedFeatureProto proto.InternalMessageInfo

const Default_NestedFeatureProto_IsVisible bool = true
const Default_NestedFeatureProto_IsEnabled bool = true
const Default_NestedFeatureProto_IsChecked bool = false
const Default_NestedFeatureProto_LayerMenuIconPath string = "icons/773_l.png"
const Default_NestedFeatureProto_IsSaveLocked bool = true
const Default_NestedFeatureProto_DioramaDataChannelBase int32 = -1
const Default_NestedFeatureProto_ReplicaDataChannelBase int32 = -1

func (m *NestedFeatureProto) GetFeatureType() NestedFeatureProto_FeatureType {
	if m != nil && m.FeatureType != nil {
		return *m.FeatureType
	}
	return NestedFeatureProto_TYPE_POINT_Z
}

func (m *NestedFeatureProto) GetKmlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.KmlUrl
	}
	return nil
}

func (m *NestedFeatureProto) GetDatabaseUrl() string {
	if m != nil && m.DatabaseUrl != nil {
		return *m.DatabaseUrl
	}
	return ""
}

func (m *NestedFeatureProto) GetLayer() *LayerProto {
	if m != nil {
		return m.Layer
	}
	return nil
}

func (m *NestedFeatureProto) GetFolder() *FolderProto {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *NestedFeatureProto) GetRequirement() *RequirementProto {
	if m != nil {
		return m.Requirement
	}
	return nil
}

func (m *NestedFeatureProto) GetChannelId() int32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *NestedFeatureProto) GetDisplayName() *StringIdOrValueProto {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

func (m *NestedFeatureProto) GetIsVisible() bool {
	if m != nil && m.IsVisible != nil {
		return *m.IsVisible
	}
	return Default_NestedFeatureProto_IsVisible
}

func (m *NestedFeatureProto) GetIsEnabled() bool {
	if m != nil && m.IsEnabled != nil {
		return *m.IsEnabled
	}
	return Default_NestedFeatureProto_IsEnabled
}

func (m *NestedFeatureProto) GetIsChecked() bool {
	if m != nil && m.IsChecked != nil {
		return *m.IsChecked
	}
	return Default_NestedFeatureProto_IsChecked
}

func (m *NestedFeatureProto) GetLayerMenuIconPath() string {
	if m != nil && m.LayerMenuIconPath != nil {
		return *m.LayerMenuIconPath
	}
	return Default_NestedFeatureProto_LayerMenuIconPath
}

func (m *NestedFeatureProto) GetDescription() *StringIdOrValueProto {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *NestedFeatureProto) GetLookAt() *LookAtProto {
	if m != nil {
		return m.LookAt
	}
	return nil
}

func (m *NestedFeatureProto) GetAssetUuid() string {
	if m != nil && m.AssetUuid != nil {
		return *m.AssetUuid
	}
	return ""
}

func (m *NestedFeatureProto) GetIsSaveLocked() bool {
	if m != nil && m.IsSaveLocked != nil {
		return *m.IsSaveLocked
	}
	return Default_NestedFeatureProto_IsSaveLocked
}

func (m *NestedFeatureProto) GetChildren() []*NestedFeatureProto {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *NestedFeatureProto) GetClientConfigScriptName() string {
	if m != nil && m.ClientConfigScriptName != nil {
		return *m.ClientConfigScriptName
	}
	return ""
}

func (m *NestedFeatureProto) GetDioramaDataChannelBase() int32 {
	if m != nil && m.DioramaDataChannelBase != nil {
		return *m.DioramaDataChannelBase
	}
	return Default_NestedFeatureProto_DioramaDataChannelBase
}

func (m *NestedFeatureProto) GetReplicaDataChannelBase() int32 {
	if m != nil && m.ReplicaDataChannelBase != nil {
		return *m.ReplicaDataChannelBase
	}
	return Default_NestedFeatureProto_ReplicaDataChannelBase
}

// Deprecated in Earth 6.2 and higher in favor of search_config.
type MfeDomainFeaturesProto struct {
	// 2-character country code for which these values apply
	CountryCode *string `protobuf:"bytes,1,req,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// domain name to use for requests - e.g. maps.google.com (default
	// protocol is http, default port is 80). If a full URL is specified,
	// it will override the default maps url. Otherwise, if just a host is
	// specified (as usual), the port, path and protocol of the default maps URL
	// will be used to build the URL for this country.
	DomainName *string `protobuf:"bytes,2,req,name=domain_name,json=domainName" json:"domain_name,omitempty"`
	// List of all available features. Duplicate entries are ignored.
	SupportedFeatures    []MfeDomainFeaturesProto_SupportedFeature `protobuf:"varint,3,rep,name=supported_features,json=supportedFeatures,enum=keyhole.dbroot.MfeDomainFeaturesProto_SupportedFeature" json:"supported_features,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *MfeDomainFeaturesProto) Reset()         { *m = MfeDomainFeaturesProto{} }
func (m *MfeDomainFeaturesProto) String() string { return proto.CompactTextString(m) }
func (*MfeDomainFeaturesProto) ProtoMessage()    {}
func (*MfeDomainFeaturesProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{14}
}
func (m *MfeDomainFeaturesProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MfeDomainFeaturesProto.Unmarshal(m, b)
}
func (m *MfeDomainFeaturesProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MfeDomainFeaturesProto.Marshal(b, m, deterministic)
}
func (dst *MfeDomainFeaturesProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MfeDomainFeaturesProto.Merge(dst, src)
}
func (m *MfeDomainFeaturesProto) XXX_Size() int {
	return xxx_messageInfo_MfeDomainFeaturesProto.Size(m)
}
func (m *MfeDomainFeaturesProto) XXX_DiscardUnknown() {
	xxx_messageInfo_MfeDomainFeaturesProto.DiscardUnknown(m)
}

var xxx_messageInfo_MfeDomainFeaturesProto proto.InternalMessageInfo

func (m *MfeDomainFeaturesProto) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *MfeDomainFeaturesProto) GetDomainName() string {
	if m != nil && m.DomainName != nil {
		return *m.DomainName
	}
	return ""
}

func (m *MfeDomainFeaturesProto) GetSupportedFeatures() []MfeDomainFeaturesProto_SupportedFeature {
	if m != nil {
		return m.SupportedFeatures
	}
	return nil
}

// Collection of various client features that can be enabled or disabled. Some
// of these options are not really tied to the database.
type ClientOptionsProto struct {
	// If true, no data will be cached on disk for this database. It will not
	// be accessible offline.
	DisableDiskCache *bool `protobuf:"varint,1,opt,name=disable_disk_cache,json=disableDiskCache" json:"disable_disk_cache,omitempty"`
	// If true, disables the embedded browser feature from Earth 5.1 and earlier
	// when running on Vista or Windows 7.  This setting is deprecated, since it
	// applies only to older clients that do not parse dbroot_proto anyway.
	DisableEmbeddedBrowserVista *bool `protobuf:"varint,2,opt,name=disable_embedded_browser_vista,json=disableEmbeddedBrowserVista" json:"disable_embedded_browser_vista,omitempty"`
	// Used to enable or disable the atmosphere. You may want to disable the
	// atmosphere on the Moon, for instance.
	DrawAtmosphere *bool `protobuf:"varint,3,opt,name=draw_atmosphere,json=drawAtmosphere,def=1" json:"draw_atmosphere,omitempty"`
	// Used to enable drawing stars around the planet.
	DrawStars *bool `protobuf:"varint,4,opt,name=draw_stars,json=drawStars,def=1" json:"draw_stars,omitempty"`
	// Specifies the prefix to use for the names of the shader files.
	ShaderFilePrefix *string `protobuf:"bytes,5,opt,name=shader_file_prefix,json=shaderFilePrefix" json:"shader_file_prefix,omitempty"`
	// If set to true, this database uses protocol buffer quadtree packets.
	UseProtobufQuadtreePackets *bool `protobuf:"varint,6,opt,name=use_protobuf_quadtree_packets,json=useProtobufQuadtreePackets" json:"use_protobuf_quadtree_packets,omitempty"`
	// If true, this database uses large copyright IDs (allows copyright ids
	// larger than 255).
	UseExtendedCopyrightIds *bool                                     `protobuf:"varint,7,opt,name=use_extended_copyright_ids,json=useExtendedCopyrightIds,def=1" json:"use_extended_copyright_ids,omitempty"`
	PrecipitationsOptions   *ClientOptionsProto_PrecipitationsOptions `protobuf:"bytes,8,opt,name=precipitations_options,json=precipitationsOptions" json:"precipitations_options,omitempty"`
	CaptureOptions          *ClientOptionsProto_CaptureOptions        `protobuf:"bytes,9,opt,name=capture_options,json=captureOptions" json:"capture_options,omitempty"`
	// Controls whether or not the "Show in maps button" should be shown. On by
	// default, typically set to false for EC databases.
	Show_2DMapsIcon *bool `protobuf:"varint,10,opt,name=show_2d_maps_icon,json=show2dMapsIcon,def=1" json:"show_2d_maps_icon,omitempty"`
	// If true, disables the internal browser feature for Earth 5.2 and later.
	DisableInternalBrowser *bool `protobuf:"varint,11,opt,name=disable_internal_browser,json=disableInternalBrowser" json:"disable_internal_browser,omitempty"`
	// A whitespace-separated list of globbing patterns (using the * and ?
	// wildcards) specifying URLs that are explicitly not allowed to open in the
	// internal browser in Earth 5.2 and later.
	InternalBrowserBlacklist *string `protobuf:"bytes,12,opt,name=internal_browser_blacklist,json=internalBrowserBlacklist" json:"internal_browser_blacklist,omitempty"`
	// A whitespace-separated list of globbing patterns (using the * and ?
	// wildcards) specifying URLs of origins for which KML content may open
	// non-blacklisted links in the internal browser in Earth 5.2 and later.
	// An "origin" refers to the path of the KML or KMZ file that contains the
	// feature description that has the link in it.  The origin of a streamed
	// layer is the URL at which it resides on its database server.
	InternalBrowserOriginWhitelist *string `protobuf:"bytes,13,opt,name=internal_browser_origin_whitelist,json=internalBrowserOriginWhitelist,def=*" json:"internal_browser_origin_whitelist,omitempty"`
	// Indicates whether the database supports merged polar image tiles,
	// and if so at what zoom level the merging begins.  Values around 3
	// are typical.  A value of zero or no value indicates that the
	// database does not offer merged polar tiles.
	PolarTileMergingLevel *int32 `protobuf:"varint,14,opt,name=polar_tile_merging_level,json=polarTileMergingLevel" json:"polar_tile_merging_level,omitempty"`
	// A whitespace-separated list of globbing patterns (using the * and ?
	// wildcards) specifying URLs of origins from which the JavaScript bridge
	// may make cross-domain requests on behalf of web content.  This should be
	// set to an empty string for Fusion dbroots, and only Google domains should
	// be whitelisted for the consumer clients.
	JsBridgeRequestWhitelist *string                         `protobuf:"bytes,15,opt,name=js_bridge_request_whitelist,json=jsBridgeRequestWhitelist,def=http://*.google.com/*" json:"js_bridge_request_whitelist,omitempty"`
	MapsOptions              *ClientOptionsProto_MapsOptions `protobuf:"bytes,16,opt,name=maps_options,json=mapsOptions" json:"maps_options,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                        `json:"-"`
	XXX_unrecognized         []byte                          `json:"-"`
	XXX_sizecache            int32                           `json:"-"`
}

func (m *ClientOptionsProto) Reset()         { *m = ClientOptionsProto{} }
func (m *ClientOptionsProto) String() string { return proto.CompactTextString(m) }
func (*ClientOptionsProto) ProtoMessage()    {}
func (*ClientOptionsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{15}
}
func (m *ClientOptionsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientOptionsProto.Unmarshal(m, b)
}
func (m *ClientOptionsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientOptionsProto.Marshal(b, m, deterministic)
}
func (dst *ClientOptionsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientOptionsProto.Merge(dst, src)
}
func (m *ClientOptionsProto) XXX_Size() int {
	return xxx_messageInfo_ClientOptionsProto.Size(m)
}
func (m *ClientOptionsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientOptionsProto.DiscardUnknown(m)
}

var xxx_messageInfo_ClientOptionsProto proto.InternalMessageInfo

const Default_ClientOptionsProto_DrawAtmosphere bool = true
const Default_ClientOptionsProto_DrawStars bool = true
const Default_ClientOptionsProto_UseExtendedCopyrightIds bool = true
const Default_ClientOptionsProto_Show_2DMapsIcon bool = true
const Default_ClientOptionsProto_InternalBrowserOriginWhitelist string = "*"
const Default_ClientOptionsProto_JsBridgeRequestWhitelist string = "http://*.google.com/*"

func (m *ClientOptionsProto) GetDisableDiskCache() bool {
	if m != nil && m.DisableDiskCache != nil {
		return *m.DisableDiskCache
	}
	return false
}

func (m *ClientOptionsProto) GetDisableEmbeddedBrowserVista() bool {
	if m != nil && m.DisableEmbeddedBrowserVista != nil {
		return *m.DisableEmbeddedBrowserVista
	}
	return false
}

func (m *ClientOptionsProto) GetDrawAtmosphere() bool {
	if m != nil && m.DrawAtmosphere != nil {
		return *m.DrawAtmosphere
	}
	return Default_ClientOptionsProto_DrawAtmosphere
}

func (m *ClientOptionsProto) GetDrawStars() bool {
	if m != nil && m.DrawStars != nil {
		return *m.DrawStars
	}
	return Default_ClientOptionsProto_DrawStars
}

func (m *ClientOptionsProto) GetShaderFilePrefix() string {
	if m != nil && m.ShaderFilePrefix != nil {
		return *m.ShaderFilePrefix
	}
	return ""
}

func (m *ClientOptionsProto) GetUseProtobufQuadtreePackets() bool {
	if m != nil && m.UseProtobufQuadtreePackets != nil {
		return *m.UseProtobufQuadtreePackets
	}
	return false
}

func (m *ClientOptionsProto) GetUseExtendedCopyrightIds() bool {
	if m != nil && m.UseExtendedCopyrightIds != nil {
		return *m.UseExtendedCopyrightIds
	}
	return Default_ClientOptionsProto_UseExtendedCopyrightIds
}

func (m *ClientOptionsProto) GetPrecipitationsOptions() *ClientOptionsProto_PrecipitationsOptions {
	if m != nil {
		return m.PrecipitationsOptions
	}
	return nil
}

func (m *ClientOptionsProto) GetCaptureOptions() *ClientOptionsProto_CaptureOptions {
	if m != nil {
		return m.CaptureOptions
	}
	return nil
}

func (m *ClientOptionsProto) GetShow_2DMapsIcon() bool {
	if m != nil && m.Show_2DMapsIcon != nil {
		return *m.Show_2DMapsIcon
	}
	return Default_ClientOptionsProto_Show_2DMapsIcon
}

func (m *ClientOptionsProto) GetDisableInternalBrowser() bool {
	if m != nil && m.DisableInternalBrowser != nil {
		return *m.DisableInternalBrowser
	}
	return false
}

func (m *ClientOptionsProto) GetInternalBrowserBlacklist() string {
	if m != nil && m.InternalBrowserBlacklist != nil {
		return *m.InternalBrowserBlacklist
	}
	return ""
}

func (m *ClientOptionsProto) GetInternalBrowserOriginWhitelist() string {
	if m != nil && m.InternalBrowserOriginWhitelist != nil {
		return *m.InternalBrowserOriginWhitelist
	}
	return Default_ClientOptionsProto_InternalBrowserOriginWhitelist
}

func (m *ClientOptionsProto) GetPolarTileMergingLevel() int32 {
	if m != nil && m.PolarTileMergingLevel != nil {
		return *m.PolarTileMergingLevel
	}
	return 0
}

func (m *ClientOptionsProto) GetJsBridgeRequestWhitelist() string {
	if m != nil && m.JsBridgeRequestWhitelist != nil {
		return *m.JsBridgeRequestWhitelist
	}
	return Default_ClientOptionsProto_JsBridgeRequestWhitelist
}

func (m *ClientOptionsProto) GetMapsOptions() *ClientOptionsProto_MapsOptions {
	if m != nil {
		return m.MapsOptions
	}
	return nil
}

// Nested message to control precipitation feature (rain and snow simulation)
type ClientOptionsProto_PrecipitationsOptions struct {
	// URL for doppler images.
	ImageUrl *string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	// Expiration time in seconds of doppler images.
	ImageExpireTime *int32 `protobuf:"varint,2,opt,name=image_expire_time,json=imageExpireTime,def=900" json:"image_expire_time,omitempty"`
	// Maximum squared distance threshold for choosing an element in the
	// weather mapping.
	// This is to account for small differences in the color tables from
	// different areas (e.g. US vs. Europe). It also accounts for lossy
	// compression artifacts.
	MaxColorDistance *int32 `protobuf:"varint,3,opt,name=max_color_distance,json=maxColorDistance,def=20" json:"max_color_distance,omitempty"`
	// Quadtree (zero-indexed) image level to fetch.
	// Image level 5 corresponds to 6-digit filenames (e.g. 010310.png).
	ImageLevel *int32 `protobuf:"varint,4,opt,name=image_level,json=imageLevel,def=5" json:"image_level,omitempty"`
	// Maps weather map colors to rain/snow/fog/etc.
	WeatherMapping []*ClientOptionsProto_PrecipitationsOptions_WeatherMapping `protobuf:"bytes,5,rep,name=weather_mapping,json=weatherMapping" json:"weather_mapping,omitempty"`
	// Clouds layer URL. This is used to detect whether the clouds layer
	// is enabled.
	CloudsLayerUrl *string `protobuf:"bytes,6,opt,name=clouds_layer_url,json=cloudsLayerUrl" json:"clouds_layer_url,omitempty"`
	// Delay in seconds before animation starts transitioning to a stop after
	// any user os streaming activity.
	AnimationDecelerationDelay *float32 `protobuf:"fixed32,7,opt,name=animation_deceleration_delay,json=animationDecelerationDelay,def=20" json:"animation_deceleration_delay,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *ClientOptionsProto_PrecipitationsOptions) Reset() {
	*m = ClientOptionsProto_PrecipitationsOptions{}
}
func (m *ClientOptionsProto_PrecipitationsOptions) String() string { return proto.CompactTextString(m) }
func (*ClientOptionsProto_PrecipitationsOptions) ProtoMessage()    {}
func (*ClientOptionsProto_PrecipitationsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{15, 0}
}
func (m *ClientOptionsProto_PrecipitationsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions.Unmarshal(m, b)
}
func (m *ClientOptionsProto_PrecipitationsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions.Marshal(b, m, deterministic)
}
func (dst *ClientOptionsProto_PrecipitationsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions.Merge(dst, src)
}
func (m *ClientOptionsProto_PrecipitationsOptions) XXX_Size() int {
	return xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions.Size(m)
}
func (m *ClientOptionsProto_PrecipitationsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions proto.InternalMessageInfo

const Default_ClientOptionsProto_PrecipitationsOptions_ImageExpireTime int32 = 900
const Default_ClientOptionsProto_PrecipitationsOptions_MaxColorDistance int32 = 20
const Default_ClientOptionsProto_PrecipitationsOptions_ImageLevel int32 = 5
const Default_ClientOptionsProto_PrecipitationsOptions_AnimationDecelerationDelay float32 = 20

func (m *ClientOptionsProto_PrecipitationsOptions) GetImageUrl() string {
	if m != nil && m.ImageUrl != nil {
		return *m.ImageUrl
	}
	return ""
}

func (m *ClientOptionsProto_PrecipitationsOptions) GetImageExpireTime() int32 {
	if m != nil && m.ImageExpireTime != nil {
		return *m.ImageExpireTime
	}
	return Default_ClientOptionsProto_PrecipitationsOptions_ImageExpireTime
}

func (m *ClientOptionsProto_PrecipitationsOptions) GetMaxColorDistance() int32 {
	if m != nil && m.MaxColorDistance != nil {
		return *m.MaxColorDistance
	}
	return Default_ClientOptionsProto_PrecipitationsOptions_MaxColorDistance
}

func (m *ClientOptionsProto_PrecipitationsOptions) GetImageLevel() int32 {
	if m != nil && m.ImageLevel != nil {
		return *m.ImageLevel
	}
	return Default_ClientOptionsProto_PrecipitationsOptions_ImageLevel
}

func (m *ClientOptionsProto_PrecipitationsOptions) GetWeatherMapping() []*ClientOptionsProto_PrecipitationsOptions_WeatherMapping {
	if m != nil {
		return m.WeatherMapping
	}
	return nil
}

func (m *ClientOptionsProto_PrecipitationsOptions) GetCloudsLayerUrl() string {
	if m != nil && m.CloudsLayerUrl != nil {
		return *m.CloudsLayerUrl
	}
	return ""
}

func (m *ClientOptionsProto_PrecipitationsOptions) GetAnimationDecelerationDelay() float32 {
	if m != nil && m.AnimationDecelerationDelay != nil {
		return *m.AnimationDecelerationDelay
	}
	return Default_ClientOptionsProto_PrecipitationsOptions_AnimationDecelerationDelay
}

// Describes an entry in the list that maps weather image colors
// to rain/snow/fog/etc.
type ClientOptionsProto_PrecipitationsOptions_WeatherMapping struct {
	// Color that may be found in weather images.
	ColorAbgr *uint32 `protobuf:"varint,1,req,name=color_abgr,json=colorAbgr" json:"color_abgr,omitempty"`
	// No precipitation, raining, or snowing.
	WeatherType *ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType `protobuf:"varint,2,req,name=weather_type,json=weatherType,enum=keyhole.dbroot.ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType" json:"weather_type,omitempty"`
	// How much stretch or compress the rain/snow texture. Smaller
	// (positive) values correspond to longer precipitation.
	Elongation *float32 `protobuf:"fixed32,3,opt,name=elongation,def=1" json:"elongation,omitempty"`
	// Texture's opacity.
	Opacity *float32 `protobuf:"fixed32,4,opt,name=opacity" json:"opacity,omitempty"`
	// Fog's density used in exp2 fog equation.
	FogDensity *float32 `protobuf:"fixed32,5,opt,name=fog_density,json=fogDensity" json:"fog_density,omitempty"`
	// Speed for front-most texture layer.
	Speed0 *float32 `protobuf:"fixed32,6,opt,name=speed0" json:"speed0,omitempty"`
	// Speed for second texture layer.
	Speed1 *float32 `protobuf:"fixed32,7,opt,name=speed1" json:"speed1,omitempty"`
	// Speed for third texture layer.
	Speed2 *float32 `protobuf:"fixed32,8,opt,name=speed2" json:"speed2,omitempty"`
	// Speed for back-most texture layer.
	Speed3               *float32 `protobuf:"fixed32,9,opt,name=speed3" json:"speed3,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) Reset() {
	*m = ClientOptionsProto_PrecipitationsOptions_WeatherMapping{}
}
func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) String() string {
	return proto.CompactTextString(m)
}
func (*ClientOptionsProto_PrecipitationsOptions_WeatherMapping) ProtoMessage() {}
func (*ClientOptionsProto_PrecipitationsOptions_WeatherMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{15, 0, 0}
}
func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions_WeatherMapping.Unmarshal(m, b)
}
func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions_WeatherMapping.Marshal(b, m, deterministic)
}
func (dst *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions_WeatherMapping.Merge(dst, src)
}
func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) XXX_Size() int {
	return xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions_WeatherMapping.Size(m)
}
func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions_WeatherMapping.DiscardUnknown(m)
}

var xxx_messageInfo_ClientOptionsProto_PrecipitationsOptions_WeatherMapping proto.InternalMessageInfo

const Default_ClientOptionsProto_PrecipitationsOptions_WeatherMapping_Elongation float32 = 1

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetColorAbgr() uint32 {
	if m != nil && m.ColorAbgr != nil {
		return *m.ColorAbgr
	}
	return 0
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetWeatherType() ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType {
	if m != nil && m.WeatherType != nil {
		return *m.WeatherType
	}
	return ClientOptionsProto_PrecipitationsOptions_WeatherMapping_NO_PRECIPITATION
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetElongation() float32 {
	if m != nil && m.Elongation != nil {
		return *m.Elongation
	}
	return Default_ClientOptionsProto_PrecipitationsOptions_WeatherMapping_Elongation
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetOpacity() float32 {
	if m != nil && m.Opacity != nil {
		return *m.Opacity
	}
	return 0
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetFogDensity() float32 {
	if m != nil && m.FogDensity != nil {
		return *m.FogDensity
	}
	return 0
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetSpeed0() float32 {
	if m != nil && m.Speed0 != nil {
		return *m.Speed0
	}
	return 0
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetSpeed1() float32 {
	if m != nil && m.Speed1 != nil {
		return *m.Speed1
	}
	return 0
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetSpeed2() float32 {
	if m != nil && m.Speed2 != nil {
		return *m.Speed2
	}
	return 0
}

func (m *ClientOptionsProto_PrecipitationsOptions_WeatherMapping) GetSpeed3() float32 {
	if m != nil && m.Speed3 != nil {
		return *m.Speed3
	}
	return 0
}

// Nested message to control printing / image saving capability on main
// database. The default values match the client's default values in all
// versions up to the 5.0.1 maintenance release.
type ClientOptionsProto_CaptureOptions struct {
	// Can enable or disable saving a screenshot as a JPG image.
	AllowSaveAsImage *bool `protobuf:"varint,1,opt,name=allow_save_as_image,json=allowSaveAsImage,def=1" json:"allow_save_as_image,omitempty"`
	// Specifies the maximum capture resolution (in largest dimension) in the
	// free client. The best image that can be captured will be
	// max_free_capture_res * max_free_capture_res.
	MaxFreeCaptureRes *int32 `protobuf:"varint,2,opt,name=max_free_capture_res,json=maxFreeCaptureRes,def=2400" json:"max_free_capture_res,omitempty"`
	// Similar max limit for Pro/EC clients for premium printing. This limit
	// should be higher than the max free capture resolution for obvious
	// reasons.
	MaxPremiumCaptureRes *int32   `protobuf:"varint,3,opt,name=max_premium_capture_res,json=maxPremiumCaptureRes,def=4800" json:"max_premium_capture_res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientOptionsProto_CaptureOptions) Reset()         { *m = ClientOptionsProto_CaptureOptions{} }
func (m *ClientOptionsProto_CaptureOptions) String() string { return proto.CompactTextString(m) }
func (*ClientOptionsProto_CaptureOptions) ProtoMessage()    {}
func (*ClientOptionsProto_CaptureOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{15, 1}
}
func (m *ClientOptionsProto_CaptureOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientOptionsProto_CaptureOptions.Unmarshal(m, b)
}
func (m *ClientOptionsProto_CaptureOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientOptionsProto_CaptureOptions.Marshal(b, m, deterministic)
}
func (dst *ClientOptionsProto_CaptureOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientOptionsProto_CaptureOptions.Merge(dst, src)
}
func (m *ClientOptionsProto_CaptureOptions) XXX_Size() int {
	return xxx_messageInfo_ClientOptionsProto_CaptureOptions.Size(m)
}
func (m *ClientOptionsProto_CaptureOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientOptionsProto_CaptureOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ClientOptionsProto_CaptureOptions proto.InternalMessageInfo

const Default_ClientOptionsProto_CaptureOptions_AllowSaveAsImage bool = true
const Default_ClientOptionsProto_CaptureOptions_MaxFreeCaptureRes int32 = 2400
const Default_ClientOptionsProto_CaptureOptions_MaxPremiumCaptureRes int32 = 4800

func (m *ClientOptionsProto_CaptureOptions) GetAllowSaveAsImage() bool {
	if m != nil && m.AllowSaveAsImage != nil {
		return *m.AllowSaveAsImage
	}
	return Default_ClientOptionsProto_CaptureOptions_AllowSaveAsImage
}

func (m *ClientOptionsProto_CaptureOptions) GetMaxFreeCaptureRes() int32 {
	if m != nil && m.MaxFreeCaptureRes != nil {
		return *m.MaxFreeCaptureRes
	}
	return Default_ClientOptionsProto_CaptureOptions_MaxFreeCaptureRes
}

func (m *ClientOptionsProto_CaptureOptions) GetMaxPremiumCaptureRes() int32 {
	if m != nil && m.MaxPremiumCaptureRes != nil {
		return *m.MaxPremiumCaptureRes
	}
	return Default_ClientOptionsProto_CaptureOptions_MaxPremiumCaptureRes
}

// Message with Maps documents options.
type ClientOptionsProto_MapsOptions struct {
	// Whether to use maps library for managing documents.
	EnableMaps *bool `protobuf:"varint,1,opt,name=enable_maps,json=enableMaps" json:"enable_maps,omitempty"`
	// Whether to enable auto download for polling docs server for feed and
	// maps changes.
	DocsAutoDownloadEnabled *bool `protobuf:"varint,2,opt,name=docs_auto_download_enabled,json=docsAutoDownloadEnabled" json:"docs_auto_download_enabled,omitempty"`
	// Interval in milliseconds of how often to poll docs server for feed and
	// maps changes. Depends on docs_auto_download_enabled.
	DocsAutoDownloadInterval *int32 `protobuf:"varint,3,opt,name=docs_auto_download_interval,json=docsAutoDownloadInterval" json:"docs_auto_download_interval,omitempty"`
	// Whether to enable auto uploads for new or modified maps.
	DocsAutoUploadEnabled *bool `protobuf:"varint,4,opt,name=docs_auto_upload_enabled,json=docsAutoUploadEnabled" json:"docs_auto_upload_enabled,omitempty"`
	// Delay in milliseconds of how long to wait before uploading local
	// changes to docs maps. Depends on docs_upload_enabled.
	DocsAutoUploadDelay  *int32   `protobuf:"varint,5,opt,name=docs_auto_upload_delay,json=docsAutoUploadDelay" json:"docs_auto_upload_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientOptionsProto_MapsOptions) Reset()         { *m = ClientOptionsProto_MapsOptions{} }
func (m *ClientOptionsProto_MapsOptions) String() string { return proto.CompactTextString(m) }
func (*ClientOptionsProto_MapsOptions) ProtoMessage()    {}
func (*ClientOptionsProto_MapsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{15, 2}
}
func (m *ClientOptionsProto_MapsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientOptionsProto_MapsOptions.Unmarshal(m, b)
}
func (m *ClientOptionsProto_MapsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientOptionsProto_MapsOptions.Marshal(b, m, deterministic)
}
func (dst *ClientOptionsProto_MapsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientOptionsProto_MapsOptions.Merge(dst, src)
}
func (m *ClientOptionsProto_MapsOptions) XXX_Size() int {
	return xxx_messageInfo_ClientOptionsProto_MapsOptions.Size(m)
}
func (m *ClientOptionsProto_MapsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientOptionsProto_MapsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ClientOptionsProto_MapsOptions proto.InternalMessageInfo

func (m *ClientOptionsProto_MapsOptions) GetEnableMaps() bool {
	if m != nil && m.EnableMaps != nil {
		return *m.EnableMaps
	}
	return false
}

func (m *ClientOptionsProto_MapsOptions) GetDocsAutoDownloadEnabled() bool {
	if m != nil && m.DocsAutoDownloadEnabled != nil {
		return *m.DocsAutoDownloadEnabled
	}
	return false
}

func (m *ClientOptionsProto_MapsOptions) GetDocsAutoDownloadInterval() int32 {
	if m != nil && m.DocsAutoDownloadInterval != nil {
		return *m.DocsAutoDownloadInterval
	}
	return 0
}

func (m *ClientOptionsProto_MapsOptions) GetDocsAutoUploadEnabled() bool {
	if m != nil && m.DocsAutoUploadEnabled != nil {
		return *m.DocsAutoUploadEnabled
	}
	return false
}

func (m *ClientOptionsProto_MapsOptions) GetDocsAutoUploadDelay() int32 {
	if m != nil && m.DocsAutoUploadDelay != nil {
		return *m.DocsAutoUploadDelay
	}
	return 0
}

// Settings that affect how data can be fetched and throttled for this database.
// Next available id: 16
type FetchingOptionsProto struct {
	// Maximum number of nodes that can be asked for in a single request. If set
	// to 1, clients will issue one request per node. Larger values allow clients
	// to group requests together. This value impacts all the other
	// batching-related options.
	MaxRequestsPerQuery *int32 `protobuf:"varint,1,opt,name=max_requests_per_query,json=maxRequestsPerQuery,def=1" json:"max_requests_per_query,omitempty"`
	// We allow the user to specify Connection/avoidRequestBatching
	// in drivers.ini.  If force_max_requests_per_query is true,
	// we ignore the user setting and use max_requests_per_query.
	ForceMaxRequestsPerQuery *bool `protobuf:"varint,12,opt,name=force_max_requests_per_query,json=forceMaxRequestsPerQuery" json:"force_max_requests_per_query,omitempty"`
	// Whether the client should sort requests before grouping requests together.
	SortBatches *bool `protobuf:"varint,13,opt,name=sort_batches,json=sortBatches" json:"sort_batches,omitempty"`
	// Maximum number of drawable packets per request.
	MaxDrawable *int32 `protobuf:"varint,2,opt,name=max_drawable,json=maxDrawable,def=2" json:"max_drawable,omitempty"`
	// Maximum number of imagery packets per request.
	MaxImagery *int32 `protobuf:"varint,3,opt,name=max_imagery,json=maxImagery,def=2" json:"max_imagery,omitempty"`
	// Maximum number of terrain packets per request.
	MaxTerrain *int32 `protobuf:"varint,4,opt,name=max_terrain,json=maxTerrain,def=5" json:"max_terrain,omitempty"`
	// Maximum number of quadtree packets per request.
	MaxQuadtree *int32 `protobuf:"varint,5,opt,name=max_quadtree,json=maxQuadtree,def=5" json:"max_quadtree,omitempty"`
	// Maximum number of diorama metadata packets per request.
	MaxDioramaMetadata *int32 `protobuf:"varint,6,opt,name=max_diorama_metadata,json=maxDioramaMetadata,def=1" json:"max_diorama_metadata,omitempty"`
	// Maximum number of diorama data packets per request. The default is to not
	// allow this packet type to be grouped with any other type, since these
	// packets are typically quite large.
	MaxDioramaData *int32 `protobuf:"varint,7,opt,name=max_diorama_data,json=maxDioramaData,def=0" json:"max_diorama_data,omitempty"`
	// Fetch ratio for consumer builds (non-paying customers). The default is to
	// limit the number of packets fetched per frame to a low number (4 in
	// consumer builds). This ratio allows to increase that low number - a ratio
	// of 10 bumps the max number of packets to 40 per frame. Allowing a large
	// number of packets to be fetched per frame can significantly decrease scene
	// resolution time. A value of 0 means to not restrict the amount of data
	// fetched per frame at all (infinite ratio).
	MaxConsumerFetchRatio *float32 `protobuf:"fixed32,8,opt,name=max_consumer_fetch_ratio,json=maxConsumerFetchRatio,def=1" json:"max_consumer_fetch_ratio,omitempty"`
	// Same ratio, for Pro and EC builds. The default is to not throttle these
	// builds at all.
	MaxProEcFetchRatio *float32 `protobuf:"fixed32,9,opt,name=max_pro_ec_fetch_ratio,json=maxProEcFetchRatio,def=0" json:"max_pro_ec_fetch_ratio,omitempty"`
	// QPS throttle for all node types. Forces the client to not issue more
	// requests than the given number. A batched request counts for a single
	// request from a qps standpoint. If not set or 0.0f, limit is ignored and the
	// client won't be throttled.
	SafeOverallQps *float32 `protobuf:"fixed32,10,opt,name=safe_overall_qps,json=safeOverallQps" json:"safe_overall_qps,omitempty"`
	// Same type of throttle for imagery requests only. Each imagery packet
	// requested in a batch request counts as 1 request. This setting is effective
	// to reduce overall bandwidth usage since imagery packets are the largest of
	// the most commonly requested pakcets types.
	SafeImageryQps *float32 `protobuf:"fixed32,11,opt,name=safe_imagery_qps,json=safeImageryQps" json:"safe_imagery_qps,omitempty"`
	// List of domains for which the client should use the HTTPS protocol
	// instead of standard HTTP, when client option is enabled (supported as
	// of Earth 7.1).
	DomainsForHttps *string `protobuf:"bytes,14,opt,name=domains_for_https,json=domainsForHttps,def=google.com gstatic.com" json:"domains_for_https,omitempty"`
	// List of hosts for which the client should use regular HTTP instead of
	// HTTPS.  This is effectively a list of exceptions to the domains_for_https
	// field above.  Supported as of Earth 7.1.1.x for x > 1888.
	// Example:  "sketchup.google.com chart.apis.google.com" will cause the client
	// to use HTTP for these hosts, even though they belong to a domain in the
	// domains_for_https list above.
	HostsForHttp         *string  `protobuf:"bytes,15,opt,name=hosts_for_http,json=hostsForHttp" json:"hosts_for_http,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchingOptionsProto) Reset()         { *m = FetchingOptionsProto{} }
func (m *FetchingOptionsProto) String() string { return proto.CompactTextString(m) }
func (*FetchingOptionsProto) ProtoMessage()    {}
func (*FetchingOptionsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{16}
}
func (m *FetchingOptionsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchingOptionsProto.Unmarshal(m, b)
}
func (m *FetchingOptionsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchingOptionsProto.Marshal(b, m, deterministic)
}
func (dst *FetchingOptionsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchingOptionsProto.Merge(dst, src)
}
func (m *FetchingOptionsProto) XXX_Size() int {
	return xxx_messageInfo_FetchingOptionsProto.Size(m)
}
func (m *FetchingOptionsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchingOptionsProto.DiscardUnknown(m)
}

var xxx_messageInfo_FetchingOptionsProto proto.InternalMessageInfo

const Default_FetchingOptionsProto_MaxRequestsPerQuery int32 = 1
const Default_FetchingOptionsProto_MaxDrawable int32 = 2
const Default_FetchingOptionsProto_MaxImagery int32 = 2
const Default_FetchingOptionsProto_MaxTerrain int32 = 5
const Default_FetchingOptionsProto_MaxQuadtree int32 = 5
const Default_FetchingOptionsProto_MaxDioramaMetadata int32 = 1
const Default_FetchingOptionsProto_MaxDioramaData int32 = 0
const Default_FetchingOptionsProto_MaxConsumerFetchRatio float32 = 1
const Default_FetchingOptionsProto_MaxProEcFetchRatio float32 = 0
const Default_FetchingOptionsProto_DomainsForHttps string = "google.com gstatic.com"

func (m *FetchingOptionsProto) GetMaxRequestsPerQuery() int32 {
	if m != nil && m.MaxRequestsPerQuery != nil {
		return *m.MaxRequestsPerQuery
	}
	return Default_FetchingOptionsProto_MaxRequestsPerQuery
}

func (m *FetchingOptionsProto) GetForceMaxRequestsPerQuery() bool {
	if m != nil && m.ForceMaxRequestsPerQuery != nil {
		return *m.ForceMaxRequestsPerQuery
	}
	return false
}

func (m *FetchingOptionsProto) GetSortBatches() bool {
	if m != nil && m.SortBatches != nil {
		return *m.SortBatches
	}
	return false
}

func (m *FetchingOptionsProto) GetMaxDrawable() int32 {
	if m != nil && m.MaxDrawable != nil {
		return *m.MaxDrawable
	}
	return Default_FetchingOptionsProto_MaxDrawable
}

func (m *FetchingOptionsProto) GetMaxImagery() int32 {
	if m != nil && m.MaxImagery != nil {
		return *m.MaxImagery
	}
	return Default_FetchingOptionsProto_MaxImagery
}

func (m *FetchingOptionsProto) GetMaxTerrain() int32 {
	if m != nil && m.MaxTerrain != nil {
		return *m.MaxTerrain
	}
	return Default_FetchingOptionsProto_MaxTerrain
}

func (m *FetchingOptionsProto) GetMaxQuadtree() int32 {
	if m != nil && m.MaxQuadtree != nil {
		return *m.MaxQuadtree
	}
	return Default_FetchingOptionsProto_MaxQuadtree
}

func (m *FetchingOptionsProto) GetMaxDioramaMetadata() int32 {
	if m != nil && m.MaxDioramaMetadata != nil {
		return *m.MaxDioramaMetadata
	}
	return Default_FetchingOptionsProto_MaxDioramaMetadata
}

func (m *FetchingOptionsProto) GetMaxDioramaData() int32 {
	if m != nil && m.MaxDioramaData != nil {
		return *m.MaxDioramaData
	}
	return Default_FetchingOptionsProto_MaxDioramaData
}

func (m *FetchingOptionsProto) GetMaxConsumerFetchRatio() float32 {
	if m != nil && m.MaxConsumerFetchRatio != nil {
		return *m.MaxConsumerFetchRatio
	}
	return Default_FetchingOptionsProto_MaxConsumerFetchRatio
}

func (m *FetchingOptionsProto) GetMaxProEcFetchRatio() float32 {
	if m != nil && m.MaxProEcFetchRatio != nil {
		return *m.MaxProEcFetchRatio
	}
	return Default_FetchingOptionsProto_MaxProEcFetchRatio
}

func (m *FetchingOptionsProto) GetSafeOverallQps() float32 {
	if m != nil && m.SafeOverallQps != nil {
		return *m.SafeOverallQps
	}
	return 0
}

func (m *FetchingOptionsProto) GetSafeImageryQps() float32 {
	if m != nil && m.SafeImageryQps != nil {
		return *m.SafeImageryQps
	}
	return 0
}

func (m *FetchingOptionsProto) GetDomainsForHttps() string {
	if m != nil && m.DomainsForHttps != nil {
		return *m.DomainsForHttps
	}
	return Default_FetchingOptionsProto_DomainsForHttps
}

func (m *FetchingOptionsProto) GetHostsForHttp() string {
	if m != nil && m.HostsForHttp != nil {
		return *m.HostsForHttp
	}
	return ""
}

type TimeMachineOptionsProto struct {
	// Url of timemachine database. If set and non-empty, there is a time machine
	// server associated to this database.
	ServerUrl *string `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
	// If set to true, this database is a time machine server.
	IsTimemachine *bool `protobuf:"varint,2,opt,name=is_timemachine,json=isTimemachine" json:"is_timemachine,omitempty"`
	// Number of milliseconds to wait since the last time change until we
	// actually set the date used for time machine requests.
	DwellTimeMs *int32 `protobuf:"varint,3,opt,name=dwell_time_ms,json=dwellTimeMs,def=500" json:"dwell_time_ms,omitempty"`
	// The camera altitude (in meters) below which the client is allowed to
	// expose timemachine dates to the user to inform her that interesting data
	// exists.  The default value is 15 km.
	DiscoverabilityAltitudeMeters *int32   `protobuf:"varint,4,opt,name=discoverability_altitude_meters,json=discoverabilityAltitudeMeters,def=15000" json:"discoverability_altitude_meters,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *TimeMachineOptionsProto) Reset()         { *m = TimeMachineOptionsProto{} }
func (m *TimeMachineOptionsProto) String() string { return proto.CompactTextString(m) }
func (*TimeMachineOptionsProto) ProtoMessage()    {}
func (*TimeMachineOptionsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{17}
}
func (m *TimeMachineOptionsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeMachineOptionsProto.Unmarshal(m, b)
}
func (m *TimeMachineOptionsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeMachineOptionsProto.Marshal(b, m, deterministic)
}
func (dst *TimeMachineOptionsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeMachineOptionsProto.Merge(dst, src)
}
func (m *TimeMachineOptionsProto) XXX_Size() int {
	return xxx_messageInfo_TimeMachineOptionsProto.Size(m)
}
func (m *TimeMachineOptionsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeMachineOptionsProto.DiscardUnknown(m)
}

var xxx_messageInfo_TimeMachineOptionsProto proto.InternalMessageInfo

const Default_TimeMachineOptionsProto_DwellTimeMs int32 = 500
const Default_TimeMachineOptionsProto_DiscoverabilityAltitudeMeters int32 = 15000

func (m *TimeMachineOptionsProto) GetServerUrl() string {
	if m != nil && m.ServerUrl != nil {
		return *m.ServerUrl
	}
	return ""
}

func (m *TimeMachineOptionsProto) GetIsTimemachine() bool {
	if m != nil && m.IsTimemachine != nil {
		return *m.IsTimemachine
	}
	return false
}

func (m *TimeMachineOptionsProto) GetDwellTimeMs() int32 {
	if m != nil && m.DwellTimeMs != nil {
		return *m.DwellTimeMs
	}
	return Default_TimeMachineOptionsProto_DwellTimeMs
}

func (m *TimeMachineOptionsProto) GetDiscoverabilityAltitudeMeters() int32 {
	if m != nil && m.DiscoverabilityAltitudeMeters != nil {
		return *m.DiscoverabilityAltitudeMeters
	}
	return Default_TimeMachineOptionsProto_DiscoverabilityAltitudeMeters
}

type AutopiaOptionsProto struct {
	// Url of the cityblock server from which to fetch the panorama
	// metadata.
	MetadataServerUrl *string `protobuf:"bytes,1,opt,name=metadata_server_url,json=metadataServerUrl,def=http://cbk0.google.com/cbk" json:"metadata_server_url,omitempty"`
	// Url of the cityblock server from which to fetch the depthmaps
	DepthmapServerUrl *string `protobuf:"bytes,2,opt,name=depthmap_server_url,json=depthmapServerUrl,def=http://cbk0.google.com/cbk" json:"depthmap_server_url,omitempty"`
	// Url of the coverage overlay KML. Not specifying this value will
	// result in no coverage overlays being shown while dragging the
	// pegman in autopia.
	CoverageOverlayUrl *string `protobuf:"bytes,3,opt,name=coverage_overlay_url,json=coverageOverlayUrl,def=" json:"coverage_overlay_url,omitempty"`
	// QPS throttle for Autopia imagery requests. If not set or 0.0f,
	// limit is ignored and the client won't be throttled. We have a separate
	// throttle for imagery requests as they are the most common type of requests.
	//
	// If we set an identical throttle value to imagery and metadata-depthmap,
	// then requests can share the http connection. On the other hand they will
	// use two different connections for different values. This enables us to
	// throttle imagery without throttling metadata.
	MaxImageryQps *float32 `protobuf:"fixed32,4,opt,name=max_imagery_qps,json=maxImageryQps" json:"max_imagery_qps,omitempty"`
	// QPS throttle for Autopia metadata and depthmap requests.
	MaxMetadataDepthmapQps *float32 `protobuf:"fixed32,5,opt,name=max_metadata_depthmap_qps,json=maxMetadataDepthmapQps" json:"max_metadata_depthmap_qps,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AutopiaOptionsProto) Reset()         { *m = AutopiaOptionsProto{} }
func (m *AutopiaOptionsProto) String() string { return proto.CompactTextString(m) }
func (*AutopiaOptionsProto) ProtoMessage()    {}
func (*AutopiaOptionsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{18}
}
func (m *AutopiaOptionsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutopiaOptionsProto.Unmarshal(m, b)
}
func (m *AutopiaOptionsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutopiaOptionsProto.Marshal(b, m, deterministic)
}
func (dst *AutopiaOptionsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutopiaOptionsProto.Merge(dst, src)
}
func (m *AutopiaOptionsProto) XXX_Size() int {
	return xxx_messageInfo_AutopiaOptionsProto.Size(m)
}
func (m *AutopiaOptionsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_AutopiaOptionsProto.DiscardUnknown(m)
}

var xxx_messageInfo_AutopiaOptionsProto proto.InternalMessageInfo

const Default_AutopiaOptionsProto_MetadataServerUrl string = "http://cbk0.google.com/cbk"
const Default_AutopiaOptionsProto_DepthmapServerUrl string = "http://cbk0.google.com/cbk"

func (m *AutopiaOptionsProto) GetMetadataServerUrl() string {
	if m != nil && m.MetadataServerUrl != nil {
		return *m.MetadataServerUrl
	}
	return Default_AutopiaOptionsProto_MetadataServerUrl
}

func (m *AutopiaOptionsProto) GetDepthmapServerUrl() string {
	if m != nil && m.DepthmapServerUrl != nil {
		return *m.DepthmapServerUrl
	}
	return Default_AutopiaOptionsProto_DepthmapServerUrl
}

func (m *AutopiaOptionsProto) GetCoverageOverlayUrl() string {
	if m != nil && m.CoverageOverlayUrl != nil {
		return *m.CoverageOverlayUrl
	}
	return ""
}

func (m *AutopiaOptionsProto) GetMaxImageryQps() float32 {
	if m != nil && m.MaxImageryQps != nil {
		return *m.MaxImageryQps
	}
	return 0
}

func (m *AutopiaOptionsProto) GetMaxMetadataDepthmapQps() float32 {
	if m != nil && m.MaxMetadataDepthmapQps != nil {
		return *m.MaxMetadataDepthmapQps
	}
	return 0
}

// Settings that control the client's interaction with the CSI logging server.
// Only useful for the main database.
type CSIOptionsProto struct {
	// The percentage of authenticated non-EC logins to send to CSI.
	SamplingPercentage *int32 `protobuf:"varint,1,opt,name=sampling_percentage,json=samplingPercentage" json:"sampling_percentage,omitempty"`
	// A string used to tag samples sent to CSI as part of an experiment.
	// This string is passed as a CGI parameter of the URL and is expected
	// to be URL-friendly.
	ExperimentId         *string  `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId" json:"experiment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSIOptionsProto) Reset()         { *m = CSIOptionsProto{} }
func (m *CSIOptionsProto) String() string { return proto.CompactTextString(m) }
func (*CSIOptionsProto) ProtoMessage()    {}
func (*CSIOptionsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{19}
}
func (m *CSIOptionsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSIOptionsProto.Unmarshal(m, b)
}
func (m *CSIOptionsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSIOptionsProto.Marshal(b, m, deterministic)
}
func (dst *CSIOptionsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSIOptionsProto.Merge(dst, src)
}
func (m *CSIOptionsProto) XXX_Size() int {
	return xxx_messageInfo_CSIOptionsProto.Size(m)
}
func (m *CSIOptionsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CSIOptionsProto.DiscardUnknown(m)
}

var xxx_messageInfo_CSIOptionsProto proto.InternalMessageInfo

func (m *CSIOptionsProto) GetSamplingPercentage() int32 {
	if m != nil && m.SamplingPercentage != nil {
		return *m.SamplingPercentage
	}
	return 0
}

func (m *CSIOptionsProto) GetExperimentId() string {
	if m != nil && m.ExperimentId != nil {
		return *m.ExperimentId
	}
	return ""
}

type SearchTabProto struct {
	// If false, tab is hidden.
	IsVisible *bool `protobuf:"varint,1,req,name=is_visible,json=isVisible" json:"is_visible,omitempty"`
	// Name printed on tab.
	TabLabel *StringIdOrValueProto `protobuf:"bytes,2,opt,name=tab_label,json=tabLabel" json:"tab_label,omitempty"`
	// Base url for searches on this tab. This can contain a host, port, path
	// and base query. Extra query parameter will be added to this URL to form
	// the final URL.
	BaseUrl *string `protobuf:"bytes,3,opt,name=base_url,json=baseUrl" json:"base_url,omitempty"`
	// Prefix added to viewport query
	ViewportPrefix *string `protobuf:"bytes,4,opt,name=viewport_prefix,json=viewportPrefix" json:"viewport_prefix,omitempty"`
	// List of input boxes. Most clients support only two input boxes.
	InputBox []*SearchTabProto_InputBoxInfo `protobuf:"bytes,5,rep,name=input_box,json=inputBox" json:"input_box,omitempty"`
	// Requirement for showing search tab.
	// This requirement is ignored for clients before 6.2 (i.e. it does not
	// affect the search tab visibility for older clients).
	// Version support: 6.2 +
	Requirement          *RequirementProto `protobuf:"bytes,6,opt,name=requirement" json:"requirement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SearchTabProto) Reset()         { *m = SearchTabProto{} }
func (m *SearchTabProto) String() string { return proto.CompactTextString(m) }
func (*SearchTabProto) ProtoMessage()    {}
func (*SearchTabProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{20}
}
func (m *SearchTabProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchTabProto.Unmarshal(m, b)
}
func (m *SearchTabProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchTabProto.Marshal(b, m, deterministic)
}
func (dst *SearchTabProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTabProto.Merge(dst, src)
}
func (m *SearchTabProto) XXX_Size() int {
	return xxx_messageInfo_SearchTabProto.Size(m)
}
func (m *SearchTabProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTabProto.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTabProto proto.InternalMessageInfo

func (m *SearchTabProto) GetIsVisible() bool {
	if m != nil && m.IsVisible != nil {
		return *m.IsVisible
	}
	return false
}

func (m *SearchTabProto) GetTabLabel() *StringIdOrValueProto {
	if m != nil {
		return m.TabLabel
	}
	return nil
}

func (m *SearchTabProto) GetBaseUrl() string {
	if m != nil && m.BaseUrl != nil {
		return *m.BaseUrl
	}
	return ""
}

func (m *SearchTabProto) GetViewportPrefix() string {
	if m != nil && m.ViewportPrefix != nil {
		return *m.ViewportPrefix
	}
	return ""
}

func (m *SearchTabProto) GetInputBox() []*SearchTabProto_InputBoxInfo {
	if m != nil {
		return m.InputBox
	}
	return nil
}

func (m *SearchTabProto) GetRequirement() *RequirementProto {
	if m != nil {
		return m.Requirement
	}
	return nil
}

// Describes a single input box - the label it should have and how its
// contents should be sent with the search query.
type SearchTabProto_InputBoxInfo struct {
	// Label next to tag.
	Label *StringIdOrValueProto `protobuf:"bytes,1,req,name=label" json:"label,omitempty"`
	// Query param (verb)
	QueryVerb *string `protobuf:"bytes,2,req,name=query_verb,json=queryVerb" json:"query_verb,omitempty"`
	// String prepended to input parameter
	QueryPrepend         *string  `protobuf:"bytes,3,opt,name=query_prepend,json=queryPrepend" json:"query_prepend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchTabProto_InputBoxInfo) Reset()         { *m = SearchTabProto_InputBoxInfo{} }
func (m *SearchTabProto_InputBoxInfo) String() string { return proto.CompactTextString(m) }
func (*SearchTabProto_InputBoxInfo) ProtoMessage()    {}
func (*SearchTabProto_InputBoxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{20, 0}
}
func (m *SearchTabProto_InputBoxInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchTabProto_InputBoxInfo.Unmarshal(m, b)
}
func (m *SearchTabProto_InputBoxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchTabProto_InputBoxInfo.Marshal(b, m, deterministic)
}
func (dst *SearchTabProto_InputBoxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTabProto_InputBoxInfo.Merge(dst, src)
}
func (m *SearchTabProto_InputBoxInfo) XXX_Size() int {
	return xxx_messageInfo_SearchTabProto_InputBoxInfo.Size(m)
}
func (m *SearchTabProto_InputBoxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTabProto_InputBoxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTabProto_InputBoxInfo proto.InternalMessageInfo

func (m *SearchTabProto_InputBoxInfo) GetLabel() *StringIdOrValueProto {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *SearchTabProto_InputBoxInfo) GetQueryVerb() string {
	if m != nil && m.QueryVerb != nil {
		return *m.QueryVerb
	}
	return ""
}

func (m *SearchTabProto_InputBoxInfo) GetQueryPrepend() string {
	if m != nil && m.QueryPrepend != nil {
		return *m.QueryPrepend
	}
	return ""
}

// Defines position and size of custom logos that will be fetched and shown
// by the client.
type CobrandProto struct {
	// URL of image to use as logo. Can be remote or local. However, using local
	// URLs depends on the installation of the client and should be used
	// carefully.
	LogoUrl *string `protobuf:"bytes,1,req,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	// Controls x position of reference overlay point (see tie_point)
	XCoord *CobrandProto_Coord `protobuf:"bytes,2,opt,name=x_coord,json=xCoord" json:"x_coord,omitempty"`
	// Controls y position of reference overlay point (see tie_point)
	YCoord *CobrandProto_Coord `protobuf:"bytes,3,opt,name=y_coord,json=yCoord" json:"y_coord,omitempty"`
	// Controls reference point in overlay.
	TiePoint *CobrandProto_TiePoint `protobuf:"varint,4,opt,name=tie_point,json=tiePoint,enum=keyhole.dbroot.CobrandProto_TiePoint,def=6" json:"tie_point,omitempty"`
	// If specified and strictly positive but <= 1.0, makes logo scalable with
	// screen by forcing its width to occupy a fixed fraction of the screeen.
	// For instance, a value of .25 makes the given logo occupy 25% of the screen.
	ScreenSize           *float64 `protobuf:"fixed64,5,opt,name=screen_size,json=screenSize,def=0" json:"screen_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CobrandProto) Reset()         { *m = CobrandProto{} }
func (m *CobrandProto) String() string { return proto.CompactTextString(m) }
func (*CobrandProto) ProtoMessage()    {}
func (*CobrandProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{21}
}
func (m *CobrandProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CobrandProto.Unmarshal(m, b)
}
func (m *CobrandProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CobrandProto.Marshal(b, m, deterministic)
}
func (dst *CobrandProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CobrandProto.Merge(dst, src)
}
func (m *CobrandProto) XXX_Size() int {
	return xxx_messageInfo_CobrandProto.Size(m)
}
func (m *CobrandProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CobrandProto.DiscardUnknown(m)
}

var xxx_messageInfo_CobrandProto proto.InternalMessageInfo

const Default_CobrandProto_TiePoint CobrandProto_TiePoint = CobrandProto_BOTTOM_LEFT
const Default_CobrandProto_ScreenSize float64 = 0

func (m *CobrandProto) GetLogoUrl() string {
	if m != nil && m.LogoUrl != nil {
		return *m.LogoUrl
	}
	return ""
}

func (m *CobrandProto) GetXCoord() *CobrandProto_Coord {
	if m != nil {
		return m.XCoord
	}
	return nil
}

func (m *CobrandProto) GetYCoord() *CobrandProto_Coord {
	if m != nil {
		return m.YCoord
	}
	return nil
}

func (m *CobrandProto) GetTiePoint() CobrandProto_TiePoint {
	if m != nil && m.TiePoint != nil {
		return *m.TiePoint
	}
	return Default_CobrandProto_TiePoint
}

func (m *CobrandProto) GetScreenSize() float64 {
	if m != nil && m.ScreenSize != nil {
		return *m.ScreenSize
	}
	return Default_CobrandProto_ScreenSize
}

// Inner message that allows specifying a coordinate.
type CobrandProto_Coord struct {
	// Coordinate value. Interpretation depends on is_relative (absolute or
	Value *float64 `protobuf:"fixed64,1,req,name=value,def=0" json:"value,omitempty"`
	// If true, the coordinate is relative to the screen.
	IsRelative           *bool    `protobuf:"varint,2,opt,name=is_relative,json=isRelative,def=0" json:"is_relative,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CobrandProto_Coord) Reset()         { *m = CobrandProto_Coord{} }
func (m *CobrandProto_Coord) String() string { return proto.CompactTextString(m) }
func (*CobrandProto_Coord) ProtoMessage()    {}
func (*CobrandProto_Coord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{21, 0}
}
func (m *CobrandProto_Coord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CobrandProto_Coord.Unmarshal(m, b)
}
func (m *CobrandProto_Coord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CobrandProto_Coord.Marshal(b, m, deterministic)
}
func (dst *CobrandProto_Coord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CobrandProto_Coord.Merge(dst, src)
}
func (m *CobrandProto_Coord) XXX_Size() int {
	return xxx_messageInfo_CobrandProto_Coord.Size(m)
}
func (m *CobrandProto_Coord) XXX_DiscardUnknown() {
	xxx_messageInfo_CobrandProto_Coord.DiscardUnknown(m)
}

var xxx_messageInfo_CobrandProto_Coord proto.InternalMessageInfo

const Default_CobrandProto_Coord_Value float64 = 0
const Default_CobrandProto_Coord_IsRelative bool = false

func (m *CobrandProto_Coord) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return Default_CobrandProto_Coord_Value
}

func (m *CobrandProto_Coord) GetIsRelative() bool {
	if m != nil && m.IsRelative != nil {
		return *m.IsRelative
	}
	return Default_CobrandProto_Coord_IsRelative
}

// Describes a database the client can connect to when connected to this server.
type DatabaseDescriptionProto struct {
	// Human-readable name of database (such as "Primary Database" or "Digital
	// Globe Database")
	DatabaseName *StringIdOrValueProto `protobuf:"bytes,1,opt,name=database_name,json=databaseName" json:"database_name,omitempty"`
	// URL of server. This can include a path and query, and must be a
	// well-formed, absolute URL.
	DatabaseUrl          *string  `protobuf:"bytes,2,req,name=database_url,json=databaseUrl" json:"database_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatabaseDescriptionProto) Reset()         { *m = DatabaseDescriptionProto{} }
func (m *DatabaseDescriptionProto) String() string { return proto.CompactTextString(m) }
func (*DatabaseDescriptionProto) ProtoMessage()    {}
func (*DatabaseDescriptionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{22}
}
func (m *DatabaseDescriptionProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatabaseDescriptionProto.Unmarshal(m, b)
}
func (m *DatabaseDescriptionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatabaseDescriptionProto.Marshal(b, m, deterministic)
}
func (dst *DatabaseDescriptionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseDescriptionProto.Merge(dst, src)
}
func (m *DatabaseDescriptionProto) XXX_Size() int {
	return xxx_messageInfo_DatabaseDescriptionProto.Size(m)
}
func (m *DatabaseDescriptionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseDescriptionProto.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseDescriptionProto proto.InternalMessageInfo

func (m *DatabaseDescriptionProto) GetDatabaseName() *StringIdOrValueProto {
	if m != nil {
		return m.DatabaseName
	}
	return nil
}

func (m *DatabaseDescriptionProto) GetDatabaseUrl() string {
	if m != nil && m.DatabaseUrl != nil {
		return *m.DatabaseUrl
	}
	return ""
}

// Name/value pair that maps a script name to an alchemy script.
type ConfigScriptProto struct {
	// Name of the script that can be used in NestedFeatureProto (see
	// client_config_script_name).
	ScriptName *string `protobuf:"bytes,1,req,name=script_name,json=scriptName" json:"script_name,omitempty"`
	// Contents of the script. This must be a valid Alchemy script.
	ScriptData           *string  `protobuf:"bytes,2,req,name=script_data,json=scriptData" json:"script_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigScriptProto) Reset()         { *m = ConfigScriptProto{} }
func (m *ConfigScriptProto) String() string { return proto.CompactTextString(m) }
func (*ConfigScriptProto) ProtoMessage()    {}
func (*ConfigScriptProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{23}
}
func (m *ConfigScriptProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigScriptProto.Unmarshal(m, b)
}
func (m *ConfigScriptProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigScriptProto.Marshal(b, m, deterministic)
}
func (dst *ConfigScriptProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigScriptProto.Merge(dst, src)
}
func (m *ConfigScriptProto) XXX_Size() int {
	return xxx_messageInfo_ConfigScriptProto.Size(m)
}
func (m *ConfigScriptProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigScriptProto.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigScriptProto proto.InternalMessageInfo

func (m *ConfigScriptProto) GetScriptName() string {
	if m != nil && m.ScriptName != nil {
		return *m.ScriptName
	}
	return ""
}

func (m *ConfigScriptProto) GetScriptData() string {
	if m != nil && m.ScriptData != nil {
		return *m.ScriptData
	}
	return ""
}

// Setting to control the swoop feature in Google Earth. We can use it to reduce
// the amount of tilt generated by swooping and thefore reduce overall
// traffic (tilted views cause more tiles to be downloaded than non-tilted
// ones).
type SwoopParamsProto struct {
	// Controls how far from a target swooping should start.
	StartDistInMeters    *float64 `protobuf:"fixed64,1,opt,name=start_dist_in_meters,json=startDistInMeters" json:"start_dist_in_meters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwoopParamsProto) Reset()         { *m = SwoopParamsProto{} }
func (m *SwoopParamsProto) String() string { return proto.CompactTextString(m) }
func (*SwoopParamsProto) ProtoMessage()    {}
func (*SwoopParamsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{24}
}
func (m *SwoopParamsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwoopParamsProto.Unmarshal(m, b)
}
func (m *SwoopParamsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwoopParamsProto.Marshal(b, m, deterministic)
}
func (dst *SwoopParamsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwoopParamsProto.Merge(dst, src)
}
func (m *SwoopParamsProto) XXX_Size() int {
	return xxx_messageInfo_SwoopParamsProto.Size(m)
}
func (m *SwoopParamsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SwoopParamsProto.DiscardUnknown(m)
}

var xxx_messageInfo_SwoopParamsProto proto.InternalMessageInfo

func (m *SwoopParamsProto) GetStartDistInMeters() float64 {
	if m != nil && m.StartDistInMeters != nil {
		return *m.StartDistInMeters
	}
	return 0
}

// Group of settings that can describe a BBS server where user can post their
// data or report errors in our imagery or data.
type PostingServerProto struct {
	// Name that will be displayed in context menu to user. Must be translated.
	Name *StringIdOrValueProto `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// URL of the server including protocol, domain and port. Can be translated
	// if we use different servers for different languages.
	BaseUrl *StringIdOrValueProto `protobuf:"bytes,2,opt,name=base_url,json=baseUrl" json:"base_url,omitempty"`
	// Path on server where wizard can be found.
	PostWizardPath *StringIdOrValueProto `protobuf:"bytes,3,opt,name=post_wizard_path,json=postWizardPath" json:"post_wizard_path,omitempty"`
	// Path on server where files can be submitted.
	FileSubmitPath       *StringIdOrValueProto `protobuf:"bytes,4,opt,name=file_submit_path,json=fileSubmitPath" json:"file_submit_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PostingServerProto) Reset()         { *m = PostingServerProto{} }
func (m *PostingServerProto) String() string { return proto.CompactTextString(m) }
func (*PostingServerProto) ProtoMessage()    {}
func (*PostingServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{25}
}
func (m *PostingServerProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostingServerProto.Unmarshal(m, b)
}
func (m *PostingServerProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostingServerProto.Marshal(b, m, deterministic)
}
func (dst *PostingServerProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostingServerProto.Merge(dst, src)
}
func (m *PostingServerProto) XXX_Size() int {
	return xxx_messageInfo_PostingServerProto.Size(m)
}
func (m *PostingServerProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PostingServerProto.DiscardUnknown(m)
}

var xxx_messageInfo_PostingServerProto proto.InternalMessageInfo

func (m *PostingServerProto) GetName() *StringIdOrValueProto {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PostingServerProto) GetBaseUrl() *StringIdOrValueProto {
	if m != nil {
		return m.BaseUrl
	}
	return nil
}

func (m *PostingServerProto) GetPostWizardPath() *StringIdOrValueProto {
	if m != nil {
		return m.PostWizardPath
	}
	return nil
}

func (m *PostingServerProto) GetFileSubmitPath() *StringIdOrValueProto {
	if m != nil {
		return m.FileSubmitPath
	}
	return nil
}

// Describes a database for another planet or satellite (e.g. Mars, Moon)
// accessible from this database (e.g. Earth).
type PlanetaryDatabaseProto struct {
	// Full URL of database that will be used as base URL to request data.
	Url *StringIdOrValueProto `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	// Translated name of database - will be displayed to the user.
	Name                 *StringIdOrValueProto `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PlanetaryDatabaseProto) Reset()         { *m = PlanetaryDatabaseProto{} }
func (m *PlanetaryDatabaseProto) String() string { return proto.CompactTextString(m) }
func (*PlanetaryDatabaseProto) ProtoMessage()    {}
func (*PlanetaryDatabaseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{26}
}
func (m *PlanetaryDatabaseProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanetaryDatabaseProto.Unmarshal(m, b)
}
func (m *PlanetaryDatabaseProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanetaryDatabaseProto.Marshal(b, m, deterministic)
}
func (dst *PlanetaryDatabaseProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanetaryDatabaseProto.Merge(dst, src)
}
func (m *PlanetaryDatabaseProto) XXX_Size() int {
	return xxx_messageInfo_PlanetaryDatabaseProto.Size(m)
}
func (m *PlanetaryDatabaseProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanetaryDatabaseProto.DiscardUnknown(m)
}

var xxx_messageInfo_PlanetaryDatabaseProto proto.InternalMessageInfo

func (m *PlanetaryDatabaseProto) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *PlanetaryDatabaseProto) GetName() *StringIdOrValueProto {
	if m != nil {
		return m.Name
	}
	return nil
}

// Group of settings to configure logging server used by Google Earth clients
// that connect to this database.
type LogServerProto struct {
	// Full url of logging server. Can be translated or specified as a string.
	// The default value in Google Earth 5.1 is
	// http://www.google.com/tbproxy/usagestats?sourceid=GoogleEarth
	Url *StringIdOrValueProto `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Specifies if logging should be performed. By default logging is turned off.
	Enable *bool `protobuf:"varint,2,opt,name=enable" json:"enable,omitempty"`
	// Controls log throttling - a fraction of 1.0 / throttling_factor() sessions
	// will be logged. A value of 1 means no throttling, while a value of 100
	// causes only 1% of sessions to log data.
	ThrottlingFactor     *int32   `protobuf:"varint,3,opt,name=throttling_factor,json=throttlingFactor,def=1" json:"throttling_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogServerProto) Reset()         { *m = LogServerProto{} }
func (m *LogServerProto) String() string { return proto.CompactTextString(m) }
func (*LogServerProto) ProtoMessage()    {}
func (*LogServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{27}
}
func (m *LogServerProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogServerProto.Unmarshal(m, b)
}
func (m *LogServerProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogServerProto.Marshal(b, m, deterministic)
}
func (dst *LogServerProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogServerProto.Merge(dst, src)
}
func (m *LogServerProto) XXX_Size() int {
	return xxx_messageInfo_LogServerProto.Size(m)
}
func (m *LogServerProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LogServerProto.DiscardUnknown(m)
}

var xxx_messageInfo_LogServerProto proto.InternalMessageInfo

const Default_LogServerProto_ThrottlingFactor int32 = 1

func (m *LogServerProto) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *LogServerProto) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return false
}

func (m *LogServerProto) GetThrottlingFactor() int32 {
	if m != nil && m.ThrottlingFactor != nil {
		return *m.ThrottlingFactor
	}
	return Default_LogServerProto_ThrottlingFactor
}

type EndSnippetProto struct {
	// Options that describe planet shape.
	Model *PlanetModelProto `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// URL of authentication server for paying customers.
	// e.g. "auth.keyhole.com". This can actually be a URL and contain a port,
	// a path, and a protocol (such as https://server.company.com:8080/auth)
	AuthServerUrl *StringIdOrValueProto `protobuf:"bytes,2,opt,name=auth_server_url,json=authServerUrl" json:"auth_server_url,omitempty"`
	// Flag that can be used by entreprise customers - indicates that this
	// database does not require session cookie-based authentication. Entreprise
	// databases are typically protected with LDAP over HTTP or HTTPS.  Be *very*
	// careful to never set this to true for kh.google.com or any other database
	// we control unless you know for a fact it's the right thing to do.
	DisableAuthentication *bool `protobuf:"varint,3,opt,name=disable_authentication,json=disableAuthentication" json:"disable_authentication,omitempty"`
	// Deprecated in Earth 6.1 and higher in favor of search_config.
	// For each known country, lists maps domains to use and associated enabled
	// features. For instance, some countries might be launched without
	// localsearch support.
	MfeDomains []*MfeDomainFeaturesProto `protobuf:"bytes,4,rep,name=mfe_domains,json=mfeDomains" json:"mfe_domains,omitempty"`
	// Deprecated in Earth 6.1 and higher.
	// Parameter(s) that should sent with each request to MFE.
	// '[' or ']' does not seem to be valid in default values, it causes
	// errors when compiling the code. 0x5B and 0xx5D are their respective
	// hex ascii codes.
	// Note: it is valid to specifiy multiple parameters, for instance:
	// end_snippet->set_mfe_lang_param("hl=$[hl]&gl=$[gl]");
	MfeLangParam *string `protobuf:"bytes,5,opt,name=mfe_lang_param,json=mfeLangParam,def=hl=$[hl]" json:"mfe_lang_param,omitempty"`
	// List of space-separated strings treated as glob patterns that describe
	// which URLs should be treated as ads URLs and never be fetched by the
	// client. The default value in the client is:
	// "http://*doubleclick.net* http://*googlesyndication.com* "
	// "http://*google.com/aclk* http://*googleadservices.com* */pagead/*"
	AdsUrlPatterns *string `protobuf:"bytes,6,opt,name=ads_url_patterns,json=adsUrlPatterns" json:"ads_url_patterns,omitempty"`
	// Reverse geocoder server URL
	ReverseGeocoderUrl *StringIdOrValueProto `protobuf:"bytes,7,opt,name=reverse_geocoder_url,json=reverseGeocoderUrl" json:"reverse_geocoder_url,omitempty"`
	// Reverse geocoder protocol version. Default is 3 which is the
	// protocol supported by newer clients.
	ReverseGeocoderProtocolVersion *int32 `protobuf:"varint,8,opt,name=reverse_geocoder_protocol_version,json=reverseGeocoderProtocolVersion,def=3" json:"reverse_geocoder_protocol_version,omitempty"`
	// Whether or not sky database is present
	SkyDatabaseIsAvailable *bool `protobuf:"varint,9,opt,name=sky_database_is_available,json=skyDatabaseIsAvailable,def=1" json:"sky_database_is_available,omitempty"`
	// Location of sky database URL.
	// e.g. "http://khmdb.google.com?db=sky"
	SkyDatabaseUrl *StringIdOrValueProto `protobuf:"bytes,10,opt,name=sky_database_url,json=skyDatabaseUrl" json:"sky_database_url,omitempty"`
	// Default location of web page.
	// e.g. "http://www.google.com/intl/%1/";
	DefaultWebPageIntlUrl *StringIdOrValueProto `protobuf:"bytes,11,opt,name=default_web_page_intl_url,json=defaultWebPageIntlUrl" json:"default_web_page_intl_url,omitempty"`
	// DEPRECATED as of version 7.0.
	// Controls the number of start-up tip urls that the client will cycle
	// through before repeating. This should be no greater than the number of
	// startup tips available on the server.
	NumStartUpTips *int32 `protobuf:"varint,12,opt,name=num_start_up_tips,json=numStartUpTips,def=17" json:"num_start_up_tips,omitempty"`
	// DEPRECATED as of version 7.0.
	// Where to get startup tips from.
	// e.g. "http://earth.google.com/intl/%1/tips/v43/"
	StartUpTipsUrl *StringIdOrValueProto `protobuf:"bytes,13,opt,name=start_up_tips_url,json=startUpTipsUrl" json:"start_up_tips_url,omitempty"`
	// DEPRECATED as of version 7.0.
	// Same settings for Pro/EC - Pro and EC clients will read these settings.
	NumProStartUpTips *int32 `protobuf:"varint,51,opt,name=num_pro_start_up_tips,json=numProStartUpTips" json:"num_pro_start_up_tips,omitempty"`
	// DEPRECATED as of version 7.0.
	ProStartUpTipsUrl *StringIdOrValueProto `protobuf:"bytes,52,opt,name=pro_start_up_tips_url,json=proStartUpTipsUrl" json:"pro_start_up_tips_url,omitempty"`
	// URL from which to load startup tips in Earth 7.0 and higher.  This will be
	// the same URL for Free and Pro, since that logic is now dealt with on the
	// server side.
	// e.g. "http://support.google.com/earth/?p=startup_tip_1"
	StartupTipsIntlUrl *StringIdOrValueProto `protobuf:"bytes,64,opt,name=startup_tips_intl_url,json=startupTipsIntlUrl" json:"startup_tips_intl_url,omitempty"`
	// Url to user guide.
	// e.g. "http://earth.google.com/intl/%1/userguide/v4/"
	UserGuideIntlUrl *StringIdOrValueProto `protobuf:"bytes,14,opt,name=user_guide_intl_url,json=userGuideIntlUrl" json:"user_guide_intl_url,omitempty"`
	// Url to support center.
	// e.g. "http://earth.google.com/support/?hl=%1"
	SupportCenterIntlUrl *StringIdOrValueProto `protobuf:"bytes,15,opt,name=support_center_intl_url,json=supportCenterIntlUrl" json:"support_center_intl_url,omitempty"`
	// Url to business listings.
	// e.g. "http://www.google.com/local/add/login?hl=%3&gl=%2"
	BusinessListingIntlUrl *StringIdOrValueProto `protobuf:"bytes,16,opt,name=business_listing_intl_url,json=businessListingIntlUrl" json:"business_listing_intl_url,omitempty"`
	// Url to support answer.
	// e.g. "http://earth.google.com/support/bin/answer.py?answer=%4&hl=%1"
	SupportAnswerIntlUrl *StringIdOrValueProto `protobuf:"bytes,17,opt,name=support_answer_intl_url,json=supportAnswerIntlUrl" json:"support_answer_intl_url,omitempty"`
	// Url to support topics used by certain diagnostic messages.
	// e.g. "http://earth.google.com/support/bin/topic.py?topic=%4&hl=%1"
	SupportTopicIntlUrl *StringIdOrValueProto `protobuf:"bytes,18,opt,name=support_topic_intl_url,json=supportTopicIntlUrl" json:"support_topic_intl_url,omitempty"`
	// Url to support pages.
	// e.g. "http://earth.google.com/support/bin/request.py?hl=%1"
	SupportRequestIntlUrl *StringIdOrValueProto `protobuf:"bytes,19,opt,name=support_request_intl_url,json=supportRequestIntlUrl" json:"support_request_intl_url,omitempty"`
	// Location of international page for earth.
	// e.g. "http://earth.google.com/intl/$[hl]/"
	EarthIntlUrl *StringIdOrValueProto `protobuf:"bytes,20,opt,name=earth_intl_url,json=earthIntlUrl" json:"earth_intl_url,omitempty"`
	// Location of server that accepts uploads from Google Earth.
	// e.g. "http://earth.google.com/ig/directory?pid=earth&synd=earth&" +
	//      "hl=$[hl]&gl=%2"
	AddContentUrl *StringIdOrValueProto `protobuf:"bytes,21,opt,name=add_content_url,json=addContentUrl" json:"add_content_url,omitempty"`
	// DEPRECATED. There is no longer support for this field. http://b/1605305
	// URL to show when SketchUp is not installed.
	// e.g. "http://sketchup.google.com/intl/$[hl]/modeling.html"
	SketchupNotInstalledUrl *StringIdOrValueProto `protobuf:"bytes,22,opt,name=sketchup_not_installed_url,json=sketchupNotInstalledUrl" json:"sketchup_not_installed_url,omitempty"`
	// DEPRECATED. There is no longer support for this field. http://b/1605305
	// URL to show when a SketchUp error occurs.
	// e.g. "http://sketchup.google.com/intl/$[hl]/gemodelerror.html"
	SketchupErrorUrl *StringIdOrValueProto `protobuf:"bytes,23,opt,name=sketchup_error_url,json=sketchupErrorUrl" json:"sketchup_error_url,omitempty"`
	// URL for the terms of service for the free client.
	// sample value: http://earth.google.com/intl/$[hl]
	FreeLicenseUrl *StringIdOrValueProto `protobuf:"bytes,24,opt,name=free_license_url,json=freeLicenseUrl" json:"free_license_url,omitempty"`
	// URL for the license agreement for Google Earth Pro.
	// sample value: http://earth.google.com/intl/$[hl]
	ProLicenseUrl *StringIdOrValueProto `protobuf:"bytes,25,opt,name=pro_license_url,json=proLicenseUrl" json:"pro_license_url,omitempty"`
	// URL for tutorial page.
	// If not specified, this URL is built from user_guide_intl_url as
	// user_guide_intl_url + "tutorials/index.html".
	TutorialUrl *StringIdOrValueProto `protobuf:"bytes,48,opt,name=tutorial_url,json=tutorialUrl" json:"tutorial_url,omitempty"`
	// URL for keyboard shortcuts page.
	// If not specified, this URL is built from user_guide_intl_url as
	// user_guide_intl_url + "ug_keyboard.html".
	KeyboardShortcutsUrl *StringIdOrValueProto `protobuf:"bytes,49,opt,name=keyboard_shortcuts_url,json=keyboardShortcutsUrl" json:"keyboard_shortcuts_url,omitempty"`
	// URL for release notes page.
	// If not specified, this URL is built from support_answer_intl_url,
	// replacing answer argument with 40901 and appending the application version
	// as a fragment:
	// http://earth.google.com/support/bin/answer.py?answer=40901&hl=en#5.1.3533
	ReleaseNotesUrl *StringIdOrValueProto `protobuf:"bytes,50,opt,name=release_notes_url,json=releaseNotesUrl" json:"release_notes_url,omitempty"`
	// If true, hides user license key in about dialog. Useful for Pro only,
	// allows information to not be visible for shared license keys.
	HideUserData *bool `protobuf:"varint,26,opt,name=hide_user_data,json=hideUserData,def=0" json:"hide_user_data,omitempty"`
	// If true, hides the Google logo. This setting is only honored by entreprise
	// clients.
	UseGeLogo *bool `protobuf:"varint,27,opt,name=use_ge_logo,json=useGeLogo,def=1" json:"use_ge_logo,omitempty"`
	// URL to description of diorama layers.
	// e.g. "http://mw2.google.com/mw-buglight/diorama/descriptions/en/"
	DioramaDescriptionUrlBase *StringIdOrValueProto `protobuf:"bytes,28,opt,name=diorama_description_url_base,json=dioramaDescriptionUrlBase" json:"diorama_description_url_base,omitempty"`
	// Color for diorama buildings that do not specify any color. Used for
	// gray (non-photorealistic) buildings.
	DioramaDefaultColor *uint32 `protobuf:"varint,29,opt,name=diorama_default_color,json=dioramaDefaultColor,def=4291281607" json:"diorama_default_color,omitempty"`
	// URL used to fetch Diorama blacklist (ID's of buildings to hide).
	DioramaBlacklistUrl *StringIdOrValueProto `protobuf:"bytes,53,opt,name=diorama_blacklist_url,json=dioramaBlacklistUrl" json:"diorama_blacklist_url,omitempty"`
	// Client-side features that should be altered for this database.
	ClientOptions *ClientOptionsProto `protobuf:"bytes,30,opt,name=client_options,json=clientOptions" json:"client_options,omitempty"`
	// Network-related options such as throttle and batched requests
	// configuration.
	FetchingOptions *FetchingOptionsProto `protobuf:"bytes,31,opt,name=fetching_options,json=fetchingOptions" json:"fetching_options,omitempty"`
	// Time-machine related settings
	TimeMachineOptions *TimeMachineOptionsProto `protobuf:"bytes,32,opt,name=time_machine_options,json=timeMachineOptions" json:"time_machine_options,omitempty"`
	// CSI options for this database.
	CsiOptions *CSIOptionsProto `protobuf:"bytes,33,opt,name=csi_options,json=csiOptions" json:"csi_options,omitempty"`
	// List of customized search tabs. If list is empty, use default search tabs.
	SearchTab []*SearchTabProto `protobuf:"bytes,34,rep,name=search_tab,json=searchTab" json:"search_tab,omitempty"`
	// List of extra logos to draw on screen.
	CobrandInfo []*CobrandProto `protobuf:"bytes,35,rep,name=cobrand_info,json=cobrandInfo" json:"cobrand_info,omitempty"`
	// List of valid databases a client can connect to from this server.
	ValidDatabase []*DatabaseDescriptionProto `protobuf:"bytes,36,rep,name=valid_database,json=validDatabase" json:"valid_database,omitempty"`
	// List of client configuration scripts
	ConfigScript []*ConfigScriptProto `protobuf:"bytes,37,rep,name=config_script,json=configScript" json:"config_script,omitempty"`
	// Url of deauthentication server (for paying customers only)
	DeauthServerUrl *StringIdOrValueProto `protobuf:"bytes,38,opt,name=deauth_server_url,json=deauthServerUrl" json:"deauth_server_url,omitempty"`
	// Swoop parameters - if specified, will affect the amount of swoop when
	// zooming in and out.
	SwoopParameters *SwoopParamsProto `protobuf:"bytes,39,opt,name=swoop_parameters,json=swoopParameters" json:"swoop_parameters,omitempty"`
	// BBS server parameters. If not specified, default values in the client
	// will be used.
	BbsServerInfo *PostingServerProto `protobuf:"bytes,40,opt,name=bbs_server_info,json=bbsServerInfo" json:"bbs_server_info,omitempty"`
	// Data error server parameters. If not specified, default values in the
	// client will be used.
	DataErrorServerInfo *PostingServerProto `protobuf:"bytes,41,opt,name=data_error_server_info,json=dataErrorServerInfo" json:"data_error_server_info,omitempty"`
	// List of other databases accessible from this database.
	PlanetaryDatabase []*PlanetaryDatabaseProto `protobuf:"bytes,42,rep,name=planetary_database,json=planetaryDatabase" json:"planetary_database,omitempty"`
	// Log server configuration
	LogServer      *LogServerProto                    `protobuf:"bytes,43,opt,name=log_server,json=logServer" json:"log_server,omitempty"`
	AutopiaOptions *AutopiaOptionsProto               `protobuf:"bytes,44,opt,name=autopia_options,json=autopiaOptions" json:"autopia_options,omitempty"`
	SearchConfig   *EndSnippetProto_SearchConfigProto `protobuf:"bytes,54,opt,name=search_config,json=searchConfig" json:"search_config,omitempty"`
	SearchInfo     *EndSnippetProto_SearchInfoProto   `protobuf:"bytes,45,opt,name=search_info,json=searchInfo" json:"search_info,omitempty"`
	// Terrain elevation service URL. If empty, service will be unavailable.
	// This should be set to empty for EC clients to disable connection to google
	// services.
	ElevationServiceBaseUrl *string `protobuf:"bytes,46,opt,name=elevation_service_base_url,json=elevationServiceBaseUrl,def=http://maps.google.com/maps/api/elevation/" json:"elevation_service_base_url,omitempty"`
	// Length of time in ms to wait before sending query to elevation server.
	// Can be used to throttle server requests.
	ElevationProfileQueryDelay *int32 `protobuf:"varint,47,opt,name=elevation_profile_query_delay,json=elevationProfileQueryDelay,def=500" json:"elevation_profile_query_delay,omitempty"`
	// URL of webpage to go to buy Earth Pro License
	ProUpgradeUrl *StringIdOrValueProto `protobuf:"bytes,55,opt,name=pro_upgrade_url,json=proUpgradeUrl" json:"pro_upgrade_url,omitempty"`
	// URL of webpage to go for Earth Community
	EarthCommunityUrl *StringIdOrValueProto `protobuf:"bytes,56,opt,name=earth_community_url,json=earthCommunityUrl" json:"earth_community_url,omitempty"`
	// URL for Google Maps, for features like "View in Maps". As we no
	// longer assume that search is only MFE, we need an extra URL
	// parameter to tell us where to send users who want to view the
	// current location in Maps. This should be set to empty for EC
	// clients to disable connection to google services. If nothing is
	// specified, the client uses "http://maps.google.com/".
	GoogleMapsUrl *StringIdOrValueProto `protobuf:"bytes,57,opt,name=google_maps_url,json=googleMapsUrl" json:"google_maps_url,omitempty"`
	// URL for Sharing in Google+.
	// e.g. "http://www.gstatic.com/earth/sharing/static/$[hl]/index.html"
	// If empty, sharing will be unavailable. Introduced in 6.2.
	SharingUrl *StringIdOrValueProto `protobuf:"bytes,58,opt,name=sharing_url,json=sharingUrl" json:"sharing_url,omitempty"`
	// URL for the privacy policy. Use Google-wide policy, as we don't have
	// a specific Earth privacy policy.
	// sample value: http://www.google.com/intl/$[hl]/privacy/
	PrivacyPolicyUrl *StringIdOrValueProto `protobuf:"bytes,59,opt,name=privacy_policy_url,json=privacyPolicyUrl" json:"privacy_policy_url,omitempty"`
	// If true, the client will check to see if a logged-in user has signed up
	// for Google+ and grey out the menu item if not.  The standalone
	// sharebox should eventually handle this for us, at which point this should
	// be turned off forever.
	DoGplusUserCheck  *bool                              `protobuf:"varint,60,opt,name=do_gplus_user_check,json=doGplusUserCheck,def=0" json:"do_gplus_user_check,omitempty"`
	RocktreeDataProto *EndSnippetProto_RockTreeDataProto `protobuf:"bytes,61,opt,name=rocktree_data_proto,json=rocktreeDataProto" json:"rocktree_data_proto,omitempty"`
	// List of filmstrip configs.  All client versions that support the filmstrip
	// must have a filmstrip config that applies to them.  If more than one
	// filmstrip config has satisfied requirements, the first one encountered will
	// be used and the rest will be ignored.
	FilmstripConfig []*EndSnippetProto_FilmstripConfigProto `protobuf:"bytes,62,rep,name=filmstrip_config,json=filmstripConfig" json:"filmstrip_config,omitempty"`
	// If true, shows the signin button in the upper right corner.
	ShowSigninButton *bool `protobuf:"varint,63,opt,name=show_signin_button,json=showSigninButton" json:"show_signin_button,omitempty"`
	// The URL for the Google Earth Pro upsell web view in the Measure dialog.
	// (Only relevant for free clients.)
	ProMeasureUpsellUrl *StringIdOrValueProto `protobuf:"bytes,65,opt,name=pro_measure_upsell_url,json=proMeasureUpsellUrl" json:"pro_measure_upsell_url,omitempty"`
	// The URL for the Google Earth Pro upsell in the Print dialog.
	// (Only relevant for free clients.)
	ProPrintUpsellUrl *StringIdOrValueProto          `protobuf:"bytes,66,opt,name=pro_print_upsell_url,json=proPrintUpsellUrl" json:"pro_print_upsell_url,omitempty"`
	StarDataProto     *EndSnippetProto_StarDataProto `protobuf:"bytes,67,opt,name=star_data_proto,json=starDataProto" json:"star_data_proto,omitempty"`
	// The URL for the gFeedback dialog.  If not specified, the feedback feature
	// will be disabled.
	FeedbackUrl *StringIdOrValueProto `protobuf:"bytes,68,opt,name=feedback_url,json=feedbackUrl" json:"feedback_url,omitempty"`
	// The URL the client should use to perform an OAuth2 login.
	Oauth2LoginUrl       *StringIdOrValueProto `protobuf:"bytes,69,opt,name=oauth2_login_url,json=oauth2LoginUrl" json:"oauth2_login_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EndSnippetProto) Reset()         { *m = EndSnippetProto{} }
func (m *EndSnippetProto) String() string { return proto.CompactTextString(m) }
func (*EndSnippetProto) ProtoMessage()    {}
func (*EndSnippetProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28}
}
func (m *EndSnippetProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto.Unmarshal(m, b)
}
func (m *EndSnippetProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto.Merge(dst, src)
}
func (m *EndSnippetProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto.Size(m)
}
func (m *EndSnippetProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto proto.InternalMessageInfo

const Default_EndSnippetProto_MfeLangParam string = "hl=$[hl]"
const Default_EndSnippetProto_ReverseGeocoderProtocolVersion int32 = 3
const Default_EndSnippetProto_SkyDatabaseIsAvailable bool = true
const Default_EndSnippetProto_NumStartUpTips int32 = 17
const Default_EndSnippetProto_HideUserData bool = false
const Default_EndSnippetProto_UseGeLogo bool = true
const Default_EndSnippetProto_DioramaDefaultColor uint32 = 4291281607
const Default_EndSnippetProto_ElevationServiceBaseUrl string = "http://maps.google.com/maps/api/elevation/"
const Default_EndSnippetProto_ElevationProfileQueryDelay int32 = 500
const Default_EndSnippetProto_DoGplusUserCheck bool = false

func (m *EndSnippetProto) GetModel() *PlanetModelProto {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *EndSnippetProto) GetAuthServerUrl() *StringIdOrValueProto {
	if m != nil {
		return m.AuthServerUrl
	}
	return nil
}

func (m *EndSnippetProto) GetDisableAuthentication() bool {
	if m != nil && m.DisableAuthentication != nil {
		return *m.DisableAuthentication
	}
	return false
}

func (m *EndSnippetProto) GetMfeDomains() []*MfeDomainFeaturesProto {
	if m != nil {
		return m.MfeDomains
	}
	return nil
}

func (m *EndSnippetProto) GetMfeLangParam() string {
	if m != nil && m.MfeLangParam != nil {
		return *m.MfeLangParam
	}
	return Default_EndSnippetProto_MfeLangParam
}

func (m *EndSnippetProto) GetAdsUrlPatterns() string {
	if m != nil && m.AdsUrlPatterns != nil {
		return *m.AdsUrlPatterns
	}
	return ""
}

func (m *EndSnippetProto) GetReverseGeocoderUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ReverseGeocoderUrl
	}
	return nil
}

func (m *EndSnippetProto) GetReverseGeocoderProtocolVersion() int32 {
	if m != nil && m.ReverseGeocoderProtocolVersion != nil {
		return *m.ReverseGeocoderProtocolVersion
	}
	return Default_EndSnippetProto_ReverseGeocoderProtocolVersion
}

func (m *EndSnippetProto) GetSkyDatabaseIsAvailable() bool {
	if m != nil && m.SkyDatabaseIsAvailable != nil {
		return *m.SkyDatabaseIsAvailable
	}
	return Default_EndSnippetProto_SkyDatabaseIsAvailable
}

func (m *EndSnippetProto) GetSkyDatabaseUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SkyDatabaseUrl
	}
	return nil
}

func (m *EndSnippetProto) GetDefaultWebPageIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.DefaultWebPageIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetNumStartUpTips() int32 {
	if m != nil && m.NumStartUpTips != nil {
		return *m.NumStartUpTips
	}
	return Default_EndSnippetProto_NumStartUpTips
}

func (m *EndSnippetProto) GetStartUpTipsUrl() *StringIdOrValueProto {
	if m != nil {
		return m.StartUpTipsUrl
	}
	return nil
}

func (m *EndSnippetProto) GetNumProStartUpTips() int32 {
	if m != nil && m.NumProStartUpTips != nil {
		return *m.NumProStartUpTips
	}
	return 0
}

func (m *EndSnippetProto) GetProStartUpTipsUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ProStartUpTipsUrl
	}
	return nil
}

func (m *EndSnippetProto) GetStartupTipsIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.StartupTipsIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetUserGuideIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.UserGuideIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSupportCenterIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SupportCenterIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetBusinessListingIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.BusinessListingIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSupportAnswerIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SupportAnswerIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSupportTopicIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SupportTopicIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSupportRequestIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SupportRequestIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetEarthIntlUrl() *StringIdOrValueProto {
	if m != nil {
		return m.EarthIntlUrl
	}
	return nil
}

func (m *EndSnippetProto) GetAddContentUrl() *StringIdOrValueProto {
	if m != nil {
		return m.AddContentUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSketchupNotInstalledUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SketchupNotInstalledUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSketchupErrorUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SketchupErrorUrl
	}
	return nil
}

func (m *EndSnippetProto) GetFreeLicenseUrl() *StringIdOrValueProto {
	if m != nil {
		return m.FreeLicenseUrl
	}
	return nil
}

func (m *EndSnippetProto) GetProLicenseUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ProLicenseUrl
	}
	return nil
}

func (m *EndSnippetProto) GetTutorialUrl() *StringIdOrValueProto {
	if m != nil {
		return m.TutorialUrl
	}
	return nil
}

func (m *EndSnippetProto) GetKeyboardShortcutsUrl() *StringIdOrValueProto {
	if m != nil {
		return m.KeyboardShortcutsUrl
	}
	return nil
}

func (m *EndSnippetProto) GetReleaseNotesUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ReleaseNotesUrl
	}
	return nil
}

func (m *EndSnippetProto) GetHideUserData() bool {
	if m != nil && m.HideUserData != nil {
		return *m.HideUserData
	}
	return Default_EndSnippetProto_HideUserData
}

func (m *EndSnippetProto) GetUseGeLogo() bool {
	if m != nil && m.UseGeLogo != nil {
		return *m.UseGeLogo
	}
	return Default_EndSnippetProto_UseGeLogo
}

func (m *EndSnippetProto) GetDioramaDescriptionUrlBase() *StringIdOrValueProto {
	if m != nil {
		return m.DioramaDescriptionUrlBase
	}
	return nil
}

func (m *EndSnippetProto) GetDioramaDefaultColor() uint32 {
	if m != nil && m.DioramaDefaultColor != nil {
		return *m.DioramaDefaultColor
	}
	return Default_EndSnippetProto_DioramaDefaultColor
}

func (m *EndSnippetProto) GetDioramaBlacklistUrl() *StringIdOrValueProto {
	if m != nil {
		return m.DioramaBlacklistUrl
	}
	return nil
}

func (m *EndSnippetProto) GetClientOptions() *ClientOptionsProto {
	if m != nil {
		return m.ClientOptions
	}
	return nil
}

func (m *EndSnippetProto) GetFetchingOptions() *FetchingOptionsProto {
	if m != nil {
		return m.FetchingOptions
	}
	return nil
}

func (m *EndSnippetProto) GetTimeMachineOptions() *TimeMachineOptionsProto {
	if m != nil {
		return m.TimeMachineOptions
	}
	return nil
}

func (m *EndSnippetProto) GetCsiOptions() *CSIOptionsProto {
	if m != nil {
		return m.CsiOptions
	}
	return nil
}

func (m *EndSnippetProto) GetSearchTab() []*SearchTabProto {
	if m != nil {
		return m.SearchTab
	}
	return nil
}

func (m *EndSnippetProto) GetCobrandInfo() []*CobrandProto {
	if m != nil {
		return m.CobrandInfo
	}
	return nil
}

func (m *EndSnippetProto) GetValidDatabase() []*DatabaseDescriptionProto {
	if m != nil {
		return m.ValidDatabase
	}
	return nil
}

func (m *EndSnippetProto) GetConfigScript() []*ConfigScriptProto {
	if m != nil {
		return m.ConfigScript
	}
	return nil
}

func (m *EndSnippetProto) GetDeauthServerUrl() *StringIdOrValueProto {
	if m != nil {
		return m.DeauthServerUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSwoopParameters() *SwoopParamsProto {
	if m != nil {
		return m.SwoopParameters
	}
	return nil
}

func (m *EndSnippetProto) GetBbsServerInfo() *PostingServerProto {
	if m != nil {
		return m.BbsServerInfo
	}
	return nil
}

func (m *EndSnippetProto) GetDataErrorServerInfo() *PostingServerProto {
	if m != nil {
		return m.DataErrorServerInfo
	}
	return nil
}

func (m *EndSnippetProto) GetPlanetaryDatabase() []*PlanetaryDatabaseProto {
	if m != nil {
		return m.PlanetaryDatabase
	}
	return nil
}

func (m *EndSnippetProto) GetLogServer() *LogServerProto {
	if m != nil {
		return m.LogServer
	}
	return nil
}

func (m *EndSnippetProto) GetAutopiaOptions() *AutopiaOptionsProto {
	if m != nil {
		return m.AutopiaOptions
	}
	return nil
}

func (m *EndSnippetProto) GetSearchConfig() *EndSnippetProto_SearchConfigProto {
	if m != nil {
		return m.SearchConfig
	}
	return nil
}

func (m *EndSnippetProto) GetSearchInfo() *EndSnippetProto_SearchInfoProto {
	if m != nil {
		return m.SearchInfo
	}
	return nil
}

func (m *EndSnippetProto) GetElevationServiceBaseUrl() string {
	if m != nil && m.ElevationServiceBaseUrl != nil {
		return *m.ElevationServiceBaseUrl
	}
	return Default_EndSnippetProto_ElevationServiceBaseUrl
}

func (m *EndSnippetProto) GetElevationProfileQueryDelay() int32 {
	if m != nil && m.ElevationProfileQueryDelay != nil {
		return *m.ElevationProfileQueryDelay
	}
	return Default_EndSnippetProto_ElevationProfileQueryDelay
}

func (m *EndSnippetProto) GetProUpgradeUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ProUpgradeUrl
	}
	return nil
}

func (m *EndSnippetProto) GetEarthCommunityUrl() *StringIdOrValueProto {
	if m != nil {
		return m.EarthCommunityUrl
	}
	return nil
}

func (m *EndSnippetProto) GetGoogleMapsUrl() *StringIdOrValueProto {
	if m != nil {
		return m.GoogleMapsUrl
	}
	return nil
}

func (m *EndSnippetProto) GetSharingUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SharingUrl
	}
	return nil
}

func (m *EndSnippetProto) GetPrivacyPolicyUrl() *StringIdOrValueProto {
	if m != nil {
		return m.PrivacyPolicyUrl
	}
	return nil
}

func (m *EndSnippetProto) GetDoGplusUserCheck() bool {
	if m != nil && m.DoGplusUserCheck != nil {
		return *m.DoGplusUserCheck
	}
	return Default_EndSnippetProto_DoGplusUserCheck
}

func (m *EndSnippetProto) GetRocktreeDataProto() *EndSnippetProto_RockTreeDataProto {
	if m != nil {
		return m.RocktreeDataProto
	}
	return nil
}

func (m *EndSnippetProto) GetFilmstripConfig() []*EndSnippetProto_FilmstripConfigProto {
	if m != nil {
		return m.FilmstripConfig
	}
	return nil
}

func (m *EndSnippetProto) GetShowSigninButton() bool {
	if m != nil && m.ShowSigninButton != nil {
		return *m.ShowSigninButton
	}
	return false
}

func (m *EndSnippetProto) GetProMeasureUpsellUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ProMeasureUpsellUrl
	}
	return nil
}

func (m *EndSnippetProto) GetProPrintUpsellUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ProPrintUpsellUrl
	}
	return nil
}

func (m *EndSnippetProto) GetStarDataProto() *EndSnippetProto_StarDataProto {
	if m != nil {
		return m.StarDataProto
	}
	return nil
}

func (m *EndSnippetProto) GetFeedbackUrl() *StringIdOrValueProto {
	if m != nil {
		return m.FeedbackUrl
	}
	return nil
}

func (m *EndSnippetProto) GetOauth2LoginUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Oauth2LoginUrl
	}
	return nil
}

// Search server configuration for Earth 6.1 and higher.  This obsoletes
// search_info and the SearchInfoProto message, and also obsoletes search_tab
// and SearchTabProto.
type EndSnippetProto_SearchConfigProto struct {
	// One or more search servers.  In the consumer Google Earth client, there
	// is only one of these in the KH database, and it's Google Maps.
	// Enterprise customers can add extra servers to have them appear in a
	// tab-like UI above the search field.  For the time being, we will also
	// convert legacy SearchTabProtos into SearchServers as best we can.
	SearchServer []*EndSnippetProto_SearchConfigProto_SearchServer `protobuf:"bytes,1,rep,name=search_server,json=searchServer" json:"search_server,omitempty"`
	// List of onebox services. This field is repeated to support requirements.
	// The client will select the first onebox service whose requirements allow
	// it to connect. All others will be ignored.
	OneboxService []*EndSnippetProto_SearchConfigProto_OneboxServiceProto `protobuf:"bytes,2,rep,name=onebox_service,json=oneboxService" json:"onebox_service,omitempty"`
	// URL of a page that will be shown when a KML search is performed.  This
	// page should have JavaScript that reads the KML from the environment and
	// renders it as HTML, and also performs onebox and searchlet searches if
	// applicable.  The URL should be fully encoded, and can use $[hl] and
	// friends if necessary.
	KmlSearchUrl *StringIdOrValueProto `protobuf:"bytes,3,opt,name=kml_search_url,json=kmlSearchUrl" json:"kml_search_url,omitempty"`
	// URL of a page that will be shown when KML is rendered in the search
	// panel.  This page should have JavaScript that reads the KML from the
	// environment and renders it as HTML, but should NOT perform onebox or
	// searchlet searches.  The URL should be fully encoded, and can use $[hl]
	// and friends if necessary.
	KmlRenderUrl *StringIdOrValueProto `protobuf:"bytes,4,opt,name=kml_render_url,json=kmlRenderUrl" json:"kml_render_url,omitempty"`
	// URL of a page that will be shown when the search history is requested.
	// This page should have JavaScript that reads the search history from
	// the client and renders it as HTML.  The URL should be fully encoded,
	// and can use $[hl] and friends if necessary.
	SearchHistoryUrl *StringIdOrValueProto `protobuf:"bytes,6,opt,name=search_history_url,json=searchHistoryUrl" json:"search_history_url,omitempty"`
	// URL of a page that will be displayed if a network error or other local
	// error occurs while performing a search.  This might be an error for a
	// local geocode while in offline mode, a connection error while trying to
	// connect to MFE, or some other error where we can't get an error message
	// from the server.  (Obviously this page should be cached locally, or it's
	// not terribly useful.)  The URL should be fully encoded, and can use $[hl]
	// and friends if necessary.
	ErrorPageUrl         *StringIdOrValueProto `protobuf:"bytes,5,opt,name=error_page_url,json=errorPageUrl" json:"error_page_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EndSnippetProto_SearchConfigProto) Reset()         { *m = EndSnippetProto_SearchConfigProto{} }
func (m *EndSnippetProto_SearchConfigProto) String() string { return proto.CompactTextString(m) }
func (*EndSnippetProto_SearchConfigProto) ProtoMessage()    {}
func (*EndSnippetProto_SearchConfigProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 0}
}
func (m *EndSnippetProto_SearchConfigProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_SearchConfigProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_SearchConfigProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto.Merge(dst, src)
}
func (m *EndSnippetProto_SearchConfigProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto.Size(m)
}
func (m *EndSnippetProto_SearchConfigProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_SearchConfigProto proto.InternalMessageInfo

func (m *EndSnippetProto_SearchConfigProto) GetSearchServer() []*EndSnippetProto_SearchConfigProto_SearchServer {
	if m != nil {
		return m.SearchServer
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto) GetOneboxService() []*EndSnippetProto_SearchConfigProto_OneboxServiceProto {
	if m != nil {
		return m.OneboxService
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto) GetKmlSearchUrl() *StringIdOrValueProto {
	if m != nil {
		return m.KmlSearchUrl
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto) GetKmlRenderUrl() *StringIdOrValueProto {
	if m != nil {
		return m.KmlRenderUrl
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto) GetSearchHistoryUrl() *StringIdOrValueProto {
	if m != nil {
		return m.SearchHistoryUrl
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto) GetErrorPageUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ErrorPageUrl
	}
	return nil
}

// Represents a search server that returns XML or KML search results.
// There can be any number of these.
type EndSnippetProto_SearchConfigProto_SearchServer struct {
	// The name of the search service.  This will be shown to the user if
	// (and only if) there is more than one primary_search_server defined.
	// To avoid bloating the UI, it should be as short as possible.
	Name *StringIdOrValueProto `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The server URL, including protocol, port, and path.
	// This URL must be fully encoded and use only ASCII characters.
	// The query parameters will be added automatically, and should not be
	// specified here.  You can use $[hl] and friends here if necessary, but
	// the hl and gl parameters will be appended to the query anyway.
	// Example: http://maps.google.com/local
	Url *StringIdOrValueProto `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// The format in which this server will return results.
	Type *EndSnippetProto_SearchConfigProto_SearchServer_ResultType `protobuf:"varint,3,opt,name=type,enum=keyhole.dbroot.EndSnippetProto_SearchConfigProto_SearchServer_ResultType,def=0" json:"type,omitempty"`
	// If type is RESULT_TYPE_XML, the XML document received from the server
	// will be fed through the XSLT stylesheet at this (fully encoded,
	// ASCII-only) URL to generate the HTML that will be shown in the search
	// results view.  (If type is RESULT_TYPE_KML, the HTML will be generated
	// using JavaScript.) You can use $[hl] and friends here if necessary.
	HtmlTransformUrl *StringIdOrValueProto `protobuf:"bytes,4,opt,name=html_transform_url,json=htmlTransformUrl" json:"html_transform_url,omitempty"`
	// If type is RESULT_TYPE_XML, the XML document received from the server
	// will be fed through the XSLT stylesheet at this (fully-encoded,
	// ASCII-only) URL to generate the KML that will be shown in the 3D view.
	// (If type is RESULT_TYPE_KML, the KML returned from the server will, of
	// course, be used directly.) You can use $[hl] and friends here if
	// necessary.
	KmlTransformUrl *StringIdOrValueProto `protobuf:"bytes,5,opt,name=kml_transform_url,json=kmlTransformUrl" json:"kml_transform_url,omitempty"`
	// If specified, info about the supplemental UI.  If omitted, no
	// supplemental UI button will be shown.
	SupplementalUi *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi `protobuf:"bytes,6,opt,name=supplemental_ui,json=supplementalUi" json:"supplemental_ui,omitempty"`
	// If specified, one or more suggested searches for this server.  Could
	// be something like "pizza near nyc" or "epsilon eridani".  When the
	// search UI is shown in the client, one of these suggestions will be
	// randomly selected and shown beneath the search field.
	Suggestion []*StringIdOrValueProto `protobuf:"bytes,9,rep,name=suggestion" json:"suggestion,omitempty"`
	// List of searchlets that should be queried. Only searchlets that match
	// the version number of the client will be queried, and only those that
	// return non-empty results will be displayed.
	Searchlet []*EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto `protobuf:"bytes,7,rep,name=searchlet" json:"searchlet,omitempty"`
	// Optional requirements. The server will only be loaded if requirements
	// are met. This can be used to selectively exclude a server based on
	// client capabilities. See definition of RequirementProto for more
	// details.
	Requirements *RequirementProto `protobuf:"bytes,8,opt,name=requirements" json:"requirements,omitempty"`
	// The URL of a server, conforming to the Maps Suggest HTTP API, that
	// should be used to provide search suggestions for queries to this
	// server. If not provided, suggestions will be derived from local history
	// only.
	SuggestServer        *StringIdOrValueProto `protobuf:"bytes,10,opt,name=suggest_server,json=suggestServer" json:"suggest_server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) Reset() {
	*m = EndSnippetProto_SearchConfigProto_SearchServer{}
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer) String() string {
	return proto.CompactTextString(m)
}
func (*EndSnippetProto_SearchConfigProto_SearchServer) ProtoMessage() {}
func (*EndSnippetProto_SearchConfigProto_SearchServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 0, 0}
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer.Unmarshal(m, b)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_SearchConfigProto_SearchServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer.Merge(dst, src)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer.Size(m)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer proto.InternalMessageInfo

const Default_EndSnippetProto_SearchConfigProto_SearchServer_Type EndSnippetProto_SearchConfigProto_SearchServer_ResultType = EndSnippetProto_SearchConfigProto_SearchServer_RESULT_TYPE_KML

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetName() *StringIdOrValueProto {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetType() EndSnippetProto_SearchConfigProto_SearchServer_ResultType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_EndSnippetProto_SearchConfigProto_SearchServer_Type
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetHtmlTransformUrl() *StringIdOrValueProto {
	if m != nil {
		return m.HtmlTransformUrl
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetKmlTransformUrl() *StringIdOrValueProto {
	if m != nil {
		return m.KmlTransformUrl
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetSupplementalUi() *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi {
	if m != nil {
		return m.SupplementalUi
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetSuggestion() []*StringIdOrValueProto {
	if m != nil {
		return m.Suggestion
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetSearchlet() []*EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto {
	if m != nil {
		return m.Searchlet
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetRequirements() *RequirementProto {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer) GetSuggestServer() *StringIdOrValueProto {
	if m != nil {
		return m.SuggestServer
	}
	return nil
}

// Information about the supplemental UI, which shows an HTML page that
// can be used for rich search entry UI.
type EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi struct {
	// If specified, a button will appear below the search field that, when
	// clicked, will load this URL in the search panel.  The page can
	// perform search requests through a JavaScript API.  If omitted, the
	// button will not be shown. You can use $[hl] and friends here if
	// necessary.
	Url *StringIdOrValueProto `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// If specified, the label for the supplemental UI.
	Label *StringIdOrValueProto `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// The height, in pixels, that will be allocated in the search panel for
	// the supplemental UI.  This includes the height of the search panel
	// itself.
	Height               *int32   `protobuf:"varint,3,opt,name=height,def=160" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) Reset() {
	*m = EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi{}
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) String() string {
	return proto.CompactTextString(m)
}
func (*EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) ProtoMessage() {}
func (*EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 0, 0, 0}
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi.Unmarshal(m, b)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi.Merge(dst, src)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi.Size(m)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi proto.InternalMessageInfo

const Default_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi_Height int32 = 160

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) GetLabel() *StringIdOrValueProto {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return Default_EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi_Height
}

// Searchlet configuration.
type EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto struct {
	// The URL of the searchlet service, including protocol, port, and path.
	// This URL must be fully encoded and use only ASCII characters.
	// The query parameters will be added automatically, and should not be
	// specified here. You can, however, use $[hl] and friends here in the
	// URL path if necessary.
	Url *StringIdOrValueProto `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// The name of this searchlet, which will be shown in its results.
	Name *StringIdOrValueProto `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// optional requirements - searchlet will only be used if requirements
	// are met. This can be used to selectively exclude a searchlet based on
	// client capabilities. See definition of RequirementProto for more
	// details.
	Requirements         *RequirementProto `protobuf:"bytes,3,opt,name=requirements" json:"requirements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) Reset() {
	*m = EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto{}
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) String() string {
	return proto.CompactTextString(m)
}
func (*EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) ProtoMessage() {}
func (*EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 0, 0, 1}
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto.Merge(dst, src)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto.Size(m)
}
func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto proto.InternalMessageInfo

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) GetName() *StringIdOrValueProto {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto) GetRequirements() *RequirementProto {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// Configuration for the onebox service.
type EndSnippetProto_SearchConfigProto_OneboxServiceProto struct {
	// The URL of the onebox service, including protocol, port, and path.
	// This URL must be fully encoded and use only ASCII characters.  It can
	// use $[hl] and friends here if necessary.
	ServiceUrl *StringIdOrValueProto `protobuf:"bytes,1,opt,name=service_url,json=serviceUrl" json:"service_url,omitempty"`
	// optional requirements - onebox service will only be used if
	// requirements are met. This can be used to selectively choose a onebox
	// service based on client capabilities. See definition of
	// RequirementProto for more details.
	Requirements         *RequirementProto `protobuf:"bytes,2,opt,name=requirements" json:"requirements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) Reset() {
	*m = EndSnippetProto_SearchConfigProto_OneboxServiceProto{}
}
func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) String() string {
	return proto.CompactTextString(m)
}
func (*EndSnippetProto_SearchConfigProto_OneboxServiceProto) ProtoMessage() {}
func (*EndSnippetProto_SearchConfigProto_OneboxServiceProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 0, 1}
}
func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_OneboxServiceProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_OneboxServiceProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_SearchConfigProto_OneboxServiceProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_OneboxServiceProto.Merge(dst, src)
}
func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_SearchConfigProto_OneboxServiceProto.Size(m)
}
func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_SearchConfigProto_OneboxServiceProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_SearchConfigProto_OneboxServiceProto proto.InternalMessageInfo

func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) GetServiceUrl() *StringIdOrValueProto {
	if m != nil {
		return m.ServiceUrl
	}
	return nil
}

func (m *EndSnippetProto_SearchConfigProto_OneboxServiceProto) GetRequirements() *RequirementProto {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// Search server configuration.  Deprecated and unused since Earth 6.1.
type EndSnippetProto_SearchInfoProto struct {
	// Default search server (MFE) URL.
	// Note that this can be reconfigured on a per-country basis with
	// MfeDomainFeaturesProto.
	DefaultUrl *string `protobuf:"bytes,1,opt,name=default_url,json=defaultUrl,def=http://maps.google.com/maps" json:"default_url,omitempty"`
	// Query parameter to use for queries on maps server.
	GeocodeParam         *string  `protobuf:"bytes,2,opt,name=geocode_param,json=geocodeParam,def=q" json:"geocode_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndSnippetProto_SearchInfoProto) Reset()         { *m = EndSnippetProto_SearchInfoProto{} }
func (m *EndSnippetProto_SearchInfoProto) String() string { return proto.CompactTextString(m) }
func (*EndSnippetProto_SearchInfoProto) ProtoMessage()    {}
func (*EndSnippetProto_SearchInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 1}
}
func (m *EndSnippetProto_SearchInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_SearchInfoProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_SearchInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_SearchInfoProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_SearchInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_SearchInfoProto.Merge(dst, src)
}
func (m *EndSnippetProto_SearchInfoProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_SearchInfoProto.Size(m)
}
func (m *EndSnippetProto_SearchInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_SearchInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_SearchInfoProto proto.InternalMessageInfo

const Default_EndSnippetProto_SearchInfoProto_DefaultUrl string = "http://maps.google.com/maps"
const Default_EndSnippetProto_SearchInfoProto_GeocodeParam string = "q"

func (m *EndSnippetProto_SearchInfoProto) GetDefaultUrl() string {
	if m != nil && m.DefaultUrl != nil {
		return *m.DefaultUrl
	}
	return Default_EndSnippetProto_SearchInfoProto_DefaultUrl
}

func (m *EndSnippetProto_SearchInfoProto) GetGeocodeParam() string {
	if m != nil && m.GeocodeParam != nil {
		return *m.GeocodeParam
	}
	return Default_EndSnippetProto_SearchInfoProto_GeocodeParam
}

// Data for the client to connect to a server for RockTree (EOS3D) data.
type EndSnippetProto_RockTreeDataProto struct {
	Url                  *StringIdOrValueProto `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EndSnippetProto_RockTreeDataProto) Reset()         { *m = EndSnippetProto_RockTreeDataProto{} }
func (m *EndSnippetProto_RockTreeDataProto) String() string { return proto.CompactTextString(m) }
func (*EndSnippetProto_RockTreeDataProto) ProtoMessage()    {}
func (*EndSnippetProto_RockTreeDataProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 2}
}
func (m *EndSnippetProto_RockTreeDataProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_RockTreeDataProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_RockTreeDataProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_RockTreeDataProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_RockTreeDataProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_RockTreeDataProto.Merge(dst, src)
}
func (m *EndSnippetProto_RockTreeDataProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_RockTreeDataProto.Size(m)
}
func (m *EndSnippetProto_RockTreeDataProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_RockTreeDataProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_RockTreeDataProto proto.InternalMessageInfo

func (m *EndSnippetProto_RockTreeDataProto) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

type EndSnippetProto_FilmstripConfigProto struct {
	// Client requirements for using the templates listed below.
	Requirements *RequirementProto `protobuf:"bytes,1,opt,name=requirements" json:"requirements,omitempty"`
	// Template for the alleycat server URL that should be queried for the
	// filmstrip items at a given viewport.
	//
	// Template can be different depending on the user agent or client version.
	// For example, Linux -7.0 can use default config with only Earth Tours,
	// and Android 7.2- can use new URL with panoramas. Add new FilmstripConfig
	// message to the snippet along with user agent / version requirement to
	// use non-default URL.
	//
	// Android example: go/filmstripdbrootconfig
	//
	// Server API: go/getbestview
	//
	// For this template, the following properties apply:
	//   - The URL *must* be absolute.
	//   - $[max] will be replaced with the maximum number of results (specified
	//         by the client implementation).
	//   - $[focus] will be replaced with the current focus point as a comma-
	//         separated lat-lon pair.
	//   - $[polygon] will be replaced with a comma-separated list of
	//         comma-separated lat-lon pairs representing the viewport.
	//
	// Examples:
	//     Current API:
	//     http://cbk0.google.com/cbk?output=polygon&it=8:$[max]
	//         &polygon=$[polygon]&ll=$[focus]&rank=closest
	//
	//     Proposed example future API:
	//      1. 40% of Earth Tours, 40% of UGC Panos, 20% of Art Project
	//      http://cbk1.google.com/cbk?output=polygon&cb_client=earth
	//        &it=8:$[max:0.4],11:$[max:0.4],4:$[max:0.2]&polygon=$[polygon]
	//        &ll=$[focus]&rank=centered
	//
	//      2. Best $[max] items in view of either Earth Tour or UGC Pano type
	//         (types are crossranked, number of each type is variable).
	//      http://cbk1.google.com/cbk?output=polygon&cb_client=earth
	//        &it=8:1,11:1&polygon=$[polygon]
	//        &ll=$[focus]&rank=centered&rs=$[max]
	AlleycatUrlTemplate *StringIdOrValueProto `protobuf:"bytes,2,opt,name=alleycat_url_template,json=alleycatUrlTemplate" json:"alleycat_url_template,omitempty"`
	// Secondary alleycat server URL template.  This will be used during
	// viewport fallback.
	// For this template, the following properties apply:
	//   - The URL *must* be absolute.
	//   - $[max] will be replaced with the maximum number of results (specified
	//         by the client implementation).
	//   - $[focus] will be replaced with the current focus point as a comma-
	//         separated lat-lon pair.
	//
	// Examples:
	//     Current API:
	//     http://cbk0.google.com/cbk?output=polygon&it=8:$[max]
	//         &radius=120000&rank=closest
	//
	//     Proposed future API:
	//     http://cbk0.google.com/cbk?output=polygon&it=8:5,14:100&mix=1
	//         &max=$[max]&radius=120000&rank=closest
	FallbackAlleycatUrlTemplate *StringIdOrValueProto `protobuf:"bytes,9,opt,name=fallback_alleycat_url_template,json=fallbackAlleycatUrlTemplate" json:"fallback_alleycat_url_template,omitempty"`
	// Template for the URL at which the metadata for a given ID can be found.
	// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/json/$[id].json
	// DEPRECATED. Used by clients that get config from default dbroot snippet.
	// See AlleycatImageryTypeProto imagery_types below for recommended format.
	MetadataUrlTemplate *StringIdOrValueProto `protobuf:"bytes,3,opt,name=metadata_url_template,json=metadataUrlTemplate" json:"metadata_url_template,omitempty"`
	// Template for the URL at which the thumbnail for a given ID can be found.
	// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/thumbnails/$[id].jpg
	// DEPRECATED. Used by clients that get config from default dbroot snippet.
	// See AlleycatImageryTypeProto imagery_types below for recommended format.
	ThumbnailUrlTemplate *StringIdOrValueProto `protobuf:"bytes,4,opt,name=thumbnail_url_template,json=thumbnailUrlTemplate" json:"thumbnail_url_template,omitempty"`
	// Template for the URL at which the KML for a given ID can be found.
	// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/tours/$[id]_$[hl].kml
	// DEPRECATED. Used by clients that get config from default dbroot snippet.
	// See AlleycatImageryTypeProto imagery_types below for recommended format.
	KmlUrlTemplate *StringIdOrValueProto `protobuf:"bytes,5,opt,name=kml_url_template,json=kmlUrlTemplate" json:"kml_url_template,omitempty"`
	// URL at which the featured tours JSON file can be found.
	// Ex: http://mw1.google.com/mw-earth-vectordb/tourguide/featured.json
	// Note: Since this is not a template, $[id] will not be replaced by
	// anything, but $[hl] will still be resolved as above.
	FeaturedToursUrl *StringIdOrValueProto `protobuf:"bytes,6,opt,name=featured_tours_url,json=featuredToursUrl" json:"featured_tours_url,omitempty"`
	// Whether to perform client-side viewport fallback.
	EnableViewportFallback *bool `protobuf:"varint,7,opt,name=enable_viewport_fallback,json=enableViewportFallback" json:"enable_viewport_fallback,omitempty"`
	// DEPRECATED. Unused. Specify fallback_alleycat_url_template instead.
	ViewportFallbackDistance *uint32 `protobuf:"varint,8,opt,name=viewport_fallback_distance,json=viewportFallbackDistance" json:"viewport_fallback_distance,omitempty"`
	// See comments and example above.
	ImageryType          []*EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto `protobuf:"bytes,10,rep,name=imagery_type,json=imageryType" json:"imagery_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *EndSnippetProto_FilmstripConfigProto) Reset()         { *m = EndSnippetProto_FilmstripConfigProto{} }
func (m *EndSnippetProto_FilmstripConfigProto) String() string { return proto.CompactTextString(m) }
func (*EndSnippetProto_FilmstripConfigProto) ProtoMessage()    {}
func (*EndSnippetProto_FilmstripConfigProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 3}
}
func (m *EndSnippetProto_FilmstripConfigProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_FilmstripConfigProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_FilmstripConfigProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_FilmstripConfigProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_FilmstripConfigProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_FilmstripConfigProto.Merge(dst, src)
}
func (m *EndSnippetProto_FilmstripConfigProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_FilmstripConfigProto.Size(m)
}
func (m *EndSnippetProto_FilmstripConfigProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_FilmstripConfigProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_FilmstripConfigProto proto.InternalMessageInfo

func (m *EndSnippetProto_FilmstripConfigProto) GetRequirements() *RequirementProto {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetAlleycatUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.AlleycatUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetFallbackAlleycatUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.FallbackAlleycatUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetMetadataUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.MetadataUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetThumbnailUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.ThumbnailUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetKmlUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.KmlUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetFeaturedToursUrl() *StringIdOrValueProto {
	if m != nil {
		return m.FeaturedToursUrl
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto) GetEnableViewportFallback() bool {
	if m != nil && m.EnableViewportFallback != nil {
		return *m.EnableViewportFallback
	}
	return false
}

func (m *EndSnippetProto_FilmstripConfigProto) GetViewportFallbackDistance() uint32 {
	if m != nil && m.ViewportFallbackDistance != nil {
		return *m.ViewportFallbackDistance
	}
	return 0
}

func (m *EndSnippetProto_FilmstripConfigProto) GetImageryType() []*EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto {
	if m != nil {
		return m.ImageryType
	}
	return nil
}

// Each alleycat imagery type supported by Earth filmstrip needs to be
// described. Some imagery types might have one or more empty URL
// templates, meaning no additional request needs to be made to handle
// image of that type.
//
// Example use: go/filmstripdbrootconfig
type EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto struct {
	// Alleycat Imagery type id. E.g. 8 for Earth Tour.
	// Reference: go/bestview/imagery-types
	ImageryTypeId *int32 `protobuf:"varint,1,opt,name=imagery_type_id,json=imageryTypeId" json:"imagery_type_id,omitempty"`
	// Imagery Type label. E.g. "Earth Tour". Untranslated - don't show to
	// user. Currently only used for developers' information.
	ImageryTypeLabel *string `protobuf:"bytes,2,opt,name=imagery_type_label,json=imageryTypeLabel" json:"imagery_type_label,omitempty"`
	// URL template for fetching additional metadata. "" if not needed.
	MetadataUrlTemplate *StringIdOrValueProto `protobuf:"bytes,3,opt,name=metadata_url_template,json=metadataUrlTemplate" json:"metadata_url_template,omitempty"`
	// URL template for fetching thumbnail. "" if not needed.
	ThumbnailUrlTemplate *StringIdOrValueProto `protobuf:"bytes,4,opt,name=thumbnail_url_template,json=thumbnailUrlTemplate" json:"thumbnail_url_template,omitempty"`
	// URL template for fetching KML. "" if not needed
	// (e.g. if KML is generated on client side).
	KmlUrlTemplate       *StringIdOrValueProto `protobuf:"bytes,5,opt,name=kml_url_template,json=kmlUrlTemplate" json:"kml_url_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) Reset() {
	*m = EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto{}
}
func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) String() string {
	return proto.CompactTextString(m)
}
func (*EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) ProtoMessage() {}
func (*EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 3, 0}
}
func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto.Merge(dst, src)
}
func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto.Size(m)
}
func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto proto.InternalMessageInfo

func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) GetImageryTypeId() int32 {
	if m != nil && m.ImageryTypeId != nil {
		return *m.ImageryTypeId
	}
	return 0
}

func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) GetImageryTypeLabel() string {
	if m != nil && m.ImageryTypeLabel != nil {
		return *m.ImageryTypeLabel
	}
	return ""
}

func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) GetMetadataUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.MetadataUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) GetThumbnailUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.ThumbnailUrlTemplate
	}
	return nil
}

func (m *EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto) GetKmlUrlTemplate() *StringIdOrValueProto {
	if m != nil {
		return m.KmlUrlTemplate
	}
	return nil
}

// Data for the client to connect to a server for star data.
type EndSnippetProto_StarDataProto struct {
	Url                  *StringIdOrValueProto `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EndSnippetProto_StarDataProto) Reset()         { *m = EndSnippetProto_StarDataProto{} }
func (m *EndSnippetProto_StarDataProto) String() string { return proto.CompactTextString(m) }
func (*EndSnippetProto_StarDataProto) ProtoMessage()    {}
func (*EndSnippetProto_StarDataProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{28, 4}
}
func (m *EndSnippetProto_StarDataProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndSnippetProto_StarDataProto.Unmarshal(m, b)
}
func (m *EndSnippetProto_StarDataProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndSnippetProto_StarDataProto.Marshal(b, m, deterministic)
}
func (dst *EndSnippetProto_StarDataProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSnippetProto_StarDataProto.Merge(dst, src)
}
func (m *EndSnippetProto_StarDataProto) XXX_Size() int {
	return xxx_messageInfo_EndSnippetProto_StarDataProto.Size(m)
}
func (m *EndSnippetProto_StarDataProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSnippetProto_StarDataProto.DiscardUnknown(m)
}

var xxx_messageInfo_EndSnippetProto_StarDataProto proto.InternalMessageInfo

func (m *EndSnippetProto_StarDataProto) GetUrl() *StringIdOrValueProto {
	if m != nil {
		return m.Url
	}
	return nil
}

// Message that references another portion of dbroot that should be fetched
// and merged with this dbroot. This is the main feature of DbRootProto which
// allows DbRoot to be split into multiple, hierarchical dbroots that the client
// will fetch and merge together.
type DbRootRefProto struct {
	// Location of other dbroot. URL can be relative (to this document) or
	// absolute. URL must be resolved by client. Do not forget that the client
	// fetching dbroot objects *always* appends query parameters identifying its
	// language and platform.
	Url *string `protobuf:"bytes,2,req,name=url" json:"url,omitempty"`
	// Flag that tells whether or not this object must be downloaded
	// before showing the planet. By default only the first object is
	// critical (the client cannot show the planet before knowing what the
	// database contains).
	// Note: non-critical objects cannot reference critical objects (these will
	// not be counted as "critical", because the client has no way to know that a
	// non-critical object that it contains any critical object before fetching
	// and parsing it.
	IsCritical *bool `protobuf:"varint,1,opt,name=is_critical,json=isCritical,def=0" json:"is_critical,omitempty"`
	// optional requirements - object will only be downloaded if requirements
	// are met. This can be used to selectively exclude an object based on client
	// capabilities. See definition of RequirementProto for more details.
	Requirements         *RequirementProto `protobuf:"bytes,3,opt,name=requirements" json:"requirements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DbRootRefProto) Reset()         { *m = DbRootRefProto{} }
func (m *DbRootRefProto) String() string { return proto.CompactTextString(m) }
func (*DbRootRefProto) ProtoMessage()    {}
func (*DbRootRefProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{29}
}
func (m *DbRootRefProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbRootRefProto.Unmarshal(m, b)
}
func (m *DbRootRefProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbRootRefProto.Marshal(b, m, deterministic)
}
func (dst *DbRootRefProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbRootRefProto.Merge(dst, src)
}
func (m *DbRootRefProto) XXX_Size() int {
	return xxx_messageInfo_DbRootRefProto.Size(m)
}
func (m *DbRootRefProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DbRootRefProto.DiscardUnknown(m)
}

var xxx_messageInfo_DbRootRefProto proto.InternalMessageInfo

const Default_DbRootRefProto_IsCritical bool = false

func (m *DbRootRefProto) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *DbRootRefProto) GetIsCritical() bool {
	if m != nil && m.IsCritical != nil {
		return *m.IsCritical
	}
	return Default_DbRootRefProto_IsCritical
}

func (m *DbRootRefProto) GetRequirements() *RequirementProto {
	if m != nil {
		return m.Requirements
	}
	return nil
}

type DatabaseVersionProto struct {
	// Number that indicates the "version" of the quad-tree - used to be
	// 'qtDataVersion' in the flatfile protocol (in the preamble of dbroot), and
	// is also known as "epoch".
	QuadtreeVersion      *uint32  `protobuf:"varint,1,req,name=quadtree_version,json=quadtreeVersion" json:"quadtree_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatabaseVersionProto) Reset()         { *m = DatabaseVersionProto{} }
func (m *DatabaseVersionProto) String() string { return proto.CompactTextString(m) }
func (*DatabaseVersionProto) ProtoMessage()    {}
func (*DatabaseVersionProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{30}
}
func (m *DatabaseVersionProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatabaseVersionProto.Unmarshal(m, b)
}
func (m *DatabaseVersionProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatabaseVersionProto.Marshal(b, m, deterministic)
}
func (dst *DatabaseVersionProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseVersionProto.Merge(dst, src)
}
func (m *DatabaseVersionProto) XXX_Size() int {
	return xxx_messageInfo_DatabaseVersionProto.Size(m)
}
func (m *DatabaseVersionProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseVersionProto.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseVersionProto proto.InternalMessageInfo

func (m *DatabaseVersionProto) GetQuadtreeVersion() uint32 {
	if m != nil && m.QuadtreeVersion != nil {
		return *m.QuadtreeVersion
	}
	return 0
}

// The central part of DbRoot, which aggregates information about the database.
// Next id: 17
type DbRootProto struct {
	// Name of the database that should appear as layer name in the layers panel.
	DatabaseName *StringIdOrValueProto `protobuf:"bytes,15,opt,name=database_name,json=databaseName" json:"database_name,omitempty"`
	// Describes whether this database contains imagery.
	ImageryPresent *bool `protobuf:"varint,1,opt,name=imagery_present,json=imageryPresent,def=1" json:"imagery_present,omitempty"`
	// True if the imagery packets are going to be served as protocol buffers.
	ProtoImagery *bool `protobuf:"varint,14,opt,name=proto_imagery,json=protoImagery,def=0" json:"proto_imagery,omitempty"`
	// Describes whether this database contains terrain.
	TerrainPresent *bool `protobuf:"varint,2,opt,name=terrain_present,json=terrainPresent,def=0" json:"terrain_present,omitempty"`
	// Stores information about the data provider and copyright information.
	ProviderInfo []*ProviderInfoProto `protobuf:"bytes,3,rep,name=provider_info,json=providerInfo" json:"provider_info,omitempty"`
	// List of "layers" that are available in database.
	NestedFeature []*NestedFeatureProto `protobuf:"bytes,4,rep,name=nested_feature,json=nestedFeature" json:"nested_feature,omitempty"`
	// List of styles referenced by style maps.
	StyleAttribute []*StyleAttributeProto `protobuf:"bytes,5,rep,name=style_attribute,json=styleAttribute" json:"style_attribute,omitempty"`
	// List of style maps used by layers.
	StyleMap []*StyleMapProto `protobuf:"bytes,6,rep,name=style_map,json=styleMap" json:"style_map,omitempty"`
	// Miscellaneous configuration options for database.
	EndSnippet *EndSnippetProto `protobuf:"bytes,7,opt,name=end_snippet,json=endSnippet" json:"end_snippet,omitempty"`
	// List of id/string value pairs - this constitutes the translation table for
	// all messages used in dbroot.
	TranslationEntry []*StringEntryProto `protobuf:"bytes,8,rep,name=translation_entry,json=translationEntry" json:"translation_entry,omitempty"`
	// The language associated with this DbRoot.  This is a language
	// code compatible with the Google III language API, meaning that it
	// should be treated as an opaque identifier that can denote
	// language, script, country, and a bunch of other stuff.
	Language *string `protobuf:"bytes,9,opt,name=language,def=en" json:"language,omitempty"`
	// The dbroots use a versioning system. Newer clients will look for
	// version 6. If they don't find it they will request version 5 and so on.
	// Currently the only dbroot version supported is v5.
	Version *int32 `protobuf:"varint,10,opt,name=version,def=5" json:"version,omitempty"`
	// List of objects that should be downloaded to make this dbroot complete.
	// For instance, the translation table for all string IDs used in this dbroot
	// might be located in another dbroot object. It is a good idea to group
	// together information that does not change across languages or platforms and
	// build different dbroots per platform or language that clients will request
	// depending on their configuration.
	DbrootReference []*DbRootRefProto `protobuf:"bytes,11,rep,name=dbroot_reference,json=dbrootReference" json:"dbroot_reference,omitempty"`
	// This should be set in main part to let the client know the current quadtree
	// version number. However, it's legal to build dbroot parts without this
	// message - the epoch of the database is typically known late in the
	// production pipeline.
	DatabaseVersion *DatabaseVersionProto `protobuf:"bytes,13,opt,name=database_version,json=databaseVersion" json:"database_version,omitempty"`
	// Indicates how often this should be refreshed from server. Value is
	// interpreted in seconds. 0 turns off refreshing.
	// Supported as of Earth 7.1 for side databases only.
	RefreshTimeout       *int32   `protobuf:"varint,16,opt,name=refresh_timeout,json=refreshTimeout" json:"refresh_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DbRootProto) Reset()         { *m = DbRootProto{} }
func (m *DbRootProto) String() string { return proto.CompactTextString(m) }
func (*DbRootProto) ProtoMessage()    {}
func (*DbRootProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{31}
}
func (m *DbRootProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbRootProto.Unmarshal(m, b)
}
func (m *DbRootProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbRootProto.Marshal(b, m, deterministic)
}
func (dst *DbRootProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbRootProto.Merge(dst, src)
}
func (m *DbRootProto) XXX_Size() int {
	return xxx_messageInfo_DbRootProto.Size(m)
}
func (m *DbRootProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DbRootProto.DiscardUnknown(m)
}

var xxx_messageInfo_DbRootProto proto.InternalMessageInfo

const Default_DbRootProto_ImageryPresent bool = true
const Default_DbRootProto_ProtoImagery bool = false
const Default_DbRootProto_TerrainPresent bool = false
const Default_DbRootProto_Language string = "en"
const Default_DbRootProto_Version int32 = 5

func (m *DbRootProto) GetDatabaseName() *StringIdOrValueProto {
	if m != nil {
		return m.DatabaseName
	}
	return nil
}

func (m *DbRootProto) GetImageryPresent() bool {
	if m != nil && m.ImageryPresent != nil {
		return *m.ImageryPresent
	}
	return Default_DbRootProto_ImageryPresent
}

func (m *DbRootProto) GetProtoImagery() bool {
	if m != nil && m.ProtoImagery != nil {
		return *m.ProtoImagery
	}
	return Default_DbRootProto_ProtoImagery
}

func (m *DbRootProto) GetTerrainPresent() bool {
	if m != nil && m.TerrainPresent != nil {
		return *m.TerrainPresent
	}
	return Default_DbRootProto_TerrainPresent
}

func (m *DbRootProto) GetProviderInfo() []*ProviderInfoProto {
	if m != nil {
		return m.ProviderInfo
	}
	return nil
}

func (m *DbRootProto) GetNestedFeature() []*NestedFeatureProto {
	if m != nil {
		return m.NestedFeature
	}
	return nil
}

func (m *DbRootProto) GetStyleAttribute() []*StyleAttributeProto {
	if m != nil {
		return m.StyleAttribute
	}
	return nil
}

func (m *DbRootProto) GetStyleMap() []*StyleMapProto {
	if m != nil {
		return m.StyleMap
	}
	return nil
}

func (m *DbRootProto) GetEndSnippet() *EndSnippetProto {
	if m != nil {
		return m.EndSnippet
	}
	return nil
}

func (m *DbRootProto) GetTranslationEntry() []*StringEntryProto {
	if m != nil {
		return m.TranslationEntry
	}
	return nil
}

func (m *DbRootProto) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_DbRootProto_Language
}

func (m *DbRootProto) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_DbRootProto_Version
}

func (m *DbRootProto) GetDbrootReference() []*DbRootRefProto {
	if m != nil {
		return m.DbrootReference
	}
	return nil
}

func (m *DbRootProto) GetDatabaseVersion() *DatabaseVersionProto {
	if m != nil {
		return m.DatabaseVersion
	}
	return nil
}

func (m *DbRootProto) GetRefreshTimeout() int32 {
	if m != nil && m.RefreshTimeout != nil {
		return *m.RefreshTimeout
	}
	return 0
}

// Message that contains an encrypted and compressed version of dbroot.
type EncryptedDbRootProto struct {
	EncryptionType *EncryptedDbRootProto_EncryptionType `protobuf:"varint,1,opt,name=encryption_type,json=encryptionType,enum=keyhole.dbroot.EncryptedDbRootProto_EncryptionType" json:"encryption_type,omitempty"`
	// Depending on encryption type, this can contain information on the key.
	EncryptionData []byte `protobuf:"bytes,2,opt,name=encryption_data,json=encryptionData" json:"encryption_data,omitempty"`
	// Compressed and encrypted bytes of dbroot data. Once decompressed and
	// decrypted, the bytes can be parsed as a DbRootProto message.
	DbrootData           []byte   `protobuf:"bytes,3,opt,name=dbroot_data,json=dbrootData" json:"dbroot_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptedDbRootProto) Reset()         { *m = EncryptedDbRootProto{} }
func (m *EncryptedDbRootProto) String() string { return proto.CompactTextString(m) }
func (*EncryptedDbRootProto) ProtoMessage()    {}
func (*EncryptedDbRootProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbroot_v2_4b6128531fc04db4, []int{32}
}
func (m *EncryptedDbRootProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptedDbRootProto.Unmarshal(m, b)
}
func (m *EncryptedDbRootProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptedDbRootProto.Marshal(b, m, deterministic)
}
func (dst *EncryptedDbRootProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedDbRootProto.Merge(dst, src)
}
func (m *EncryptedDbRootProto) XXX_Size() int {
	return xxx_messageInfo_EncryptedDbRootProto.Size(m)
}
func (m *EncryptedDbRootProto) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedDbRootProto.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedDbRootProto proto.InternalMessageInfo

func (m *EncryptedDbRootProto) GetEncryptionType() EncryptedDbRootProto_EncryptionType {
	if m != nil && m.EncryptionType != nil {
		return *m.EncryptionType
	}
	return EncryptedDbRootProto_ENCRYPTION_XOR
}

func (m *EncryptedDbRootProto) GetEncryptionData() []byte {
	if m != nil {
		return m.EncryptionData
	}
	return nil
}

func (m *EncryptedDbRootProto) GetDbrootData() []byte {
	if m != nil {
		return m.DbrootData
	}
	return nil
}

func init() {
	proto.RegisterType((*StringEntryProto)(nil), "keyhole.dbroot.StringEntryProto")
	proto.RegisterType((*StringIdOrValueProto)(nil), "keyhole.dbroot.StringIdOrValueProto")
	proto.RegisterType((*PlanetModelProto)(nil), "keyhole.dbroot.PlanetModelProto")
	proto.RegisterType((*ProviderInfoProto)(nil), "keyhole.dbroot.ProviderInfoProto")
	proto.RegisterType((*PopUpProto)(nil), "keyhole.dbroot.PopUpProto")
	proto.RegisterType((*StyleAttributeProto)(nil), "keyhole.dbroot.StyleAttributeProto")
	proto.RegisterType((*StyleMapProto)(nil), "keyhole.dbroot.StyleMapProto")
	proto.RegisterType((*ZoomRangeProto)(nil), "keyhole.dbroot.ZoomRangeProto")
	proto.RegisterType((*DrawFlagProto)(nil), "keyhole.dbroot.DrawFlagProto")
	proto.RegisterType((*LayerProto)(nil), "keyhole.dbroot.LayerProto")
	proto.RegisterType((*FolderProto)(nil), "keyhole.dbroot.FolderProto")
	proto.RegisterType((*RequirementProto)(nil), "keyhole.dbroot.RequirementProto")
	proto.RegisterType((*LookAtProto)(nil), "keyhole.dbroot.LookAtProto")
	proto.RegisterType((*NestedFeatureProto)(nil), "keyhole.dbroot.NestedFeatureProto")
	proto.RegisterType((*MfeDomainFeaturesProto)(nil), "keyhole.dbroot.MfeDomainFeaturesProto")
	proto.RegisterType((*ClientOptionsProto)(nil), "keyhole.dbroot.ClientOptionsProto")
	proto.RegisterType((*ClientOptionsProto_PrecipitationsOptions)(nil), "keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions")
	proto.RegisterType((*ClientOptionsProto_PrecipitationsOptions_WeatherMapping)(nil), "keyhole.dbroot.ClientOptionsProto.PrecipitationsOptions.WeatherMapping")
	proto.RegisterType((*ClientOptionsProto_CaptureOptions)(nil), "keyhole.dbroot.ClientOptionsProto.CaptureOptions")
	proto.RegisterType((*ClientOptionsProto_MapsOptions)(nil), "keyhole.dbroot.ClientOptionsProto.MapsOptions")
	proto.RegisterType((*FetchingOptionsProto)(nil), "keyhole.dbroot.FetchingOptionsProto")
	proto.RegisterType((*TimeMachineOptionsProto)(nil), "keyhole.dbroot.TimeMachineOptionsProto")
	proto.RegisterType((*AutopiaOptionsProto)(nil), "keyhole.dbroot.AutopiaOptionsProto")
	proto.RegisterType((*CSIOptionsProto)(nil), "keyhole.dbroot.CSIOptionsProto")
	proto.RegisterType((*SearchTabProto)(nil), "keyhole.dbroot.SearchTabProto")
	proto.RegisterType((*SearchTabProto_InputBoxInfo)(nil), "keyhole.dbroot.SearchTabProto.InputBoxInfo")
	proto.RegisterType((*CobrandProto)(nil), "keyhole.dbroot.CobrandProto")
	proto.RegisterType((*CobrandProto_Coord)(nil), "keyhole.dbroot.CobrandProto.Coord")
	proto.RegisterType((*DatabaseDescriptionProto)(nil), "keyhole.dbroot.DatabaseDescriptionProto")
	proto.RegisterType((*ConfigScriptProto)(nil), "keyhole.dbroot.ConfigScriptProto")
	proto.RegisterType((*SwoopParamsProto)(nil), "keyhole.dbroot.SwoopParamsProto")
	proto.RegisterType((*PostingServerProto)(nil), "keyhole.dbroot.PostingServerProto")
	proto.RegisterType((*PlanetaryDatabaseProto)(nil), "keyhole.dbroot.PlanetaryDatabaseProto")
	proto.RegisterType((*LogServerProto)(nil), "keyhole.dbroot.LogServerProto")
	proto.RegisterType((*EndSnippetProto)(nil), "keyhole.dbroot.EndSnippetProto")
	proto.RegisterType((*EndSnippetProto_SearchConfigProto)(nil), "keyhole.dbroot.EndSnippetProto.SearchConfigProto")
	proto.RegisterType((*EndSnippetProto_SearchConfigProto_SearchServer)(nil), "keyhole.dbroot.EndSnippetProto.SearchConfigProto.SearchServer")
	proto.RegisterType((*EndSnippetProto_SearchConfigProto_SearchServer_SupplementalUi)(nil), "keyhole.dbroot.EndSnippetProto.SearchConfigProto.SearchServer.SupplementalUi")
	proto.RegisterType((*EndSnippetProto_SearchConfigProto_SearchServer_SearchletProto)(nil), "keyhole.dbroot.EndSnippetProto.SearchConfigProto.SearchServer.SearchletProto")
	proto.RegisterType((*EndSnippetProto_SearchConfigProto_OneboxServiceProto)(nil), "keyhole.dbroot.EndSnippetProto.SearchConfigProto.OneboxServiceProto")
	proto.RegisterType((*EndSnippetProto_SearchInfoProto)(nil), "keyhole.dbroot.EndSnippetProto.SearchInfoProto")
	proto.RegisterType((*EndSnippetProto_RockTreeDataProto)(nil), "keyhole.dbroot.EndSnippetProto.RockTreeDataProto")
	proto.RegisterType((*EndSnippetProto_FilmstripConfigProto)(nil), "keyhole.dbroot.EndSnippetProto.FilmstripConfigProto")
	proto.RegisterType((*EndSnippetProto_FilmstripConfigProto_AlleycatImageryTypeProto)(nil), "keyhole.dbroot.EndSnippetProto.FilmstripConfigProto.AlleycatImageryTypeProto")
	proto.RegisterType((*EndSnippetProto_StarDataProto)(nil), "keyhole.dbroot.EndSnippetProto.StarDataProto")
	proto.RegisterType((*DbRootRefProto)(nil), "keyhole.dbroot.DbRootRefProto")
	proto.RegisterType((*DatabaseVersionProto)(nil), "keyhole.dbroot.DatabaseVersionProto")
	proto.RegisterType((*DbRootProto)(nil), "keyhole.dbroot.DbRootProto")
	proto.RegisterType((*EncryptedDbRootProto)(nil), "keyhole.dbroot.EncryptedDbRootProto")
	proto.RegisterEnum("keyhole.dbroot.DrawFlagProto_DrawFlagType", DrawFlagProto_DrawFlagType_name, DrawFlagProto_DrawFlagType_value)
	proto.RegisterEnum("keyhole.dbroot.NestedFeatureProto_FeatureType", NestedFeatureProto_FeatureType_name, NestedFeatureProto_FeatureType_value)
	proto.RegisterEnum("keyhole.dbroot.MfeDomainFeaturesProto_SupportedFeature", MfeDomainFeaturesProto_SupportedFeature_name, MfeDomainFeaturesProto_SupportedFeature_value)
	proto.RegisterEnum("keyhole.dbroot.ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType", ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType_name, ClientOptionsProto_PrecipitationsOptions_WeatherMapping_WeatherType_value)
	proto.RegisterEnum("keyhole.dbroot.CobrandProto_TiePoint", CobrandProto_TiePoint_name, CobrandProto_TiePoint_value)
	proto.RegisterEnum("keyhole.dbroot.EndSnippetProto_SearchConfigProto_SearchServer_ResultType", EndSnippetProto_SearchConfigProto_SearchServer_ResultType_name, EndSnippetProto_SearchConfigProto_SearchServer_ResultType_value)
	proto.RegisterEnum("keyhole.dbroot.EncryptedDbRootProto_EncryptionType", EncryptedDbRootProto_EncryptionType_name, EncryptedDbRootProto_EncryptionType_value)
}

func init() { proto.RegisterFile("dbroot_v2.proto", fileDescriptor_dbroot_v2_4b6128531fc04db4) }

var fileDescriptor_dbroot_v2_4b6128531fc04db4 = []byte{
	// 6984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x49, 0x70, 0x23, 0xc7,
	0x9a, 0x9e, 0xc0, 0xa5, 0x9b, 0xf8, 0x41, 0x2c, 0x4c, 0x2e, 0x8d, 0x66, 0x6b, 0xe9, 0x86, 0xf4,
	0xa4, 0x1e, 0xe9, 0x89, 0xcd, 0x66, 0xaf, 0xe2, 0x7b, 0xd2, 0x13, 0xd7, 0x16, 0x9e, 0xb8, 0x40,
	0x49, 0xb0, 0xb5, 0x8c, 0xc7, 0x15, 0x89, 0xaa, 0x04, 0x50, 0xc3, 0x42, 0x65, 0xa9, 0xb2, 0xc0,
	0x45, 0x47, 0x9f, 0x1c, 0x76, 0x84, 0xc3, 0x0e, 0x5f, 0x1c, 0x3e, 0x38, 0xc2, 0x37, 0x1f, 0xec,
	0xf0, 0xd9, 0x07, 0x8f, 0x23, 0x1c, 0x3e, 0xf8, 0xe2, 0xa3, 0xc3, 0x3e, 0xd9, 0x17, 0x87, 0x2f,
	0xbe, 0xfb, 0x32, 0x07, 0x3b, 0xf2, 0xcf, 0xcc, 0x42, 0x01, 0x84, 0x9e, 0x88, 0xd6, 0x1c, 0xe7,
	0x44, 0xd6, 0xbf, 0x7c, 0x95, 0xeb, 0xbf, 0x65, 0x16, 0xa0, 0xec, 0xb5, 0x62, 0x21, 0x12, 0xe7,
	0x7c, 0x63, 0x2d, 0x8a, 0x45, 0x22, 0x48, 0xe9, 0x8c, 0x5f, 0x75, 0x45, 0xc0, 0xd7, 0x34, 0xa3,
	0x46, 0xa1, 0x72, 0x92, 0xc4, 0x7e, 0xd8, 0xd9, 0x0b, 0x93, 0xf8, 0xaa, 0x81, 0x32, 0xf7, 0x20,
	0x2f, 0x91, 0xe6, 0xf8, 0x5e, 0x35, 0x77, 0x7f, 0xea, 0xe1, 0x6d, 0x3a, 0xa7, 0x09, 0x75, 0x8f,
	0x3c, 0x80, 0x79, 0xc3, 0x3c, 0x67, 0x41, 0x9f, 0x57, 0xa7, 0xee, 0x4f, 0x3d, 0xcc, 0xd3, 0x82,
	0xa6, 0xbd, 0x56, 0xa4, 0x5a, 0x1d, 0x96, 0x4e, 0x8c, 0xf8, 0x71, 0x8c, 0xa4, 0xb1, 0xb8, 0xb9,
	0x21, 0xdc, 0x25, 0x98, 0xb5, 0x80, 0xb9, 0x87, 0x79, 0xaa, 0x1f, 0x6a, 0xff, 0x7a, 0x0a, 0x2a,
	0x8d, 0x80, 0x85, 0x3c, 0x39, 0x14, 0x1e, 0x0f, 0x34, 0xce, 0x7d, 0xb8, 0x15, 0x33, 0xcf, 0xef,
	0x4b, 0x04, 0xc9, 0x6d, 0xce, 0x3d, 0x7f, 0xf2, 0xe2, 0xe5, 0xda, 0xe3, 0x27, 0x2f, 0xa8, 0xa1,
	0x93, 0x27, 0x00, 0xed, 0x80, 0x25, 0x09, 0x0f, 0xfd, 0xb0, 0x83, 0x88, 0xb9, 0xcd, 0xc5, 0xf5,
	0xb5, 0xf5, 0xf5, 0x27, 0x4f, 0x9e, 0x6d, 0xbc, 0x7c, 0xbc, 0xfe, 0xfc, 0xf9, 0xd3, 0x17, 0x4f,
	0x5f, 0x3c, 0x7d, 0x49, 0x33, 0x62, 0xe4, 0x37, 0x50, 0xe2, 0x01, 0x3f, 0x67, 0x89, 0x2f, 0x42,
	0xa7, 0xe5, 0x33, 0x59, 0x9d, 0x51, 0x8a, 0xb4, 0x98, 0x52, 0xb7, 0x7d, 0x26, 0xc9, 0x1e, 0xbc,
	0x17, 0xf2, 0x0e, 0x4b, 0xfc, 0x73, 0xee, 0xb0, 0x20, 0xf1, 0x93, 0xbe, 0xc7, 0x1d, 0x7e, 0x19,
	0x89, 0x90, 0x87, 0x89, 0xd6, 0x9b, 0xbd, 0x9f, 0x7b, 0x38, 0x4b, 0xdf, 0xb6, 0x62, 0x5b, 0x46,
	0x6a, 0xcf, 0x08, 0x21, 0xcc, 0x09, 0x7c, 0xe8, 0x8a, 0x5e, 0x14, 0x73, 0x29, 0xb9, 0xe7, 0x5c,
	0x47, 0x4c, 0xba, 0x31, 0x97, 0x5d, 0x11, 0x78, 0xd5, 0x5b, 0xd8, 0x8a, 0xf7, 0x07, 0xd2, 0x47,
	0x23, 0xb8, 0x4d, 0x2b, 0x5a, 0xfb, 0xf7, 0x39, 0x58, 0x68, 0xc4, 0xe2, 0xdc, 0xf7, 0x78, 0x5c,
	0x0f, 0xdb, 0x42, 0x8f, 0xd7, 0x7b, 0x50, 0x88, 0x0c, 0xd1, 0xce, 0xe8, 0x2c, 0x05, 0x4b, 0xaa,
	0x7b, 0xe4, 0x18, 0x2a, 0xae, 0x88, 0xae, 0x62, 0xbf, 0xd3, 0x4d, 0x1c, 0x3d, 0x23, 0x38, 0x68,
	0x85, 0x8d, 0x0f, 0xd6, 0x86, 0xd7, 0xcb, 0xda, 0xb8, 0x89, 0xa5, 0xe5, 0x54, 0x5b, 0xb3, 0xc9,
	0x73, 0x58, 0x3e, 0xe7, 0x71, 0xe2, 0xbb, 0x2c, 0x70, 0x22, 0xff, 0x92, 0x07, 0x8e, 0x68, 0xb7,
	0x25, 0x4f, 0xaa, 0xd3, 0x6a, 0x64, 0x36, 0xa7, 0x3e, 0x7d, 0x4c, 0x17, 0xad, 0x40, 0x43, 0xf1,
	0x8f, 0x91, 0x5d, 0xfb, 0x3f, 0x39, 0x80, 0x86, 0x88, 0x4e, 0x23, 0xdd, 0xf0, 0x47, 0x50, 0xf1,
	0xa5, 0xd3, 0x62, 0x41, 0x20, 0x44, 0xe8, 0xc8, 0xe4, 0x2a, 0xe0, 0x38, 0xe5, 0x73, 0x9b, 0xb3,
	0x6d, 0x16, 0x48, 0x4e, 0x4b, 0xbe, 0xdc, 0xd6, 0xdc, 0x13, 0xc5, 0x24, 0x2f, 0x61, 0x26, 0xe1,
	0x97, 0xc9, 0x44, 0x8d, 0x47, 0x0d, 0xf2, 0x05, 0x2c, 0xb7, 0x98, 0x7b, 0xd6, 0x89, 0x45, 0x3f,
	0xf4, 0x1c, 0x57, 0x04, 0x22, 0x76, 0x58, 0xab, 0x13, 0x63, 0x8b, 0x6f, 0x6f, 0xc2, 0xd3, 0x8d,
	0xcf, 0x9e, 0x7e, 0xf6, 0xfc, 0xc5, 0xc6, 0x67, 0xcf, 0xe8, 0xe2, 0x40, 0x70, 0x47, 0xc9, 0x6d,
	0xb5, 0x3a, 0x31, 0xd9, 0x80, 0xb2, 0xc2, 0xc9, 0x6a, 0xce, 0x58, 0xcd, 0x17, 0x2f, 0x1f, 0x7f,
	0xb6, 0xbe, 0xfe, 0x72, 0x9d, 0x16, 0x95, 0x48, 0xaa, 0x53, 0xfb, 0xab, 0x5b, 0xb0, 0x88, 0xed,
	0xde, 0x4a, 0x92, 0xd8, 0x6f, 0xf5, 0x13, 0xb3, 0x4f, 0xee, 0xc2, 0x1c, 0xf6, 0xd5, 0x4e, 0x56,
	0x9e, 0xde, 0xc6, 0xe7, 0xba, 0x37, 0x3a, 0x95, 0x38, 0x9c, 0x43, 0x53, 0xb9, 0x01, 0xe5, 0x48,
	0x04, 0x57, 0x63, 0xdb, 0x91, 0xf6, 0xa0, 0xa8, 0x44, 0x86, 0xda, 0x1e, 0xf8, 0x21, 0xcf, 0xea,
	0xcc, 0x5e, 0xd7, 0x51, 0x22, 0x03, 0x9d, 0xfb, 0x00, 0xa8, 0x73, 0xe1, 0x7b, 0x49, 0x17, 0x97,
	0xe8, 0xd4, 0x66, 0xee, 0x31, 0xcd, 0x2b, 0xe2, 0xb7, 0x8a, 0x46, 0x9e, 0x42, 0x25, 0x60, 0x2d,
	0x1e, 0x64, 0x61, 0x6f, 0x5f, 0x83, 0x2d, 0xa1, 0xcc, 0x00, 0xb7, 0x06, 0x05, 0xad, 0x25, 0x5d,
	0x16, 0xf0, 0xea, 0x9c, 0x05, 0x06, 0xa4, 0x9e, 0x28, 0x22, 0xd9, 0x83, 0xbb, 0x51, 0xc0, 0x5c,
	0xde, 0x63, 0xf1, 0x99, 0xe3, 0xbb, 0x22, 0xcc, 0xbe, 0x22, 0x7f, 0xed, 0x15, 0x2b, 0xa9, 0x70,
	0xdd, 0x15, 0xe1, 0xe0, 0x55, 0x4f, 0x60, 0x69, 0x04, 0x46, 0xbf, 0x13, 0xec, 0x3b, 0xc9, 0x90,
	0xa2, 0x7e, 0x77, 0x13, 0x16, 0x47, 0x94, 0x22, 0x96, 0x74, 0xab, 0x85, 0x09, 0x16, 0xdc, 0xc2,
	0x10, 0x6c, 0x83, 0x25, 0x5d, 0xf2, 0x09, 0x54, 0x46, 0x50, 0x2f, 0xab, 0xf3, 0xb8, 0x55, 0x72,
	0xeb, 0xb4, 0x34, 0x24, 0xff, 0xdd, 0x18, 0xe1, 0xab, 0x6a, 0x71, 0xbc, 0xf0, 0xf7, 0xe4, 0xe9,
	0xb5, 0x4e, 0xea, 0x19, 0x2b, 0xe9, 0x8d, 0xf8, 0x64, 0x63, 0xa4, 0x97, 0x7a, 0xee, 0x9e, 0xc3,
	0xf2, 0x88, 0x56, 0x97, 0xab, 0xed, 0x5d, 0x2d, 0xa7, 0x6a, 0x8b, 0x43, 0x6a, 0x5f, 0x21, 0x9b,
	0x3c, 0x86, 0x5b, 0x91, 0x88, 0x9c, 0x7e, 0x54, 0xad, 0xe0, 0x80, 0xac, 0x8e, 0x0e, 0xc8, 0x60,
	0x73, 0xd3, 0xd9, 0x48, 0xfd, 0x4f, 0x36, 0x21, 0xef, 0xc5, 0xec, 0xc2, 0x69, 0x07, 0xac, 0x53,
	0x5d, 0xb8, 0x3f, 0xfd, 0xb0, 0xb0, 0xf1, 0xce, 0xa8, 0xd6, 0x6e, 0xcc, 0x2e, 0xf6, 0x03, 0xd6,
	0xd1, 0x8a, 0x73, 0x9e, 0x79, 0xac, 0xfd, 0xc7, 0x1c, 0x14, 0x71, 0x03, 0x1d, 0xb2, 0xc8, 0xba,
	0x86, 0x79, 0xbd, 0x75, 0x7a, 0x2c, 0xca, 0xd8, 0x3a, 0x69, 0x84, 0xea, 0x1e, 0x79, 0x07, 0xc0,
	0xed, 0xb2, 0x30, 0xe4, 0x81, 0xe2, 0x4f, 0xdd, 0x9f, 0x7e, 0x38, 0x4b, 0xf3, 0x86, 0x52, 0xf7,
	0xc8, 0x53, 0x58, 0x09, 0x45, 0xdc, 0x63, 0x81, 0x36, 0x37, 0x0e, 0xb3, 0x5b, 0xd3, 0xec, 0xb5,
	0x25, 0xcd, 0x1d, 0xde, 0xb6, 0x64, 0x13, 0xee, 0x76, 0xfd, 0x4e, 0x37, 0x30, 0x06, 0x74, 0x58,
	0x71, 0x06, 0x15, 0xef, 0xa4, 0x02, 0xc3, 0xba, 0xb5, 0x7d, 0x28, 0xfd, 0x20, 0x44, 0x8f, 0xb2,
	0xb0, 0x33, 0xd8, 0xff, 0x3d, 0x3f, 0x74, 0x7e, 0x12, 0xa2, 0x67, 0x3a, 0x70, 0xbb, 0xe7, 0x87,
	0x4a, 0x08, 0x59, 0xec, 0x52, 0xb3, 0xa6, 0x0c, 0x8b, 0x5d, 0x2a, 0x56, 0xed, 0x7f, 0xe7, 0xa0,
	0x38, 0x34, 0x50, 0xa4, 0x01, 0xa5, 0x74, 0x68, 0x9d, 0xe4, 0x2a, 0xe2, 0x88, 0x56, 0xda, 0xf8,
	0xf8, 0x4f, 0x8e, 0x6f, 0xfa, 0xd4, 0xbc, 0x8a, 0x38, 0x9d, 0xf7, 0x32, 0x4f, 0xb5, 0xbf, 0x97,
	0x83, 0xf9, 0x2c, 0x9b, 0x10, 0x28, 0x35, 0xbf, 0x6f, 0xec, 0x39, 0xfb, 0xf5, 0x83, 0x03, 0xe7,
	0xf8, 0xe8, 0xe0, 0xfb, 0x4a, 0x8e, 0x2c, 0xc3, 0x02, 0xd2, 0x8e, 0x4f, 0x9b, 0x07, 0xf5, 0xa3,
	0x3d, 0x4d, 0x9e, 0x22, 0x77, 0x61, 0x79, 0x20, 0xba, 0x75, 0xb4, 0x6b, 0xf9, 0x95, 0xe9, 0x54,
	0x63, 0xeb, 0xa8, 0x59, 0xdf, 0x3a, 0xa8, 0x6f, 0x9d, 0xd4, 0x8f, 0x5e, 0x55, 0x66, 0x52, 0xf2,
	0xce, 0xde, 0x51, 0x73, 0x8f, 0x3a, 0x07, 0x5b, 0xdb, 0x7b, 0x07, 0x95, 0xd9, 0xda, 0xff, 0xcc,
	0x01, 0x1c, 0xb0, 0x2b, 0x1e, 0xeb, 0x5e, 0x7e, 0x0e, 0xa0, 0x86, 0xc3, 0x89, 0xd5, 0x00, 0x56,
	0x73, 0xb8, 0x82, 0xde, 0x1d, 0xed, 0xe1, 0xf0, 0x08, 0xd3, 0xfc, 0x4f, 0xf6, 0x99, 0x6c, 0xc0,
	0xa2, 0x72, 0xab, 0x3c, 0x3e, 0xe7, 0x0e, 0x5a, 0xf0, 0x80, 0x9f, 0xf3, 0x00, 0x3d, 0x88, 0x5a,
	0xe8, 0xeb, 0x74, 0xc1, 0xb2, 0x9b, 0xfc, 0x32, 0x39, 0x50, 0x4c, 0xb2, 0x0e, 0x4b, 0x81, 0xf0,
	0x9c, 0x16, 0xef, 0xf8, 0xa1, 0x93, 0xc4, 0x2c, 0x94, 0xbe, 0x0a, 0x0f, 0x70, 0xa6, 0xe7, 0x28,
	0x09, 0x84, 0xb7, 0xad, 0x58, 0xcd, 0x94, 0x43, 0x7e, 0x0b, 0x8a, 0xea, 0xf0, 0xd0, 0xcb, 0xca,
	0xcf, 0xa2, 0x7c, 0x25, 0x10, 0xde, 0x5e, 0xe8, 0x0d, 0xa4, 0x6b, 0x2f, 0xa1, 0xb0, 0x2f, 0x02,
	0xcf, 0xf6, 0xf0, 0xcf, 0xa0, 0xe8, 0x4b, 0x15, 0x62, 0xb0, 0xd0, 0x63, 0xad, 0xd4, 0x07, 0xce,
	0x24, 0x71, 0x9f, 0xd3, 0x79, 0x5f, 0xee, 0xa5, 0x9c, 0xda, 0x5f, 0xe7, 0xa0, 0x42, 0xf9, 0x8f,
	0x7d, 0x3f, 0xe6, 0x3d, 0x1e, 0x26, 0x5a, 0xff, 0x7d, 0x28, 0xc6, 0x9a, 0xe6, 0x39, 0xe7, 0x31,
	0xeb, 0xe1, 0x52, 0xce, 0xd3, 0x79, 0x4b, 0x7c, 0x1d, 0xb3, 0x1e, 0x59, 0x83, 0xc5, 0x54, 0xc8,
	0x0d, 0x7c, 0x15, 0xcb, 0x9c, 0x73, 0xed, 0x3c, 0xf2, 0x74, 0xc1, 0xb2, 0x76, 0x90, 0xf3, 0x9a,
	0x2b, 0x07, 0xa0, 0x3c, 0x51, 0x8b, 0xb5, 0xfc, 0xc0, 0x4f, 0xae, 0xb0, 0x2b, 0x79, 0x9a, 0x25,
	0x0d, 0x21, 0xf6, 0x25, 0x8f, 0x1d, 0xd6, 0xe1, 0x61, 0x82, 0xbe, 0x22, 0x83, 0x78, 0x2a, 0x79,
	0xbc, 0xa5, 0x18, 0xe4, 0x4b, 0x78, 0x7b, 0xb4, 0x05, 0x2e, 0x8b, 0x34, 0x9a, 0xcf, 0x25, 0x3a,
	0x8f, 0x3c, 0x5d, 0x1d, 0x6e, 0xca, 0x4e, 0x46, 0xa2, 0xf6, 0x0f, 0x73, 0x50, 0x38, 0x10, 0xe2,
	0x6c, 0xcb, 0x74, 0xfc, 0x6d, 0xc8, 0x07, 0x22, 0xec, 0x60, 0x90, 0x84, 0x6b, 0x7f, 0x8a, 0x0e,
	0x08, 0x64, 0x15, 0xe6, 0x02, 0xa6, 0x23, 0x28, 0xdc, 0x4b, 0x53, 0x34, 0x7d, 0x56, 0xd1, 0xa8,
	0x5e, 0x4f, 0x6a, 0xa8, 0xa6, 0xa8, 0x7e, 0x20, 0x04, 0x66, 0x12, 0x3f, 0x48, 0x70, 0x50, 0xa6,
	0x28, 0xfe, 0x4f, 0xaa, 0x70, 0xbb, 0xcb, 0x99, 0xa7, 0x42, 0xa6, 0x59, 0x24, 0xdb, 0xc7, 0xda,
	0xbf, 0xca, 0x03, 0x39, 0xe2, 0x32, 0xe1, 0xde, 0x3e, 0x67, 0x49, 0x3f, 0x36, 0xbb, 0xfb, 0x1b,
	0x98, 0x6f, 0xeb, 0x67, 0xbb, 0x27, 0x73, 0x0f, 0x4b, 0x1b, 0x6b, 0xa3, 0x2b, 0xf6, 0xba, 0xe6,
	0x9a, 0x79, 0xc0, 0x7d, 0x59, 0x68, 0x0f, 0x1e, 0xc8, 0xe7, 0x70, 0xfb, 0xac, 0x17, 0x38, 0xfd,
	0x38, 0x98, 0x28, 0xf2, 0xb9, 0x75, 0xd6, 0x0b, 0x4e, 0xe3, 0x40, 0x85, 0xf4, 0x1e, 0x4b, 0x58,
	0x8b, 0x49, 0x8e, 0x18, 0xcb, 0x7a, 0x2e, 0x2d, 0x4d, 0x89, 0xac, 0xc3, 0x6c, 0xa0, 0xb6, 0x1c,
	0x8e, 0xc7, 0x18, 0xbb, 0x3e, 0xd8, 0x8f, 0x54, 0x0b, 0x92, 0x27, 0x70, 0xab, 0x8d, 0x6b, 0x18,
	0x47, 0xab, 0xb0, 0x71, 0x6f, 0x54, 0x25, 0xb3, 0xc2, 0xa9, 0x11, 0x25, 0xdb, 0x50, 0x88, 0x07,
	0xab, 0x17, 0x07, 0xb4, 0xb0, 0x71, 0x7f, 0x54, 0x73, 0x74, 0x81, 0xd3, 0xac, 0xd2, 0x88, 0x81,
	0xbf, 0x85, 0x46, 0x32, 0x63, 0xe0, 0x5f, 0xc1, 0xbc, 0xe7, 0xcb, 0x28, 0x60, 0x57, 0x4e, 0xc8,
	0x7a, 0x1c, 0x57, 0xd5, 0x4d, 0x07, 0xac, 0x60, 0x34, 0x8f, 0x58, 0x8f, 0x93, 0xf7, 0x01, 0x7c,
	0xe9, 0x9c, 0xfb, 0xd2, 0x6f, 0x99, 0x40, 0xc5, 0x6e, 0xc9, 0xbc, 0x2f, 0x5f, 0x6b, 0xb2, 0x11,
	0xe2, 0xa1, 0xda, 0x9c, 0x1e, 0xc6, 0x26, 0x19, 0xa1, 0x3d, 0x4d, 0x26, 0x1f, 0xa0, 0x90, 0xdb,
	0xe5, 0xee, 0x19, 0xf7, 0x30, 0xfc, 0x48, 0x03, 0xdc, 0xbc, 0x2f, 0x77, 0x34, 0x9d, 0x7c, 0x09,
	0x4b, 0x38, 0xb2, 0x4e, 0x8f, 0x87, 0xfd, 0x91, 0xd0, 0x23, 0xbf, 0x59, 0x56, 0x04, 0xf9, 0xe8,
	0xc5, 0x8b, 0x27, 0x4e, 0xb0, 0x16, 0x85, 0x1d, 0xba, 0x80, 0xc2, 0x87, 0x3c, 0xec, 0xa7, 0x51,
	0xc6, 0x3e, 0x14, 0x3c, 0x2e, 0xdd, 0xd8, 0x8f, 0xd0, 0xfa, 0xcc, 0x4f, 0xd4, 0xf3, 0x81, 0x22,
	0x79, 0x0a, 0xb7, 0x03, 0x21, 0xce, 0x1c, 0x96, 0x60, 0xdc, 0x31, 0x66, 0x6e, 0x33, 0x9b, 0x90,
	0xde, 0x0a, 0xf0, 0x41, 0xcd, 0x0b, 0x93, 0x92, 0x27, 0x4e, 0xbf, 0xef, 0x7b, 0x18, 0x48, 0xe4,
	0x69, 0x1e, 0x29, 0xa7, 0x7d, 0xdf, 0x23, 0x1f, 0x43, 0xc9, 0x97, 0x8e, 0x64, 0xe7, 0xdc, 0x09,
	0x04, 0x0e, 0x44, 0x65, 0xd8, 0xca, 0x9d, 0xb0, 0x73, 0x7e, 0x80, 0x1c, 0xf2, 0x05, 0xcc, 0xb9,
	0x5d, 0x3f, 0xf0, 0x62, 0x1e, 0x9a, 0x90, 0xa1, 0xf6, 0xcb, 0xdb, 0x87, 0xa6, 0x3a, 0xe4, 0x33,
	0xb8, 0x6b, 0x0d, 0x8c, 0x08, 0xdb, 0x7e, 0xc7, 0xd1, 0x7d, 0xd3, 0x0b, 0x82, 0x60, 0xcb, 0x56,
	0xb4, 0xc0, 0x0e, 0xf2, 0x4f, 0x90, 0x8d, 0xb3, 0xfe, 0x39, 0xdc, 0xf5, 0x7c, 0x11, 0xb3, 0x1e,
	0x73, 0xd4, 0xfe, 0x70, 0xec, 0x52, 0x53, 0x1b, 0xa5, 0xba, 0x98, 0x66, 0x37, 0x2b, 0x46, 0x68,
	0x97, 0x25, 0x6c, 0x47, 0x8b, 0x6c, 0x33, 0x89, 0xea, 0x31, 0x8f, 0x02, 0xdf, 0x1d, 0xa7, 0xbe,
	0x34, 0x50, 0x37, 0x42, 0x23, 0xea, 0xb5, 0xd7, 0x50, 0xc8, 0x18, 0x01, 0x52, 0x81, 0x79, 0x74,
	0x90, 0x8d, 0xe3, 0xfa, 0x51, 0xd3, 0xf9, 0xa1, 0x92, 0x4b, 0xfd, 0x71, 0xe3, 0xf8, 0xe0, 0xfb,
	0x57, 0xc7, 0x47, 0xce, 0x0f, 0x95, 0x29, 0x52, 0x86, 0x02, 0xd2, 0xd0, 0x19, 0xff, 0x50, 0x99,
	0x4e, 0xd5, 0x9a, 0x7b, 0x94, 0x6e, 0xd5, 0x8f, 0x2a, 0x33, 0xb5, 0x7f, 0x32, 0x05, 0x2b, 0x87,
	0x6d, 0xbe, 0x2b, 0x7a, 0xcc, 0x0f, 0xcd, 0x1b, 0xa4, 0x36, 0x57, 0x0f, 0x60, 0xde, 0x15, 0xfd,
	0x30, 0x89, 0x55, 0x4e, 0x61, 0xcc, 0x68, 0x9e, 0x16, 0x0c, 0x6d, 0x47, 0x78, 0x5c, 0x25, 0x25,
	0x1e, 0x6a, 0xea, 0x01, 0xd4, 0x15, 0x01, 0xd0, 0x24, 0x1c, 0xb4, 0x36, 0x10, 0xd9, 0x8f, 0x22,
	0x11, 0x27, 0xdc, 0x73, 0x8c, 0xe1, 0x92, 0xd5, 0xe9, 0xfb, 0xd3, 0x0f, 0x4b, 0x1b, 0x2f, 0x46,
	0x67, 0x6e, 0x7c, 0x3b, 0xd6, 0x4e, 0x2c, 0x80, 0x21, 0xd3, 0x05, 0x39, 0x42, 0x91, 0xb5, 0xaf,
	0xa1, 0x32, 0x2a, 0x46, 0x8a, 0x90, 0x7f, 0xb5, 0x77, 0xbc, 0x73, 0xbc, 0xab, 0x62, 0x8a, 0xb7,
	0x54, 0xdf, 0x0f, 0x8e, 0x77, 0xb6, 0x0e, 0x9c, 0x93, 0xbd, 0x2d, 0xba, 0xf3, 0x55, 0x25, 0x47,
	0x56, 0x80, 0xec, 0xd2, 0xfa, 0xeb, 0xfa, 0xd1, 0x2b, 0x67, 0xb7, 0x4e, 0xf7, 0x76, 0x9a, 0xf5,
	0xe3, 0xa3, 0x93, 0xca, 0x54, 0xed, 0xbf, 0x10, 0x20, 0xda, 0xc7, 0x1c, 0xe3, 0xb2, 0x37, 0xe3,
	0xf1, 0x5b, 0x20, 0x9e, 0x2f, 0xd5, 0xc6, 0x75, 0x3c, 0x5f, 0x9e, 0x39, 0x2e, 0x73, 0xbb, 0xc6,
	0x23, 0xd3, 0x8a, 0xe1, 0xec, 0xfa, 0xf2, 0x6c, 0x47, 0xd1, 0xc9, 0x0e, 0xbc, 0x6b, 0xa5, 0x79,
	0xaf, 0xc5, 0x3d, 0x8f, 0x7b, 0x4e, 0x2b, 0x16, 0x17, 0xca, 0x1d, 0x9e, 0xfb, 0x32, 0x61, 0x68,
	0xb0, 0xe7, 0xe8, 0x3d, 0x23, 0xb5, 0x67, 0x84, 0xb6, 0xb5, 0xcc, 0x6b, 0x25, 0x42, 0x3e, 0x85,
	0x32, 0xc6, 0x71, 0x2c, 0xe9, 0x09, 0x19, 0x75, 0x79, 0xac, 0xdd, 0x92, 0xdd, 0x1b, 0x18, 0xe4,
	0x6d, 0xa5, 0x3c, 0x65, 0x73, 0x50, 0x5c, 0x26, 0x2c, 0xd6, 0x35, 0x8c, 0xd4, 0xe6, 0x28, 0xfa,
	0x89, 0x22, 0xab, 0x6e, 0xc8, 0x2e, 0x53, 0x69, 0x64, 0xdb, 0x0f, 0xb8, 0x13, 0xc5, 0xbc, 0xed,
	0x5f, 0x1a, 0x2f, 0x5e, 0xd1, 0x9c, 0x7d, 0x3f, 0xe0, 0x0d, 0xa4, 0x93, 0x2d, 0x78, 0xa7, 0x2f,
	0x95, 0x94, 0x48, 0x44, 0xab, 0xdf, 0x76, 0x7e, 0xec, 0x33, 0x2f, 0x89, 0x39, 0x77, 0x22, 0xe6,
	0x9e, 0xf1, 0x44, 0xa2, 0x53, 0x9f, 0xa3, 0xab, 0x7d, 0xa9, 0xf7, 0x5a, 0xab, 0xdf, 0xfe, 0xc6,
	0x88, 0x34, 0xb4, 0x04, 0xd9, 0x02, 0xc5, 0x75, 0xf8, 0x65, 0xc2, 0x43, 0x35, 0x0a, 0x83, 0x82,
	0x83, 0xef, 0x69, 0xdf, 0x6e, 0x5b, 0x79, 0xa7, 0x2f, 0xf9, 0x9e, 0x11, 0xdb, 0xb1, 0x52, 0x75,
	0x4f, 0x12, 0x01, 0x2b, 0x51, 0xcc, 0x5d, 0x3f, 0xf2, 0x13, 0x2c, 0xc7, 0x48, 0x47, 0xe8, 0x99,
	0x41, 0xeb, 0x5b, 0xd8, 0x78, 0x39, 0xba, 0x94, 0xae, 0x4f, 0xdf, 0x5a, 0x63, 0x08, 0xc0, 0xb0,
	0xe8, 0x72, 0x34, 0x8e, 0x4c, 0x7e, 0x80, 0xb2, 0xcb, 0x22, 0x74, 0xd5, 0xf6, 0x4d, 0x79, 0x7c,
	0xd3, 0xe3, 0x1b, 0xbc, 0x69, 0x47, 0x6b, 0xda, 0x57, 0x94, 0xdc, 0xa1, 0x67, 0xf2, 0x08, 0x16,
	0x64, 0x57, 0x5c, 0x38, 0x1b, 0x9e, 0xca, 0x55, 0x24, 0x1a, 0x74, 0x63, 0xfb, 0xcd, 0xb4, 0x2a,
	0xf6, 0x86, 0x77, 0xc8, 0x22, 0xa9, 0x2c, 0x38, 0x79, 0x09, 0x55, 0xbb, 0x94, 0xfc, 0x30, 0xe1,
	0x71, 0xc8, 0x02, 0xbb, 0x94, 0xd0, 0x07, 0xcc, 0x29, 0xa3, 0x83, 0xfc, 0xba, 0x61, 0x9b, 0x45,
	0x44, 0x7e, 0x0f, 0xab, 0xa3, 0x1a, 0x4e, 0x2b, 0x60, 0xee, 0x59, 0xe0, 0xcb, 0x04, 0xdd, 0x40,
	0x9e, 0x56, 0xfd, 0x61, 0xa5, 0x6d, 0xcb, 0x27, 0x07, 0xf0, 0xe0, 0x9a, 0xb6, 0x88, 0x7d, 0x15,
	0xfa, 0x5e, 0x74, 0xfd, 0x84, 0x23, 0x48, 0x11, 0x9d, 0x50, 0xee, 0x63, 0xfa, 0xee, 0x08, 0xce,
	0x31, 0x4a, 0x7e, 0x6b, 0x05, 0xc9, 0x0b, 0xa8, 0x46, 0x22, 0x60, 0xb1, 0x93, 0xa8, 0x65, 0xd7,
	0xe3, 0x71, 0xc7, 0x0f, 0x3b, 0x26, 0xe6, 0xc6, 0x9c, 0x94, 0x2e, 0x23, 0xbf, 0xe9, 0x07, 0xfc,
	0x50, 0x73, 0x75, 0xcc, 0xdd, 0x84, 0x7b, 0x7f, 0x29, 0x9d, 0x56, 0xec, 0x7b, 0x1d, 0xee, 0x28,
	0x7f, 0xcf, 0x65, 0x92, 0x69, 0x00, 0xfa, 0x93, 0xcd, 0xe5, 0x6e, 0x92, 0x44, 0x9b, 0x8f, 0x1e,
	0x7d, 0xbc, 0xd6, 0x11, 0xa2, 0x13, 0xf0, 0x35, 0x57, 0xf4, 0x1e, 0x7d, 0x4c, 0xab, 0x7f, 0x29,
	0xb7, 0x51, 0x91, 0x6a, 0xbd, 0x41, 0x73, 0xbe, 0x81, 0x79, 0x1c, 0x7d, 0x3b, 0xbd, 0x3a, 0x6d,
	0x5d, 0xbb, 0xc1, 0xf4, 0xaa, 0x79, 0xb1, 0x73, 0x5b, 0xe8, 0x0d, 0x1e, 0x56, 0xff, 0xea, 0x16,
	0x2c, 0x8f, 0x5d, 0x65, 0xe4, 0x1e, 0xe4, 0xfd, 0x1e, 0xeb, 0xe8, 0x20, 0x2b, 0x87, 0xc3, 0x3e,
	0x87, 0x04, 0x15, 0x61, 0x3d, 0x82, 0x05, 0xcd, 0xe4, 0x97, 0x91, 0xaf, 0x62, 0x43, 0xbf, 0xc7,
	0x4d, 0x16, 0x32, 0xfd, 0xd9, 0xfa, 0x3a, 0x2d, 0x23, 0x77, 0x0f, 0x99, 0x4d, 0xbf, 0xc7, 0xc9,
	0x3a, 0x10, 0x95, 0x0a, 0xea, 0xd2, 0x87, 0xa7, 0x0c, 0x45, 0xe8, 0x72, 0x5b, 0x60, 0xdb, 0x58,
	0xa7, 0x95, 0x1e, 0xbb, 0xc4, 0x62, 0xc7, 0xae, 0xe1, 0x91, 0x1a, 0x14, 0xf4, 0x2b, 0xf4, 0x70,
	0xcf, 0xe8, 0x9a, 0xc1, 0x33, 0x0a, 0x48, 0xd5, 0xc3, 0x1c, 0x41, 0xf9, 0x82, 0xb3, 0xa4, 0xab,
	0xe2, 0x0c, 0x16, 0x45, 0x3a, 0xac, 0x55, 0x1e, 0xf6, 0xd5, 0x9b, 0x6e, 0xae, 0xb5, 0x6f, 0x35,
	0xde, 0xa1, 0x86, 0xa3, 0xa5, 0x8b, 0xa1, 0x67, 0xf2, 0x10, 0x2a, 0x6e, 0x20, 0xfa, 0x9e, 0x74,
	0x74, 0x78, 0xa3, 0x06, 0x47, 0xe7, 0x08, 0x25, 0x4d, 0xc7, 0xd8, 0x52, 0x0d, 0xd1, 0x2e, 0xbc,
	0xcd, 0x42, 0xbf, 0xa7, 0x0b, 0xb4, 0x1e, 0x77, 0x79, 0xc0, 0x63, 0xfb, 0x10, 0xb0, 0x2b, 0x34,
	0x22, 0x53, 0xd8, 0xf7, 0xd5, 0x54, 0x6e, 0x37, 0x23, 0xb6, 0xab, 0xa4, 0x56, 0xff, 0xc5, 0x34,
	0x94, 0x86, 0x9b, 0x84, 0x21, 0xe3, 0xa0, 0x82, 0xa4, 0x3c, 0x5c, 0x91, 0xe6, 0xdd, 0xb4, 0x50,
	0x74, 0x0e, 0xf3, 0x76, 0x4c, 0x30, 0x62, 0x9f, 0xc2, 0x2c, 0xfa, 0xe4, 0x6f, 0x68, 0x40, 0xec,
	0xa3, 0x0e, 0xeb, 0x2f, 0x06, 0x0f, 0xe4, 0x01, 0x00, 0x57, 0xe9, 0x0a, 0x6a, 0xeb, 0x4c, 0x04,
	0x4b, 0x61, 0x03, 0xa2, 0xca, 0x3e, 0x44, 0xc4, 0x5c, 0x95, 0x81, 0xe9, 0xa4, 0xc4, 0x3e, 0x2a,
	0xa7, 0xdc, 0x16, 0x1d, 0xc7, 0xe3, 0x2a, 0xa9, 0xbc, 0x32, 0xb9, 0x09, 0xb4, 0x45, 0x67, 0x57,
	0x53, 0xc8, 0x0a, 0xdc, 0x92, 0x11, 0xe7, 0xde, 0xba, 0xae, 0xde, 0x51, 0xf3, 0x94, 0xd2, 0x1f,
	0xeb, 0xf1, 0x34, 0xf4, 0xc7, 0x29, 0x7d, 0x43, 0x17, 0xe5, 0x0c, 0x7d, 0x23, 0xa5, 0x3f, 0x41,
	0xdb, 0x68, 0xe9, 0x4f, 0x6a, 0x2f, 0xa0, 0x90, 0xe9, 0x19, 0x59, 0x82, 0xca, 0xd1, 0xb1, 0xd3,
	0xa0, 0x7b, 0x3b, 0xf5, 0x46, 0xbd, 0xb9, 0xa5, 0xbc, 0x6c, 0xe5, 0x2d, 0x32, 0x07, 0x33, 0x18,
	0x82, 0xe4, 0xd4, 0x7f, 0x27, 0x47, 0xc7, 0xdf, 0x56, 0xa6, 0x56, 0xff, 0x5d, 0x0e, 0x4a, 0xc3,
	0xc6, 0x93, 0x3c, 0x81, 0x45, 0x16, 0x04, 0xe2, 0x42, 0xc7, 0x87, 0x4c, 0x3a, 0xb8, 0x62, 0x87,
	0xf2, 0xe0, 0x0a, 0x0a, 0xa8, 0x20, 0x71, 0x4b, 0xd6, 0x15, 0x97, 0x3c, 0x83, 0x25, 0xb5, 0x41,
	0xda, 0xca, 0x4f, 0x59, 0x33, 0xae, 0xe2, 0x0e, 0xbd, 0xa9, 0x66, 0x36, 0x9e, 0xae, 0xaf, 0xd3,
	0x85, 0x1e, 0xbb, 0xdc, 0x8f, 0x39, 0x37, 0xef, 0xa3, 0x5c, 0x92, 0xdf, 0xc1, 0x1d, 0xa5, 0x16,
	0xc5, 0xbc, 0xe7, 0xf7, 0x7b, 0x43, 0x9a, 0x7a, 0x73, 0xcd, 0x3c, 0x7d, 0xb9, 0xbe, 0x4e, 0x15,
	0x76, 0x43, 0xcb, 0x0c, 0x94, 0x57, 0xff, 0xd9, 0x14, 0x14, 0x32, 0x96, 0x41, 0xcd, 0x82, 0x0e,
	0xfe, 0xd1, 0xc8, 0x9b, 0x30, 0x01, 0x34, 0x49, 0xc9, 0x91, 0xdf, 0xc1, 0xaa, 0x27, 0x5c, 0xe9,
	0xb0, 0x7e, 0x22, 0x1c, 0x4f, 0x5c, 0x84, 0x81, 0x60, 0x5e, 0x9a, 0x30, 0xe8, 0xe0, 0xe0, 0x8e,
	0x92, 0xd8, 0xea, 0x27, 0x62, 0xd7, 0xf0, 0x6d, 0xe2, 0xf0, 0x39, 0xdc, 0x1b, 0xa3, 0x8c, 0x16,
	0xf8, 0x9c, 0x05, 0xa6, 0x62, 0x55, 0x1d, 0xd5, 0xae, 0x1b, 0xbe, 0xb2, 0xc5, 0x03, 0xf5, 0x7e,
	0x34, 0xf4, 0x66, 0x5d, 0xca, 0x58, 0xb6, 0xba, 0xa7, 0x51, 0xf6, 0xbd, 0x4f, 0x60, 0xe5, 0x9a,
	0xa2, 0xde, 0x82, 0xfa, 0xe4, 0x63, 0x71, 0x58, 0x0d, 0xf7, 0x5d, 0xed, 0xbf, 0xcf, 0xc2, 0xd2,
	0x3e, 0x4f, 0xdc, 0xae, 0x1f, 0x76, 0x86, 0x22, 0xaa, 0xe7, 0xb0, 0xa2, 0x06, 0xdc, 0xd8, 0x74,
	0xe9, 0x44, 0x3c, 0x76, 0x7e, 0xec, 0xf3, 0xf8, 0x0a, 0x87, 0x6b, 0x56, 0x2d, 0xf9, 0xc5, 0x1e,
	0xbb, 0x34, 0xb6, 0x5b, 0x36, 0x78, 0xfc, 0x8d, 0xe2, 0x92, 0x2f, 0xe0, 0xed, 0xb6, 0x88, 0x5d,
	0x35, 0xb4, 0x63, 0xb5, 0xe7, 0xb1, 0x0b, 0x55, 0x94, 0x39, 0x1c, 0xa3, 0xff, 0x00, 0xe6, 0xa5,
	0x88, 0x13, 0xa7, 0xc5, 0x12, 0xb7, 0xcb, 0x25, 0xfa, 0xb0, 0x39, 0x5a, 0x50, 0xb4, 0x6d, 0x4d,
	0x22, 0x1f, 0x28, 0xf7, 0x70, 0xe9, 0xa8, 0xb0, 0x09, 0x0b, 0x2f, 0x7a, 0xe9, 0xe4, 0x36, 0x94,
	0xc5, 0xbf, 0xdc, 0x35, 0x54, 0x65, 0x57, 0x95, 0x14, 0xae, 0xc9, 0xf8, 0xca, 0xac, 0x92, 0xdc,
	0x06, 0x85, 0x1e, 0xbb, 0xac, 0x6b, 0xa2, 0x95, 0x49, 0x78, 0x1c, 0x33, 0x3f, 0xcc, 0xd8, 0xde,
	0x1e, 0xbb, 0x6c, 0x6a, 0xa2, 0x7d, 0x9b, 0x0d, 0xae, 0xf4, 0x60, 0x2a, 0x21, 0xa5, 0x6a, 0xe3,
	0x29, 0xf2, 0x44, 0x2f, 0x6b, 0x9b, 0x85, 0xf4, 0x78, 0xc2, 0x54, 0x2a, 0x81, 0xbb, 0x18, 0x07,
	0x4b, 0xb9, 0x85, 0x5d, 0xcd, 0x3d, 0x34, 0x4c, 0xf2, 0x09, 0x54, 0xb2, 0x4a, 0xa8, 0x70, 0x3b,
	0xad, 0x19, 0x0f, 0x14, 0x54, 0xc2, 0x41, 0x36, 0xa1, 0xaa, 0x3d, 0x4b, 0x28, 0xfb, 0x3d, 0x15,
	0x21, 0xaa, 0x59, 0x73, 0xd0, 0x86, 0x0e, 0x0a, 0xf2, 0xcb, 0xe8, 0x5e, 0xb4, 0x04, 0x4e, 0x2b,
	0x55, 0x7c, 0xf2, 0x4c, 0x4f, 0x66, 0x14, 0x0b, 0x87, 0xbb, 0x43, 0x9a, 0x79, 0xad, 0xb9, 0x8e,
	0xed, 0x6b, 0xc4, 0x62, 0xcf, 0xcd, 0xa8, 0x3d, 0x84, 0x8a, 0x64, 0x6d, 0xee, 0x88, 0x73, 0x1e,
	0xb3, 0x20, 0x70, 0x7e, 0x8c, 0xa4, 0xae, 0xc3, 0xd3, 0x92, 0xa2, 0x1f, 0x6b, 0xf2, 0x37, 0x91,
	0x4c, 0x25, 0xcd, 0x68, 0xa3, 0x64, 0x61, 0x20, 0x69, 0xc6, 0x5b, 0x49, 0x6e, 0xc3, 0x82, 0xce,
	0x41, 0xa4, 0xd3, 0x16, 0xb1, 0xa3, 0x42, 0x03, 0x89, 0x31, 0x46, 0x7e, 0x73, 0x65, 0x10, 0x1e,
	0xdc, 0xef, 0x48, 0x65, 0x9e, 0x5d, 0xf5, 0x3f, 0x2d, 0x1b, 0x85, 0x7d, 0x11, 0x7f, 0xa5, 0xc4,
	0xc9, 0x07, 0x50, 0xea, 0x0a, 0xb5, 0xac, 0x2c, 0x82, 0x49, 0x5c, 0xe7, 0x91, 0x6a, 0xc4, 0x6a,
	0xff, 0x2d, 0x07, 0x77, 0x94, 0x4f, 0x3e, 0x64, 0x6a, 0x75, 0xf3, 0xa1, 0xd5, 0xfd, 0x0e, 0x00,
	0x56, 0x0f, 0xe3, 0x8c, 0xd7, 0xcf, 0x6b, 0x8a, 0xf2, 0x69, 0xbf, 0xc1, 0xb4, 0x57, 0x39, 0xfb,
	0x9e, 0x56, 0x36, 0x7b, 0xbe, 0xe8, 0xcb, 0xe6, 0x80, 0x48, 0x3e, 0x82, 0xa2, 0x77, 0xc1, 0x83,
	0x00, 0x25, 0x9d, 0x9e, 0x35, 0x45, 0xd3, 0xcf, 0xd6, 0xd7, 0x69, 0x01, 0x39, 0xf8, 0x7e, 0x49,
	0x0e, 0xe1, 0x3d, 0xcf, 0x97, 0x2e, 0x8e, 0xa3, 0xae, 0xc3, 0x0d, 0x8e, 0x14, 0x7b, 0x3c, 0xe1,
	0x26, 0x23, 0x98, 0xdd, 0x9c, 0x7d, 0xfc, 0x6c, 0x7d, 0x7d, 0x9d, 0xbe, 0x33, 0x22, 0x6d, 0xcf,
	0x14, 0x0f, 0x51, 0xb6, 0xf6, 0x9f, 0xa6, 0x60, 0x51, 0x6d, 0xe4, 0xc8, 0x67, 0x43, 0xbd, 0xfa,
	0x23, 0x2c, 0xda, 0x85, 0xe7, 0x8c, 0x76, 0x6f, 0x73, 0xd5, 0x44, 0x61, 0x6e, 0xeb, 0x6c, 0x3d,
	0x1b, 0x88, 0xb9, 0xad, 0x33, 0xba, 0x60, 0xd5, 0x4e, 0xd2, 0x21, 0xf8, 0x23, 0x2c, 0x7a, 0x3c,
	0x4a, 0xba, 0x3d, 0x16, 0x65, 0xb1, 0xa6, 0x7e, 0x19, 0xcb, 0xaa, 0x0d, 0xb0, 0x36, 0x60, 0x49,
	0xf7, 0xa6, 0xa3, 0xd7, 0x52, 0xc0, 0xae, 0x10, 0x0c, 0x2b, 0x9e, 0x9b, 0x6f, 0x51, 0x62, 0xb9,
	0xc7, 0x9a, 0xa9, 0x74, 0x3e, 0x84, 0x72, 0x66, 0xfb, 0xe2, 0x82, 0xd2, 0xbe, 0xb4, 0x38, 0xd8,
	0xbf, 0x6a, 0x3d, 0x7d, 0x06, 0x77, 0x95, 0x5c, 0xda, 0xef, 0xb4, 0xd1, 0x4a, 0x43, 0xfb, 0x57,
	0xb5, 0xf6, 0xed, 0x9e, 0xdb, 0x35, 0xec, 0x6f, 0x22, 0x59, 0xeb, 0x40, 0x79, 0xe7, 0xa4, 0x3e,
	0x34, 0x82, 0x8f, 0x60, 0x51, 0xb2, 0x5e, 0x14, 0xa8, 0xf0, 0x37, 0xe2, 0xb1, 0xcb, 0xc3, 0xc4,
	0xba, 0xb4, 0x59, 0x4a, 0x2c, 0xab, 0x91, 0x72, 0xc8, 0xfb, 0x50, 0xe4, 0x97, 0x11, 0x8f, 0xfd,
	0x1e, 0x0f, 0x13, 0x7d, 0x76, 0x81, 0x2b, 0x71, 0x40, 0xac, 0x7b, 0xb5, 0xff, 0x3a, 0x0d, 0xa5,
	0x13, 0xce, 0x62, 0xb7, 0xdb, 0x64, 0xad, 0x74, 0x01, 0x66, 0xea, 0x54, 0x2a, 0xb8, 0x99, 0xcb,
	0x56, 0xa8, 0xb6, 0x20, 0x9f, 0xb0, 0x96, 0x83, 0xc7, 0x6b, 0x13, 0x55, 0x0f, 0xe7, 0x12, 0xd6,
	0x3a, 0x50, 0x5a, 0xe4, 0x2e, 0xcc, 0xa5, 0xb5, 0x43, 0x5d, 0x5a, 0xbe, 0x6d, 0xeb, 0x86, 0x1f,
	0x41, 0xf9, 0xdc, 0xe7, 0x17, 0x2a, 0x25, 0xb7, 0x39, 0xa6, 0xae, 0x28, 0x97, 0x2c, 0xd9, 0x64,
	0x98, 0x5f, 0x41, 0xde, 0x0f, 0xa3, 0x7e, 0xe2, 0xb4, 0xc4, 0xa5, 0x89, 0x38, 0x3f, 0xb9, 0xd6,
	0x8c, 0xa1, 0x8e, 0xad, 0xd5, 0x95, 0xfc, 0xb6, 0xb8, 0xac, 0x87, 0x6d, 0x41, 0xe7, 0x7c, 0xf3,
	0x34, 0x5a, 0x43, 0xbc, 0xf5, 0x06, 0x35, 0xc4, 0xd5, 0x7f, 0x94, 0x83, 0xf9, 0x2c, 0x3c, 0xd9,
	0x84, 0x59, 0x3d, 0x42, 0x6a, 0xfc, 0x6e, 0x3a, 0x42, 0x5a, 0x45, 0x4d, 0x00, 0x3a, 0x24, 0xe7,
	0x9c, 0xc7, 0x2d, 0x53, 0x1d, 0xc9, 0x23, 0xe5, 0x35, 0x8f, 0x5b, 0x6a, 0x5e, 0x35, 0x3b, 0x8a,
	0x79, 0xc4, 0x43, 0xcf, 0x56, 0xe7, 0x91, 0xd8, 0xd0, 0xb4, 0xda, 0xff, 0x9b, 0x86, 0xf9, 0x1d,
	0xd1, 0x8a, 0x59, 0xe8, 0xa5, 0x67, 0x44, 0x81, 0xe8, 0x08, 0xb3, 0xeb, 0xf0, 0x8c, 0x58, 0x3d,
	0xab, 0x31, 0xff, 0x1d, 0xdc, 0x56, 0xc6, 0x5b, 0xc4, 0x9e, 0x99, 0xcf, 0x6b, 0xc5, 0xb1, 0x2c,
	0xd2, 0xda, 0x8e, 0x92, 0xa4, 0xb7, 0x2e, 0xf1, 0xaf, 0x52, 0xbe, 0x32, 0xca, 0xd3, 0x37, 0x57,
	0xbe, 0xd2, 0xca, 0xc7, 0x90, 0x4f, 0x7c, 0xee, 0x44, 0xc2, 0x0f, 0x75, 0x91, 0xbc, 0xb4, 0xf1,
	0x9b, 0x3f, 0xa9, 0xde, 0xf4, 0x79, 0x43, 0x09, 0x6f, 0x16, 0xb6, 0x8f, 0x9b, 0xcd, 0xe3, 0x43,
	0xe7, 0x60, 0x6f, 0xbf, 0x49, 0xe7, 0x12, 0x43, 0x56, 0x5e, 0x53, 0xba, 0x31, 0xe7, 0xa1, 0x23,
	0xfd, 0x9f, 0xb4, 0x43, 0xcc, 0x29, 0x17, 0x02, 0x9a, 0x7a, 0xe2, 0xff, 0xc4, 0x57, 0xbf, 0x82,
	0x59, 0xfd, 0xf6, 0x3b, 0xf6, 0x06, 0x89, 0x1a, 0x0f, 0x14, 0xd3, 0xcf, 0xe4, 0x43, 0x28, 0xf8,
	0xd2, 0x89, 0x79, 0x80, 0xb7, 0x26, 0xb4, 0x81, 0xb5, 0x05, 0x56, 0xf0, 0x25, 0x35, 0x8c, 0xda,
	0x3f, 0xcf, 0xc1, 0x9c, 0x6d, 0x11, 0x99, 0x87, 0xb9, 0xe6, 0x71, 0x03, 0x1b, 0x54, 0x79, 0x8b,
	0x94, 0x00, 0xd4, 0x93, 0x3e, 0x89, 0xaa, 0xe4, 0x48, 0x11, 0xf2, 0xea, 0x99, 0xd6, 0x5f, 0x7d,
	0xd5, 0xac, 0x4c, 0x29, 0xe1, 0xc3, 0xfa, 0xae, 0x16, 0x9e, 0x56, 0xc2, 0xea, 0xc9, 0x08, 0xcf,
	0x28, 0x61, 0xf5, 0xac, 0x85, 0x67, 0x49, 0x19, 0xb2, 0xbd, 0xad, 0xdc, 0x22, 0x0b, 0x50, 0x34,
	0x04, 0xa3, 0x72, 0x9b, 0x54, 0x60, 0xde, 0x90, 0xb4, 0xd6, 0x5c, 0xed, 0xef, 0xe7, 0xa0, 0xba,
	0x6b, 0x2a, 0xf2, 0xbb, 0x83, 0x62, 0xac, 0x5e, 0x0d, 0x75, 0x28, 0xa6, 0x15, 0x7c, 0xac, 0xc1,
	0xe5, 0x26, 0xd8, 0xc8, 0x69, 0xf1, 0x1f, 0x6b, 0x75, 0xa3, 0x87, 0x01, 0xe6, 0x7e, 0x4f, 0xe6,
	0x30, 0xa0, 0x76, 0x0a, 0x0b, 0xd9, 0xba, 0x68, 0x7a, 0xc9, 0x24, 0x5b, 0x45, 0xd5, 0x6b, 0x12,
	0xe4, 0xa0, 0x72, 0x3a, 0x10, 0xc0, 0xe8, 0x63, 0x2a, 0x2b, 0xa0, 0x3a, 0x56, 0xdb, 0x81, 0xca,
	0xc9, 0x85, 0x10, 0x51, 0x83, 0xc5, 0xac, 0x97, 0x5a, 0xc9, 0x25, 0x99, 0xb0, 0x38, 0xc1, 0x04,
	0xd7, 0xf1, 0x43, 0xeb, 0xc3, 0xf0, 0xe2, 0x0f, 0x5d, 0x40, 0x9e, 0xca, 0x6f, 0xeb, 0xa1, 0x71,
	0x58, 0xff, 0x76, 0x0a, 0x48, 0x43, 0xc8, 0xc4, 0x0f, 0x3b, 0xda, 0x2b, 0x68, 0x9c, 0x97, 0x30,
	0x33, 0xf1, 0xb8, 0xa0, 0x06, 0xf9, 0x43, 0xc6, 0xb8, 0x4d, 0x62, 0x1e, 0x53, 0x13, 0x78, 0x04,
	0x95, 0x48, 0xc8, 0xc4, 0xb9, 0xf0, 0x7f, 0x62, 0xb1, 0xa7, 0x6b, 0xf6, 0xd3, 0x13, 0x00, 0x95,
	0x94, 0xf6, 0xb7, 0xa8, 0x8c, 0x55, 0xfc, 0x23, 0xa8, 0x60, 0xc9, 0x4e, 0xf6, 0x5b, 0x3d, 0x3f,
	0xd1, 0x78, 0x33, 0x93, 0xe0, 0x29, 0xed, 0x13, 0x54, 0x56, 0x78, 0xb5, 0x7f, 0x90, 0x83, 0x15,
	0x7d, 0xc5, 0x8a, 0xc5, 0x57, 0x76, 0x85, 0xd9, 0xc8, 0x7c, 0xda, 0xda, 0x97, 0x9b, 0xa2, 0x2b,
	0x85, 0x74, 0xb4, 0xa7, 0x26, 0x50, 0x44, 0x8d, 0xda, 0x3f, 0xce, 0x41, 0xe9, 0x40, 0x0c, 0x4d,
	0x5d, 0xda, 0x88, 0xdc, 0x64, 0x8d, 0x58, 0x81, 0x5b, 0x3a, 0x99, 0x31, 0x11, 0x95, 0x79, 0x22,
	0x6b, 0xb0, 0x90, 0x74, 0x63, 0x91, 0x24, 0xe8, 0x7a, 0xdb, 0xcc, 0x4d, 0x44, 0x6c, 0x63, 0xf6,
	0xc7, 0xb4, 0x32, 0xe0, 0xed, 0x23, 0xab, 0xf6, 0x6f, 0xf6, 0xa0, 0xbc, 0x17, 0x7a, 0x27, 0xa1,
	0x1f, 0x45, 0x3c, 0xb1, 0x6d, 0x9a, 0xed, 0x09, 0x8f, 0xdb, 0x56, 0x5d, 0xf3, 0x2e, 0xa3, 0x57,
	0xd6, 0xa8, 0x16, 0x27, 0x07, 0x50, 0x66, 0xfd, 0xa4, 0x3b, 0x1a, 0xe6, 0xdc, 0xb4, 0x5f, 0x45,
	0xa5, 0x3c, 0x08, 0x76, 0x9e, 0x81, 0xad, 0xf8, 0xa9, 0x4c, 0xac, 0xcb, 0xc3, 0xc4, 0x77, 0x07,
	0xb5, 0x02, 0x95, 0xbd, 0x69, 0xee, 0xd6, 0x10, 0x93, 0xbc, 0x82, 0x42, 0xaf, 0xcd, 0x1d, 0x13,
	0xea, 0x56, 0x67, 0xd0, 0xd9, 0x7e, 0x78, 0xb3, 0x32, 0x3c, 0x85, 0x9e, 0xa5, 0x4b, 0xb2, 0x06,
	0x25, 0x05, 0x14, 0x30, 0x15, 0xc2, 0xa8, 0x4d, 0xab, 0xeb, 0xc7, 0x9b, 0x73, 0xdd, 0xe0, 0xf3,
	0x0f, 0xfe, 0xbc, 0x1b, 0xfc, 0x05, 0x9d, 0xef, 0xb5, 0xf9, 0x01, 0x0b, 0x3b, 0xb8, 0xa5, 0x55,
	0xe8, 0xce, 0x3c, 0xa9, 0x7a, 0xad, 0x56, 0x6d, 0xc2, 0xe3, 0x50, 0xda, 0x4a, 0x0f, 0xf3, 0xe4,
	0x69, 0x1c, 0x34, 0x0c, 0x95, 0xbc, 0x86, 0xa5, 0x98, 0x9f, 0xf3, 0x58, 0x72, 0xa7, 0xc3, 0x85,
	0x2b, 0x3c, 0x33, 0x58, 0x93, 0x1c, 0xd6, 0x11, 0x83, 0xf0, 0xca, 0x00, 0xa8, 0x11, 0x3b, 0x80,
	0x07, 0xd7, 0x70, 0xb1, 0xa8, 0xed, 0x8a, 0x40, 0xb9, 0x67, 0xa9, 0x06, 0x6f, 0x4e, 0xaf, 0x85,
	0x27, 0xf4, 0xdd, 0x11, 0x84, 0x86, 0x91, 0x7c, 0xad, 0x05, 0xc9, 0x1f, 0xe0, 0xae, 0x3c, 0xbb,
	0x72, 0x52, 0x73, 0xe9, 0x4b, 0x87, 0x9d, 0x33, 0x3f, 0xc0, 0x45, 0x97, 0x3d, 0xeb, 0x5b, 0x91,
	0x67, 0xe9, 0xce, 0xaa, 0xcb, 0x2d, 0x2b, 0xa3, 0xb6, 0xf2, 0x10, 0x80, 0xea, 0x22, 0x4c, 0xb2,
	0x95, 0x33, 0xb8, 0xaa, 0x7b, 0x7f, 0x17, 0xee, 0x7a, 0xbc, 0xcd, 0xfa, 0x41, 0xe2, 0x5c, 0xf0,
	0x96, 0x13, 0xa9, 0x28, 0xd8, 0x0f, 0x13, 0x7d, 0x32, 0x3c, 0xc9, 0x15, 0xa5, 0x65, 0x03, 0xf3,
	0x2d, 0x6f, 0x35, 0x58, 0x87, 0xd7, 0xc3, 0x04, 0x0f, 0x8a, 0x3f, 0x85, 0x85, 0xb0, 0xdf, 0x73,
	0xb4, 0x45, 0xee, 0x47, 0x4e, 0xe2, 0x47, 0xd2, 0xdc, 0x53, 0x9a, 0x7a, 0xfc, 0x82, 0x96, 0xc2,
	0x7e, 0xef, 0x44, 0xf1, 0x4e, 0xa3, 0xa6, 0x1f, 0x49, 0x72, 0x0c, 0x0b, 0x43, 0xa2, 0xd8, 0x8c,
	0xe2, 0x44, 0xfd, 0x1b, 0xa0, 0xe9, 0x53, 0xe8, 0x65, 0xf5, 0x7e, 0x95, 0x5c, 0x0e, 0xb7, 0xe1,
	0x09, 0x46, 0xcd, 0xaa, 0x71, 0x8d, 0x58, 0x64, 0x9b, 0xf0, 0x1a, 0x96, 0xaf, 0x49, 0x63, 0x33,
	0x9e, 0x4e, 0x74, 0x61, 0x6b, 0x08, 0x54, 0xb5, 0xe4, 0x5b, 0x58, 0x46, 0x4c, 0x0b, 0x99, 0x8e,
	0xf2, 0x97, 0x93, 0xac, 0x50, 0x03, 0xa1, 0x40, 0xed, 0x10, 0x9f, 0xc0, 0x22, 0xde, 0x95, 0xe8,
	0xf4, 0x7d, 0x2f, 0x33, 0x79, 0xa5, 0x09, 0x60, 0x2b, 0x0a, 0xe0, 0x95, 0xd2, 0xb7, 0xa0, 0x7f,
	0x0e, 0x77, 0xcc, 0x61, 0x99, 0xa3, 0xb2, 0x09, 0x1e, 0x0f, 0x80, 0xcb, 0x13, 0x00, 0x2f, 0x19,
	0x90, 0x1d, 0xc4, 0xb0, 0xe0, 0x0e, 0xdc, 0x6d, 0xf5, 0xa5, 0x1f, 0x72, 0x29, 0x9d, 0xc0, 0x47,
	0xcf, 0x3b, 0x80, 0xaf, 0x4c, 0x00, 0xbf, 0x62, 0x61, 0x0e, 0x34, 0xca, 0x98, 0xd6, 0xb3, 0x50,
	0x5e, 0x64, 0x5b, 0xbf, 0xf0, 0x06, 0xad, 0xdf, 0x42, 0x0c, 0x0b, 0xfe, 0x3d, 0xac, 0x58, 0x70,
	0x95, 0xe5, 0xba, 0x03, 0x6c, 0x32, 0x01, 0xf6, 0xa2, 0xc1, 0x68, 0x2a, 0x08, 0x0b, 0xfd, 0x17,
	0x50, 0xb5, 0xd0, 0xf6, 0xbc, 0x22, 0x05, 0x5f, 0x9c, 0x64, 0x33, 0x1a, 0x14, 0x53, 0xc0, 0xb2,
	0xf0, 0x7f, 0x84, 0x12, 0x67, 0x71, 0xd2, 0x1d, 0x80, 0x2e, 0x4d, 0x12, 0xf4, 0xa1, 0xae, 0xc5,
	0x52, 0x7e, 0xc9, 0xf3, 0x1c, 0x57, 0x84, 0x89, 0x4a, 0x2e, 0xed, 0x25, 0x90, 0x9b, 0xfb, 0x25,
	0xcf, 0xdb, 0xd1, 0xba, 0x0a, 0x8d, 0xc1, 0xaa, 0x3c, 0xe3, 0x89, 0xdb, 0xed, 0x47, 0x4e, 0x28,
	0x54, 0xaf, 0x65, 0xc2, 0x82, 0x80, 0x7b, 0x08, 0xbc, 0x32, 0x01, 0xf0, 0x1d, 0x8b, 0x73, 0x24,
	0x92, 0xba, 0x45, 0x51, 0xaf, 0xa0, 0x40, 0xd2, 0x57, 0xf0, 0x38, 0x16, 0xda, 0x3d, 0xdc, 0x99,
	0x64, 0x97, 0x58, 0xfd, 0x3d, 0xa5, 0x6e, 0x02, 0x35, 0xac, 0x15, 0x07, 0xbe, 0xcb, 0x43, 0x63,
	0x8d, 0xab, 0x13, 0x05, 0x56, 0x31, 0xe7, 0x07, 0x5a, 0xd9, 0x0c, 0xaa, 0xb2, 0x3d, 0x59, 0xb8,
	0xbb, 0x93, 0x0c, 0x6a, 0x14, 0x8b, 0x0c, 0xda, 0x2b, 0x98, 0x4f, 0xfa, 0x89, 0x88, 0x7d, 0xa6,
	0x27, 0x7b, 0x7d, 0x92, 0xdb, 0x1b, 0x56, 0x53, 0x01, 0xfd, 0x00, 0x2b, 0x67, 0xfc, 0xaa, 0x25,
	0x54, 0x30, 0x2a, 0xbb, 0x22, 0x4e, 0xdc, 0x7e, 0xa2, 0x6d, 0xe2, 0xe3, 0x49, 0x76, 0x93, 0xc5,
	0x38, 0xb1, 0x10, 0x0a, 0xbb, 0x01, 0x0b, 0x31, 0x0f, 0x38, 0xa6, 0x21, 0x22, 0xe1, 0x1a, 0x76,
	0x63, 0x92, 0x9b, 0xe4, 0x46, 0xfd, 0x48, 0x69, 0x2b, 0xc4, 0x4f, 0xa0, 0xd4, 0x55, 0x96, 0x10,
	0x8d, 0x22, 0x26, 0x0e, 0xab, 0xd9, 0xf4, 0x6d, 0x5e, 0x31, 0x4f, 0x25, 0x8f, 0xb1, 0x70, 0xf9,
	0x01, 0x14, 0xfa, 0xe8, 0xda, 0x1d, 0x95, 0x0b, 0x57, 0xef, 0x65, 0x8f, 0xbe, 0xfb, 0xca, 0x8f,
	0x1f, 0x88, 0x8e, 0x20, 0x1c, 0xde, 0x4e, 0xeb, 0xa0, 0x83, 0x44, 0x0a, 0xc3, 0x12, 0xbc, 0x86,
	0xf1, 0xf6, 0x04, 0xed, 0xb5, 0x97, 0x41, 0x32, 0x19, 0xd9, 0x69, 0xac, 0xaf, 0x7a, 0x7c, 0x01,
	0xcb, 0x83, 0xd7, 0x68, 0xa7, 0x8c, 0x47, 0x4a, 0xd5, 0x77, 0xee, 0xe7, 0x1e, 0x16, 0xf1, 0x86,
	0xf2, 0xe3, 0x8d, 0x97, 0x8f, 0x9f, 0xaf, 0xbf, 0xa0, 0x8b, 0x29, 0x0a, 0xca, 0xe1, 0xa9, 0x1d,
	0xf9, 0x6e, 0xa0, 0x9f, 0x1e, 0xd6, 0xe2, 0x78, 0x3e, 0x9b, 0xc4, 0x30, 0x19, 0x88, 0xf4, 0x38,
	0x57, 0x8d, 0x69, 0x1d, 0x4a, 0xe6, 0xfa, 0x8b, 0x3d, 0xf6, 0x7c, 0xf7, 0x67, 0x52, 0xfd, 0x6b,
	0x27, 0x5a, 0xb4, 0xe8, 0x66, 0x69, 0xe4, 0x18, 0x2a, 0x6d, 0x53, 0xd3, 0x4f, 0xc1, 0xde, 0x1b,
	0xdf, 0xbe, 0x71, 0xb5, 0x7f, 0x5a, 0x6e, 0x0f, 0x53, 0xc9, 0xf7, 0xb0, 0xa4, 0x4b, 0x9c, 0xba,
	0xf0, 0x99, 0x82, 0xde, 0x47, 0xd0, 0x8f, 0x46, 0x41, 0x7f, 0xa6, 0xea, 0x4a, 0x49, 0x72, 0x8d,
	0x41, 0xbe, 0x84, 0x82, 0x2b, 0xfd, 0x14, 0xf1, 0x01, 0x22, 0xbe, 0x77, 0xad, 0xcf, 0xc3, 0x75,
	0x3a, 0x0a, 0xae, 0xf4, 0x2d, 0xc2, 0xe7, 0x00, 0x12, 0x6b, 0x50, 0x4e, 0xc2, 0x5a, 0xd5, 0xda,
	0xf8, 0xab, 0xa6, 0xc3, 0x55, 0x2a, 0x9a, 0x97, 0xf6, 0x99, 0xfc, 0x01, 0xe6, 0x5d, 0x5d, 0xfd,
	0x70, 0xfc, 0xb0, 0x2d, 0xaa, 0xef, 0x23, 0xc0, 0xdb, 0x7f, 0xaa, 0x42, 0x42, 0x0b, 0x46, 0x03,
	0xab, 0x50, 0xc7, 0x50, 0x3a, 0x67, 0x81, 0xef, 0xa5, 0x11, 0x63, 0xf5, 0x03, 0x84, 0x78, 0x78,
	0xed, 0x42, 0xef, 0xcf, 0x14, 0x0a, 0x68, 0x11, 0xf5, 0x2d, 0x9b, 0xec, 0x43, 0x71, 0xe8, 0x06,
	0x54, 0xf5, 0x37, 0x88, 0xf7, 0xe0, 0x7a, 0x93, 0x46, 0xd2, 0x7d, 0x3a, 0xef, 0x66, 0x48, 0x6a,
	0xdf, 0x7b, 0x7c, 0x34, 0xb3, 0xf9, 0x70, 0x92, 0x7d, 0xaf, 0xd5, 0x07, 0xb9, 0xcd, 0xd7, 0x50,
	0x91, 0x17, 0x42, 0x44, 0x3a, 0xb1, 0xd0, 0x49, 0xff, 0x47, 0xe3, 0x93, 0xad, 0xd1, 0xa2, 0x01,
	0x2d, 0xcb, 0x94, 0x82, 0x8a, 0xe4, 0x8f, 0x50, 0x6e, 0xb5, 0xa4, 0x6d, 0x1b, 0x8e, 0xfd, 0xc3,
	0xf1, 0x2b, 0xfe, 0x7a, 0xe9, 0x80, 0x16, 0x5b, 0x2d, 0xa9, 0x9f, 0x71, 0x0e, 0xbe, 0x85, 0x15,
	0xac, 0xfe, 0x6a, 0xaf, 0x93, 0x85, 0xfc, 0xb3, 0x1b, 0x43, 0x2e, 0x2a, 0x04, 0xf4, 0x3b, 0x19,
	0xe0, 0x53, 0x20, 0x91, 0x4d, 0xc3, 0x07, 0x13, 0xfc, 0xf1, 0xf8, 0xec, 0x6c, 0x7c, 0xc2, 0x8e,
	0x9f, 0x16, 0x0c, 0xd3, 0xd5, 0x9a, 0x0d, 0x44, 0xc7, 0x34, 0xb4, 0xfa, 0x09, 0xb6, 0xf1, 0xdd,
	0xeb, 0xf7, 0xf5, 0x86, 0xda, 0x97, 0x0f, 0xec, 0xb3, 0xc9, 0x58, 0x45, 0xe4, 0xb3, 0x74, 0xe3,
	0xfc, 0x16, 0x31, 0xde, 0x1f, 0xc5, 0x18, 0x73, 0x4c, 0x40, 0x4b, 0x6c, 0x88, 0x48, 0x5e, 0x43,
	0xd1, 0x6c, 0x20, 0xbd, 0x7c, 0xaa, 0xcf, 0xc7, 0x5f, 0xa7, 0x19, 0xc9, 0xb7, 0xcd, 0x9e, 0xd2,
	0xab, 0xd0, 0xac, 0x3f, 0x99, 0x21, 0x91, 0x06, 0x14, 0x0c, 0x2e, 0xce, 0xc4, 0xa7, 0x88, 0xfa,
	0xe8, 0x66, 0xa8, 0xe9, 0x77, 0x52, 0xd4, 0x6c, 0x6e, 0x9c, 0x8d, 0x0e, 0xac, 0x0e, 0x3e, 0x06,
	0x53, 0x83, 0xe7, 0xbb, 0xdc, 0x49, 0x93, 0xb4, 0x35, 0xcc, 0x73, 0x3f, 0x36, 0x67, 0x13, 0x3d,
	0x16, 0xc9, 0xec, 0xd9, 0x84, 0x7a, 0x7e, 0xc4, 0x22, 0xff, 0x51, 0x8a, 0xf0, 0x88, 0xde, 0x49,
	0xff, 0x3f, 0xd1, 0x60, 0xdb, 0x26, 0x67, 0xdb, 0x87, 0x77, 0x06, 0x2f, 0x8a, 0x62, 0x81, 0xb5,
	0x1d, 0x5d, 0x10, 0xd6, 0x47, 0xaa, 0x8f, 0x06, 0x27, 0x3d, 0x83, 0x26, 0x35, 0xb4, 0x20, 0x1e,
	0x64, 0xe2, 0xf1, 0xaa, 0x8d, 0x36, 0xfa, 0x51, 0x27, 0x66, 0x9e, 0x6e, 0xe5, 0x8b, 0x09, 0xa3,
	0x8d, 0x53, 0xad, 0xab, 0x5a, 0xd5, 0x84, 0x45, 0x1d, 0x5c, 0xba, 0xa2, 0xd7, 0xeb, 0x87, 0x7e,
	0xa2, 0x8f, 0x51, 0x5e, 0x4e, 0x92, 0x35, 0x21, 0xc0, 0x8e, 0xd5, 0x37, 0x11, 0x91, 0x1e, 0x26,
	0x7d, 0xe5, 0x49, 0x21, 0x7e, 0x36, 0x49, 0x1b, 0xb5, 0xf2, 0x21, 0xd3, 0x39, 0xd8, 0x1e, 0x14,
	0x64, 0x97, 0xe1, 0xf7, 0x84, 0x0a, 0x69, 0x73, 0x02, 0x24, 0x30, 0x8a, 0x26, 0x94, 0x8c, 0x62,
	0xff, 0x9c, 0xb9, 0x57, 0x4e, 0x24, 0x02, 0xdf, 0xd5, 0x3d, 0xfd, 0xdd, 0x24, 0xa1, 0xa4, 0xd1,
	0x6f, 0xa0, 0xba, 0xc2, 0x7c, 0x0a, 0x8b, 0x9e, 0x70, 0x3a, 0x51, 0xd0, 0x97, 0x3a, 0x72, 0xc1,
	0xcb, 0xbd, 0xd5, 0xdf, 0x67, 0x43, 0x97, 0x8a, 0x27, 0x5e, 0x29, 0x01, 0x15, 0xbd, 0xe0, 0x1d,
	0x5f, 0xc2, 0x60, 0x31, 0x16, 0xee, 0x19, 0x5e, 0xac, 0x43, 0x1b, 0x83, 0xa5, 0x89, 0xea, 0xe7,
	0x37, 0xdb, 0x23, 0x54, 0xb8, 0x67, 0xcd, 0x98, 0x73, 0xb5, 0xf3, 0xcd, 0x0c, 0x58, 0xb4, 0x94,
	0x44, 0x1c, 0x2c, 0x1e, 0xf6, 0x64, 0x12, 0xfb, 0x91, 0xdd, 0x83, 0x5f, 0xa0, 0x89, 0x79, 0xfa,
	0x4b, 0xf8, 0xfb, 0x56, 0x2f, 0xbb, 0x0d, 0xcb, 0xed, 0x61, 0xaa, 0xbe, 0x57, 0x28, 0x2e, 0x1c,
	0xe9, 0x77, 0x42, 0x3f, 0x74, 0x5a, 0xfd, 0x24, 0x11, 0x61, 0xf5, 0x0f, 0xfa, 0x7a, 0xa4, 0xe2,
	0x9c, 0x20, 0x63, 0x1b, 0xe9, 0x2a, 0xfb, 0x52, 0x8b, 0xb6, 0xc7, 0x99, 0xec, 0xc7, 0xdc, 0xe9,
	0x47, 0x92, 0x07, 0x3a, 0xbc, 0xdd, 0x9a, 0x24, 0xc8, 0x89, 0x62, 0x71, 0xa8, 0x21, 0x4e, 0x11,
	0x41, 0x4d, 0xc1, 0x29, 0x2c, 0x29, 0xe8, 0x28, 0xf6, 0x55, 0x42, 0x33, 0x00, 0xde, 0x9e, 0x30,
	0xf1, 0x6f, 0x28, 0x80, 0x2c, 0x6c, 0x59, 0x65, 0xed, 0xd9, 0xf9, 0xd9, 0x41, 0xc4, 0x4f, 0x7f,
	0xd1, 0xda, 0x24, 0x2c, 0x1e, 0xcc, 0x4d, 0x51, 0x66, 0x1f, 0x55, 0x74, 0xdf, 0xe6, 0xdc, 0x6b,
	0x31, 0xf7, 0x0c, 0x5b, 0xb9, 0x3b, 0x49, 0x74, 0x6f, 0x35, 0x4d, 0x12, 0x23, 0x94, 0x27, 0xdd,
	0x50, 0x21, 0xb0, 0x8f, 0x51, 0x6d, 0x75, 0x6f, 0x92, 0x24, 0x46, 0x6b, 0x1f, 0x28, 0xe5, 0xd3,
	0x38, 0x58, 0xfd, 0x0f, 0x65, 0x58, 0xb8, 0x66, 0x7d, 0x89, 0x9b, 0xda, 0x71, 0xe3, 0x57, 0xf4,
	0x67, 0x37, 0x5f, 0x4c, 0x6c, 0xc7, 0x0d, 0x45, 0x3b, 0x1b, 0x6b, 0xd4, 0x8d, 0xeb, 0x39, 0x83,
	0x92, 0x08, 0x79, 0x4b, 0x5c, 0x5a, 0xfb, 0x8b, 0x5f, 0x6b, 0x15, 0x36, 0x76, 0x27, 0x7f, 0xcb,
	0x31, 0xe2, 0x18, 0xcb, 0x6b, 0x26, 0x40, 0x64, 0x69, 0x2a, 0x9b, 0x3e, 0xeb, 0x05, 0x8e, 0xe9,
	0x95, 0x3d, 0xc9, 0xbc, 0x71, 0x36, 0x7d, 0xd6, 0x0b, 0xf4, 0x5b, 0x4d, 0x66, 0xae, 0xb0, 0x62,
	0x1e, 0xda, 0xba, 0xe5, 0xcc, 0x84, 0x58, 0x14, 0x55, 0x6d, 0xa2, 0xab, 0xdb, 0xd4, 0xf5, 0x65,
	0x22, 0xe2, 0xab, 0xf4, 0x7e, 0xdc, 0xcd, 0x13, 0x5d, 0xd4, 0xff, 0x4a, 0xab, 0xdb, 0xca, 0x01,
	0x46, 0x2f, 0x91, 0xbd, 0x8c, 0x38, 0x3b, 0x51, 0xe5, 0x40, 0xe9, 0x36, 0xf4, 0xb5, 0xc5, 0xd5,
	0xbf, 0xce, 0xc3, 0x7c, 0x76, 0x0e, 0x7f, 0xc5, 0x49, 0x8b, 0x29, 0xf4, 0x4f, 0x4d, 0x5a, 0xe8,
	0x0f, 0x61, 0x06, 0xaf, 0xe5, 0x4d, 0xe3, 0x81, 0x63, 0xfd, 0xd7, 0xad, 0xc1, 0x35, 0xca, 0x65,
	0x3f, 0x48, 0x9a, 0x57, 0x11, 0xdf, 0x2c, 0xd3, 0xbd, 0x93, 0xd3, 0x83, 0xa6, 0x83, 0x97, 0xe5,
	0xbf, 0x3e, 0x3c, 0xa0, 0xf8, 0x1e, 0x35, 0x25, 0xdd, 0xa4, 0x17, 0xe8, 0x0f, 0xb9, 0xda, 0x22,
	0xee, 0x4d, 0x3c, 0xc5, 0x15, 0xa5, 0xdf, 0xb4, 0xea, 0x26, 0x71, 0x3e, 0xbb, 0x06, 0x39, 0xc9,
	0xac, 0x94, 0xcf, 0x46, 0x10, 0xcf, 0xa1, 0x2c, 0xfb, 0x51, 0x14, 0xe0, 0x81, 0x36, 0x0b, 0x9c,
	0xbe, 0x6f, 0x56, 0xcd, 0xe1, 0xaf, 0x1c, 0xa0, 0x93, 0x0c, 0xea, 0xa9, 0x4f, 0x4b, 0x72, 0xe8,
	0x99, 0xec, 0x02, 0xc8, 0x7e, 0xa7, 0xc3, 0x25, 0x1e, 0x44, 0xe4, 0x71, 0xc7, 0xde, 0xd4, 0x29,
	0xa7, 0x7a, 0xe4, 0x0c, 0x4c, 0xde, 0x14, 0xf0, 0xa4, 0x7a, 0x1b, 0x41, 0x7e, 0x75, 0xbb, 0x2d,
	0xde, 0x50, 0x5e, 0x16, 0xf0, 0x84, 0xec, 0xc2, 0x7c, 0xe6, 0xf0, 0xdf, 0xde, 0x26, 0xff, 0xe5,
	0x2b, 0x03, 0x43, 0x5a, 0xe4, 0x6b, 0x28, 0x99, 0x0e, 0x58, 0xa3, 0x38, 0x49, 0x29, 0xbf, 0x68,
	0x74, 0x75, 0x63, 0x57, 0xff, 0x65, 0x0e, 0x4a, 0xc3, 0x03, 0xfd, 0xc6, 0xe7, 0x60, 0xe9, 0xd5,
	0x85, 0x49, 0x36, 0x96, 0xb9, 0xba, 0x70, 0x0f, 0x6e, 0x99, 0x0f, 0x7f, 0xcd, 0x7d, 0xa3, 0xc7,
	0xcf, 0xd7, 0xa9, 0x21, 0xad, 0xfe, 0xe7, 0x9c, 0xbd, 0x6b, 0x12, 0x0c, 0xce, 0xc5, 0xde, 0xac,
	0x8d, 0x83, 0x03, 0xc3, 0x49, 0x8d, 0xc6, 0xe8, 0xdc, 0x4d, 0xbf, 0xc9, 0xdc, 0xd5, 0x9e, 0x03,
	0x0c, 0xf6, 0x3d, 0x59, 0x84, 0xd1, 0x9d, 0x5f, 0x79, 0x6b, 0x94, 0xf8, 0xdd, 0xe1, 0x41, 0x25,
	0xa7, 0xa6, 0x89, 0x5c, 0xf7, 0x2d, 0x18, 0x99, 0x9a, 0x94, 0x61, 0xd2, 0xe1, 0x00, 0xa3, 0xa8,
	0xef, 0x3b, 0x0f, 0xf7, 0x6d, 0xea, 0x4d, 0xfa, 0xb6, 0x7a, 0x01, 0xe5, 0x91, 0x44, 0x87, 0xfc,
	0x1e, 0x0a, 0xb6, 0x24, 0x35, 0xb8, 0xb5, 0x75, 0xef, 0x4f, 0x64, 0x33, 0x14, 0x8c, 0xbc, 0xbe,
	0x2f, 0x55, 0x34, 0x87, 0x67, 0xe6, 0xd4, 0x4f, 0xdf, 0xd4, 0xca, 0xfd, 0x48, 0xe7, 0x0d, 0x1d,
	0x53, 0xef, 0xd5, 0xaf, 0x61, 0xe1, 0x5a, 0x4c, 0xfa, 0xa6, 0x2b, 0x64, 0xf5, 0x7f, 0xe4, 0x61,
	0x69, 0x5c, 0x04, 0x7a, 0x6d, 0x90, 0x72, 0x6f, 0xb4, 0x79, 0xbf, 0x83, 0x65, 0x16, 0x04, 0xfc,
	0xca, 0x65, 0x38, 0x24, 0x4e, 0xc2, 0x7b, 0x51, 0xc0, 0x92, 0xc9, 0x56, 0xe4, 0xa2, 0x85, 0x38,
	0x8d, 0x83, 0xa6, 0x01, 0x20, 0x3e, 0xbc, 0xdb, 0x66, 0x41, 0x80, 0x91, 0xdd, 0xf8, 0x57, 0xe4,
	0x27, 0x78, 0xc5, 0x3d, 0x8b, 0xb5, 0x35, 0xe6, 0x55, 0xdf, 0xc1, 0x72, 0x7a, 0x39, 0x6d, 0xe8,
	0x0d, 0x93, 0x84, 0x32, 0xe9, 0xbd, 0xbe, 0x2c, 0xf2, 0x0f, 0xb0, 0x92, 0x74, 0xfb, 0xbd, 0x56,
	0xc8, 0xfc, 0x60, 0x18, 0x7a, 0x12, 0xb7, 0xb7, 0x94, 0x62, 0x64, 0xb1, 0x8f, 0xa0, 0x62, 0x3e,
	0x5e, 0x1d, 0xa0, 0x4e, 0xe2, 0xf9, 0x4a, 0xfa, 0x2b, 0xd6, 0x14, 0x8f, 0x02, 0x31, 0x9f, 0x98,
	0x79, 0x4e, 0x22, 0xfa, 0xb1, 0x9c, 0x3c, 0x62, 0xb2, 0xfa, 0x4d, 0xa5, 0x7e, 0x8a, 0xf6, 0xa9,
	0x6a, 0xae, 0x71, 0xa7, 0xb7, 0xd9, 0xec, 0x44, 0xe8, 0x4f, 0x97, 0xe8, 0x8a, 0xe6, 0xbf, 0x36,
	0xec, 0x7d, 0xc3, 0x25, 0xbf, 0x87, 0xd5, 0x6b, 0x2a, 0x83, 0xaf, 0x35, 0x94, 0xa7, 0x29, 0xd2,
	0xea, 0xf9, 0x88, 0x56, 0xfa, 0xc5, 0x46, 0x04, 0xf3, 0xf6, 0x5a, 0x22, 0x86, 0x38, 0x70, 0x33,
	0x4f, 0x38, 0x6e, 0xa3, 0xac, 0xd9, 0x15, 0x63, 0x6e, 0x34, 0x2a, 0x4b, 0x67, 0xf2, 0x07, 0x7f,
	0x40, 0x59, 0xfd, 0xbf, 0x53, 0x50, 0xfd, 0x39, 0x49, 0xf2, 0x21, 0x94, 0xb3, 0xcd, 0xb1, 0x3f,
	0xe3, 0x33, 0x4b, 0x8b, 0x19, 0x88, 0xba, 0xa7, 0x92, 0xc0, 0x21, 0xb9, 0x81, 0xff, 0xc9, 0xd3,
	0x4a, 0x46, 0x54, 0x5f, 0x1f, 0xfc, 0xdb, 0x65, 0xcb, 0x12, 0xbe, 0xfa, 0x0a, 0x8a, 0x43, 0x19,
	0xe2, 0x9b, 0x5a, 0x4a, 0xbc, 0x42, 0xb3, 0xdb, 0xa2, 0x42, 0x24, 0x94, 0xb7, 0x35, 0x54, 0xc5,
	0x46, 0xd6, 0x53, 0x0f, 0xf3, 0xda, 0xe1, 0xea, 0x2b, 0x71, 0x6e, 0xec, 0xe3, 0x4f, 0xf0, 0x0c,
	0xff, 0xa8, 0x0e, 0xf8, 0x72, 0xc7, 0x30, 0xfe, 0x86, 0xdc, 0xeb, 0x16, 0x2c, 0xd9, 0x7a, 0xa4,
	0xb9, 0x3b, 0x61, 0x7f, 0xd8, 0xa0, 0x92, 0x7e, 0x49, 0x68, 0x6f, 0x5f, 0xe8, 0xaf, 0x6f, 0xca,
	0x96, 0x6e, 0xe4, 0x6b, 0xff, 0xf4, 0x36, 0x14, 0x74, 0xaf, 0x7e, 0xe6, 0xc6, 0x5b, 0xf9, 0x8d,
	0x6f, 0xbc, 0x7d, 0x3a, 0x58, 0xd5, 0xf8, 0x53, 0x0f, 0x61, 0x32, 0xf4, 0x61, 0x49, 0xc9, 0x30,
	0x1b, 0x9a, 0x47, 0x3e, 0x86, 0x22, 0xe6, 0xfd, 0xe9, 0x7d, 0xff, 0xd2, 0xd0, 0x81, 0x14, 0xf2,
	0xec, 0xad, 0xff, 0x35, 0x28, 0x9b, 0x1b, 0xff, 0x29, 0xf4, 0xd0, 0xed, 0xc3, 0x92, 0xe1, 0x5a,
	0xec, 0x7d, 0xc4, 0x36, 0x3f, 0xef, 0x13, 0xb6, 0x05, 0x7e, 0x23, 0x3b, 0xa6, 0x1e, 0x7f, 0xed,
	0x37, 0x9e, 0xf0, 0xbd, 0x29, 0x89, 0xd4, 0xa1, 0x14, 0xe2, 0x07, 0xd0, 0xf6, 0x6b, 0x5b, 0x73,
	0xcb, 0xe7, 0x26, 0x9f, 0x49, 0x17, 0xc3, 0x2c, 0x8d, 0x1c, 0x40, 0x79, 0xf4, 0x07, 0x4d, 0xf4,
	0xf5, 0xdc, 0xf7, 0xaf, 0x0f, 0xf5, 0xb5, 0x9f, 0x32, 0xa2, 0x25, 0x39, 0xfa, 0x43, 0x29, 0xf9,
	0xf4, 0xf7, 0x59, 0xaa, 0xb7, 0xc6, 0xff, 0xda, 0xcb, 0xd0, 0x2f, 0xba, 0xd0, 0x39, 0xfb, 0xdb,
	0x2d, 0xe4, 0x4b, 0x28, 0xf0, 0xd0, 0x73, 0xa4, 0xb6, 0x74, 0xe6, 0x2e, 0xd0, 0x7b, 0xbf, 0x60,
	0x0b, 0x29, 0xf0, 0x94, 0x40, 0x0e, 0x61, 0x01, 0x33, 0xac, 0x40, 0x57, 0x5b, 0x79, 0x98, 0xc4,
	0x57, 0xd5, 0x39, 0x6c, 0xc5, 0xfd, 0xf1, 0x0b, 0x67, 0xf0, 0xab, 0x68, 0xb4, 0x92, 0x51, 0x45,
	0x32, 0x79, 0x17, 0xe6, 0x02, 0x16, 0x76, 0xfa, 0xac, 0xa3, 0x9d, 0x78, 0x7e, 0x73, 0x8a, 0x87,
	0x34, 0xa5, 0x91, 0x7b, 0x70, 0xdb, 0xae, 0x6a, 0xb0, 0x9f, 0x72, 0x58, 0x0a, 0xa9, 0x43, 0xc5,
	0xfc, 0x36, 0x5b, 0xcc, 0xdb, 0x3c, 0xe6, 0xca, 0x1d, 0x14, 0xc6, 0x9f, 0x28, 0x0d, 0xef, 0x66,
	0x6a, 0x7e, 0xd3, 0x8d, 0x5a, 0x35, 0x72, 0x0c, 0x95, 0x74, 0x2f, 0xd8, 0x17, 0xfe, 0xcc, 0x35,
	0x9b, 0x71, 0xdb, 0x90, 0x96, 0xbd, 0x61, 0x2a, 0xf9, 0x08, 0xca, 0x31, 0x6f, 0xc7, 0x5c, 0x76,
	0xf1, 0x7b, 0x03, 0xd1, 0x4f, 0xf0, 0x22, 0xc7, 0x2c, 0x2d, 0x19, 0x72, 0x53, 0x53, 0x6b, 0xff,
	0x2b, 0x07, 0x4b, 0x7b, 0xa1, 0x1b, 0x5f, 0x45, 0x09, 0xf7, 0xb2, 0xdb, 0xf3, 0xef, 0x40, 0x99,
	0x6b, 0xba, 0x1a, 0xe8, 0xcc, 0xef, 0x5c, 0x3c, 0xb9, 0x3e, 0x5f, 0xd7, 0xd5, 0x2d, 0xd1, 0x17,
	0x21, 0x7e, 0x15, 0x57, 0xe2, 0x43, 0xcf, 0xaa, 0x7d, 0x19, 0x74, 0x73, 0x9d, 0x34, 0xf7, 0x70,
	0x3e, 0x2b, 0x88, 0x07, 0xc2, 0xef, 0x41, 0xc1, 0x0c, 0x32, 0x0a, 0x4d, 0xa3, 0x10, 0x68, 0x12,
	0xde, 0x39, 0xfd, 0x00, 0x4a, 0xc3, 0xef, 0x22, 0x04, 0x4a, 0x7b, 0x47, 0x3b, 0xf4, 0xfb, 0x46,
	0xb3, 0x7e, 0x7c, 0xe4, 0x7c, 0x77, 0x4c, 0x2b, 0x6f, 0x6d, 0x3f, 0x80, 0xf7, 0x5c, 0xd1, 0xb3,
	0x41, 0xb1, 0xed, 0x40, 0x22, 0x44, 0x20, 0x4d, 0x37, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xad, 0x45, 0x96, 0x5a, 0x69, 0x4f, 0x00, 0x00,
}
