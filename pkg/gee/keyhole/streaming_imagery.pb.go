// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streaming_imagery.proto

package keyhole

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EarthImageryPacket_Codec int32

const (
	EarthImageryPacket_JPEG     EarthImageryPacket_Codec = 0
	EarthImageryPacket_JPEG2000 EarthImageryPacket_Codec = 1
	EarthImageryPacket_DXT1     EarthImageryPacket_Codec = 2
	EarthImageryPacket_DXT5     EarthImageryPacket_Codec = 3
	EarthImageryPacket_PNG_RGBA EarthImageryPacket_Codec = 4
)

var EarthImageryPacket_Codec_name = map[int32]string{
	0: "JPEG",
	1: "JPEG2000",
	2: "DXT1",
	3: "DXT5",
	4: "PNG_RGBA",
}
var EarthImageryPacket_Codec_value = map[string]int32{
	"JPEG":     0,
	"JPEG2000": 1,
	"DXT1":     2,
	"DXT5":     3,
	"PNG_RGBA": 4,
}

func (x EarthImageryPacket_Codec) Enum() *EarthImageryPacket_Codec {
	p := new(EarthImageryPacket_Codec)
	*p = x
	return p
}
func (x EarthImageryPacket_Codec) String() string {
	return proto.EnumName(EarthImageryPacket_Codec_name, int32(x))
}
func (x *EarthImageryPacket_Codec) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EarthImageryPacket_Codec_value, data, "EarthImageryPacket_Codec")
	if err != nil {
		return err
	}
	*x = EarthImageryPacket_Codec(value)
	return nil
}
func (EarthImageryPacket_Codec) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_streaming_imagery_d105a4c845687aa1, []int{0, 0}
}

type EarthImageryPacket_SeparateAlphaType int32

const (
	EarthImageryPacket_NONE       EarthImageryPacket_SeparateAlphaType = 0
	EarthImageryPacket_PNG        EarthImageryPacket_SeparateAlphaType = 1
	EarthImageryPacket_JPEG_ALPHA EarthImageryPacket_SeparateAlphaType = 2
	EarthImageryPacket_RLE_1_BIT  EarthImageryPacket_SeparateAlphaType = 3
)

var EarthImageryPacket_SeparateAlphaType_name = map[int32]string{
	0: "NONE",
	1: "PNG",
	2: "JPEG_ALPHA",
	3: "RLE_1_BIT",
}
var EarthImageryPacket_SeparateAlphaType_value = map[string]int32{
	"NONE":       0,
	"PNG":        1,
	"JPEG_ALPHA": 2,
	"RLE_1_BIT":  3,
}

func (x EarthImageryPacket_SeparateAlphaType) Enum() *EarthImageryPacket_SeparateAlphaType {
	p := new(EarthImageryPacket_SeparateAlphaType)
	*p = x
	return p
}
func (x EarthImageryPacket_SeparateAlphaType) String() string {
	return proto.EnumName(EarthImageryPacket_SeparateAlphaType_name, int32(x))
}
func (x *EarthImageryPacket_SeparateAlphaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EarthImageryPacket_SeparateAlphaType_value, data, "EarthImageryPacket_SeparateAlphaType")
	if err != nil {
		return err
	}
	*x = EarthImageryPacket_SeparateAlphaType(value)
	return nil
}
func (EarthImageryPacket_SeparateAlphaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_streaming_imagery_d105a4c845687aa1, []int{0, 1}
}

// Protocol message to describe an imagery packet
type EarthImageryPacket struct {
	// An image encoded with jpeg2000 might have alpha directly in the
	// image.  The decoder needs to handle this case.
	ImageType  *EarthImageryPacket_Codec             `protobuf:"varint,1,opt,name=image_type,json=imageType,enum=keyhole.EarthImageryPacket_Codec,def=0" json:"image_type,omitempty"`
	ImageData  []byte                                `protobuf:"bytes,2,opt,name=image_data,json=imageData" json:"image_data,omitempty"`
	AlphaType  *EarthImageryPacket_SeparateAlphaType `protobuf:"varint,3,opt,name=alpha_type,json=alphaType,enum=keyhole.EarthImageryPacket_SeparateAlphaType,def=0" json:"alpha_type,omitempty"`
	ImageAlpha []byte                                `protobuf:"bytes,4,opt,name=image_alpha,json=imageAlpha" json:"image_alpha,omitempty"`
	// The ids of copyrights associated with the data in this packet.
	CopyrightIds         []uint32 `protobuf:"varint,5,rep,name=copyright_ids,json=copyrightIds" json:"copyright_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EarthImageryPacket) Reset()         { *m = EarthImageryPacket{} }
func (m *EarthImageryPacket) String() string { return proto.CompactTextString(m) }
func (*EarthImageryPacket) ProtoMessage()    {}
func (*EarthImageryPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_streaming_imagery_d105a4c845687aa1, []int{0}
}
func (m *EarthImageryPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EarthImageryPacket.Unmarshal(m, b)
}
func (m *EarthImageryPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EarthImageryPacket.Marshal(b, m, deterministic)
}
func (dst *EarthImageryPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EarthImageryPacket.Merge(dst, src)
}
func (m *EarthImageryPacket) XXX_Size() int {
	return xxx_messageInfo_EarthImageryPacket.Size(m)
}
func (m *EarthImageryPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EarthImageryPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EarthImageryPacket proto.InternalMessageInfo

const Default_EarthImageryPacket_ImageType EarthImageryPacket_Codec = EarthImageryPacket_JPEG
const Default_EarthImageryPacket_AlphaType EarthImageryPacket_SeparateAlphaType = EarthImageryPacket_NONE

func (m *EarthImageryPacket) GetImageType() EarthImageryPacket_Codec {
	if m != nil && m.ImageType != nil {
		return *m.ImageType
	}
	return Default_EarthImageryPacket_ImageType
}

func (m *EarthImageryPacket) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (m *EarthImageryPacket) GetAlphaType() EarthImageryPacket_SeparateAlphaType {
	if m != nil && m.AlphaType != nil {
		return *m.AlphaType
	}
	return Default_EarthImageryPacket_AlphaType
}

func (m *EarthImageryPacket) GetImageAlpha() []byte {
	if m != nil {
		return m.ImageAlpha
	}
	return nil
}

func (m *EarthImageryPacket) GetCopyrightIds() []uint32 {
	if m != nil {
		return m.CopyrightIds
	}
	return nil
}

func init() {
	proto.RegisterType((*EarthImageryPacket)(nil), "keyhole.EarthImageryPacket")
	proto.RegisterEnum("keyhole.EarthImageryPacket_Codec", EarthImageryPacket_Codec_name, EarthImageryPacket_Codec_value)
	proto.RegisterEnum("keyhole.EarthImageryPacket_SeparateAlphaType", EarthImageryPacket_SeparateAlphaType_name, EarthImageryPacket_SeparateAlphaType_value)
}

func init() {
	proto.RegisterFile("streaming_imagery.proto", fileDescriptor_streaming_imagery_d105a4c845687aa1)
}

var fileDescriptor_streaming_imagery_d105a4c845687aa1 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x3f, 0x6f, 0xe2, 0x40,
	0x10, 0xc5, 0x31, 0x36, 0x02, 0xe6, 0x00, 0xed, 0x6d, 0x73, 0x6e, 0x4e, 0xfc, 0xb9, 0x86, 0xe6,
	0x2c, 0x40, 0x4a, 0x43, 0x67, 0x82, 0xe3, 0x10, 0x21, 0xc7, 0x72, 0x28, 0xd2, 0xad, 0x46, 0xf6,
	0xca, 0xb6, 0xc0, 0xac, 0x65, 0xb6, 0xf1, 0xa7, 0xc9, 0x57, 0x8d, 0x76, 0x0d, 0x34, 0x48, 0xe9,
	0x46, 0x6f, 0xe6, 0xcd, 0xef, 0xcd, 0x2e, 0xfc, 0xb9, 0xc8, 0x8a, 0x63, 0x91, 0x9f, 0x53, 0x96,
	0x17, 0x98, 0xf2, 0xaa, 0x76, 0xca, 0x4a, 0x48, 0x41, 0xbb, 0x47, 0x5e, 0x67, 0xe2, 0xc4, 0x67,
	0x5f, 0x26, 0x50, 0x0f, 0x2b, 0x99, 0xed, 0x9a, 0x7e, 0x88, 0xf1, 0x91, 0x4b, 0xfa, 0x02, 0xa0,
	0x0d, 0x4c, 0xd6, 0x25, 0xb7, 0x8d, 0x89, 0x31, 0x1f, 0xad, 0xa6, 0xce, 0xd5, 0xe4, 0x3c, 0x1a,
	0x9c, 0x67, 0x91, 0xf0, 0x78, 0x6d, 0xbd, 0x85, 0x9e, 0x1f, 0xf5, 0xb5, 0xf5, 0x50, 0x97, 0x9c,
	0xfe, 0xbd, 0xed, 0x49, 0x50, 0xa2, 0xdd, 0x9e, 0x18, 0xf3, 0xc1, 0xb5, 0xbd, 0x45, 0x89, 0x34,
	0x02, 0xc0, 0x53, 0x99, 0x61, 0x83, 0x31, 0x35, 0xe6, 0xff, 0x4f, 0x98, 0x0f, 0x5e, 0x62, 0x85,
	0x92, 0xbb, 0xca, 0xa5, 0x08, 0x6b, 0x2b, 0x78, 0x0f, 0xbc, 0xa8, 0x8f, 0x37, 0x81, 0x8e, 0xe1,
	0x57, 0x83, 0xd4, 0x92, 0x6d, 0x69, 0x66, 0x93, 0x42, 0xbb, 0xe8, 0x3f, 0x18, 0xc6, 0xa2, 0xac,
	0xab, 0x3c, 0xcd, 0x24, 0xcb, 0x93, 0x8b, 0xdd, 0x99, 0x98, 0xf3, 0x61, 0x34, 0xb8, 0x8b, 0xbb,
	0xe4, 0x32, 0x73, 0xa1, 0xa3, 0x4f, 0xa2, 0x3d, 0xd0, 0x47, 0x91, 0x16, 0x1d, 0x40, 0x4f, 0x55,
	0xab, 0xc5, 0x62, 0x41, 0x0c, 0xa5, 0x6f, 0x3f, 0x0f, 0x4b, 0xd2, 0xbe, 0x56, 0x4f, 0xc4, 0x54,
	0x13, 0x61, 0xe0, 0xb3, 0xc8, 0xdf, 0xb8, 0xc4, 0x9a, 0x79, 0xf0, 0xfb, 0x21, 0xae, 0x1a, 0x56,
	0x81, 0x49, 0x8b, 0x76, 0xc1, 0x0c, 0x03, 0x9f, 0x18, 0x74, 0x04, 0xa0, 0xf6, 0x32, 0x77, 0x1f,
	0xbe, 0xba, 0xa4, 0x4d, 0x87, 0xd0, 0x8f, 0xf6, 0x1e, 0x5b, 0xb2, 0xcd, 0xee, 0x40, 0xcc, 0xcd,
	0x14, 0xc6, 0xb1, 0x28, 0x9c, 0x54, 0x88, 0xf4, 0xc4, 0xef, 0x6f, 0x13, 0x8b, 0xa2, 0x10, 0xe7,
	0xe6, 0x37, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xbb, 0x22, 0xff, 0xe7, 0x01, 0x00, 0x00,
}
